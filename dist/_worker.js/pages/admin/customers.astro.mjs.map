{"version":3,"file":"customers.astro.mjs","sources":["../../../../src/components/admin/customers-table.tsx","../../../../src/pages/admin/customers.astro"],"sourcesContent":["import type { ColumnDef } from \"@tanstack/react-table\";\r\n\r\nimport { DataTable } from \"@/components/admin/data-table\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\n\r\nimport {\r\n  createColumnHelper,\r\n  getCoreRowModel,\r\n  useReactTable,\r\n} from \"@tanstack/react-table\";\r\nexport type Customer = {\r\n  id: number;\r\n  name: string;\r\n  email: string;\r\n  notes: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n  subscription?: {\r\n    status: string;\r\n  };\r\n};\r\n\r\nconst columnHelper = createColumnHelper<Customer>();\r\n\r\n// Helper function to determine professional type from notes\r\nconst getProfessionalType = (notes: string) => {\r\n  if (!notes) return null;\r\n  if (notes.toLowerCase().includes('slp')) return 'SLP';\r\n  if (notes.toLowerCase().includes('ot')) return 'OT';\r\n  if (notes.toLowerCase().includes('pt')) return 'PT';\r\n  return null;\r\n};\r\n\r\n// Helper function to get status badge variant\r\nconst getStatusVariant = (status: string) => {\r\n  switch (status?.toLowerCase()) {\r\n    case 'active': return 'default' as const;\r\n    case 'inactive': return 'secondary' as const;\r\n    case 'pending': return 'outline' as const;\r\n    default: return 'secondary' as const;\r\n  }\r\n};\r\n\r\nconst columns: ColumnDef<Customer, any>[] = [\r\n  columnHelper.accessor(\"id\", {\r\n    header: \"ID\",\r\n    cell: (info) => (\r\n      <div className=\"font-mono text-sm text-slate-600\">\r\n        #{String(info.getValue()).padStart(4, '0')}\r\n      </div>\r\n    ),\r\n  } as ColumnDef<Customer, any>),\r\n  columnHelper.accessor(\"name\", {\r\n    header: \"Healthcare Professional\",\r\n    cell: (info) => {\r\n      const professionalType = getProfessionalType(info.row.original.notes);\r\n      return (\r\n        <div className=\"space-y-1\">\r\n          <a\r\n            className=\"font-medium text-slate-900 hover:text-blue-600 transition-colors flex items-center space-x-2\"\r\n            href={`/admin/customers/${info.row.original.id}`}\r\n          >\r\n            <div className=\"w-8 h-8 rounded-full bg-gradient-to-br from-blue-500 to-cyan-500 flex items-center justify-center text-white text-xs font-semibold\">\r\n              {info.getValue().split(' ').map((n: string) => n[0]).join('')}\r\n            </div>\r\n            <span>{info.getValue()}</span>\r\n          </a>\r\n          {professionalType && (\r\n            <Badge\r\n              variant=\"secondary\"\r\n              className={`text-xs ${\r\n                professionalType === 'SLP' ? 'bg-blue-100 text-blue-800' :\r\n                professionalType === 'OT' ? 'bg-green-100 text-green-800' :\r\n                'bg-purple-100 text-purple-800'\r\n              }`}\r\n            >\r\n              {professionalType === 'SLP' ? 'üó£Ô∏è Speech-Language Pathologist' :\r\n               professionalType === 'OT' ? 'üñêÔ∏è Occupational Therapist' :\r\n               'üèÉ Physical Therapist'}\r\n            </Badge>\r\n          )}\r\n        </div>\r\n      );\r\n    },\r\n  } as ColumnDef<Customer, any>),\r\n  columnHelper.accessor(\"email\", {\r\n    header: \"Contact Information\",\r\n    cell: (info) => (\r\n      <div className=\"space-y-1\">\r\n        <div className=\"text-sm text-slate-900\">{info.getValue()}</div>\r\n        <div className=\"flex items-center text-xs text-slate-500\">\r\n          <svg className=\"w-3 h-3 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z\" />\r\n          </svg>\r\n          Verified Contact\r\n        </div>\r\n      </div>\r\n    ),\r\n  } as ColumnDef<Customer, any>),\r\n  columnHelper.accessor(\"notes\", {\r\n    header: \"Clinical Notes\",\r\n    cell: (info) => {\r\n      const notes = info.getValue();\r\n      return (\r\n        <div className=\"max-w-xs\">\r\n          {notes ? (\r\n            <div className=\"text-sm text-slate-600 truncate\" title={notes}>\r\n              {notes}\r\n            </div>\r\n          ) : (\r\n            <div className=\"text-xs text-slate-400 italic\">No clinical notes</div>\r\n          )}\r\n        </div>\r\n      );\r\n    },\r\n  } as ColumnDef<Customer, any>),\r\n  {\r\n    id: \"subscription_status\",\r\n    header: \"License Status\",\r\n    cell: (info) => {\r\n      const status = (info.row.original as any).subscription?.status || 'inactive';\r\n      return (\r\n        <Badge variant={getStatusVariant(status)} className=\"capitalize\">\r\n          {status === 'active' && (\r\n            <div className=\"w-2 h-2 bg-green-500 rounded-full mr-1\"></div>\r\n          )}\r\n          {status === 'pending' && (\r\n            <div className=\"w-2 h-2 bg-yellow-500 rounded-full mr-1\"></div>\r\n          )}\r\n          {status === 'inactive' && (\r\n            <div className=\"w-2 h-2 bg-gray-400 rounded-full mr-1\"></div>\r\n          )}\r\n          {status}\r\n        </Badge>\r\n      );\r\n    },\r\n  } as ColumnDef<Customer, any>,\r\n  columnHelper.accessor(\"created_at\", {\r\n    header: \"Registration Date\",\r\n    cell: (info) => (\r\n      <div className=\"text-sm space-y-1\">\r\n        <div className=\"text-slate-900\">\r\n          {new Date(info.getValue()).toLocaleDateString('en-US', {\r\n            month: 'short',\r\n            day: 'numeric',\r\n            year: 'numeric'\r\n          })}\r\n        </div>\r\n        <div className=\"text-xs text-slate-500\">\r\n          {new Date(info.getValue()).toLocaleDateString('en-US', {\r\n            weekday: 'short'\r\n          })}\r\n        </div>\r\n      </div>\r\n    ),\r\n  } as ColumnDef<Customer, any>),\r\n  columnHelper.accessor(\"updated_at\", {\r\n    header: \"Last Activity\",\r\n    cell: (info) => {\r\n      const daysSince = Math.floor((new Date().getTime() - new Date(info.getValue()).getTime()) / (1000 * 60 * 60 * 24));\r\n      return (\r\n        <div className=\"text-sm space-y-1\">\r\n          <div className=\"text-slate-900\">\r\n            {daysSince === 0 ? 'Today' :\r\n             daysSince === 1 ? 'Yesterday' :\r\n             `${daysSince} days ago`}\r\n          </div>\r\n          <div className=\"text-xs text-slate-500\">\r\n            {new Date(info.getValue()).toLocaleDateString('en-US', {\r\n              month: 'short',\r\n              day: 'numeric'\r\n            })}\r\n          </div>\r\n        </div>\r\n      );\r\n    },\r\n  } as ColumnDef<Customer, any>),\r\n];\r\n\r\ninterface DataTableProps {\r\n  data: Customer[];\r\n}\r\n\r\nexport function CustomersTable({ data }: DataTableProps) {\r\n  const table = useReactTable({\r\n    data,\r\n    columns,\r\n    getCoreRowModel: getCoreRowModel(),\r\n  });\r\n\r\n  return (\r\n    <div className=\"bg-white rounded-lg border border-slate-200 shadow-sm overflow-hidden\">\r\n      <div className=\"bg-gradient-to-r from-slate-50 to-blue-50 px-6 py-4 border-b border-slate-200\">\r\n        <h3 className=\"text-lg font-semibold text-slate-900 flex items-center space-x-2\">\r\n          <svg className=\"w-5 h-5 text-blue-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z\" />\r\n          </svg>\r\n          <span>Healthcare Professionals Directory</span>\r\n        </h3>\r\n        <p className=\"text-sm text-slate-600 mt-1\">\r\n          Manage licensed speech-language pathologists and occupational therapists\r\n        </p>\r\n      </div>\r\n      <DataTable table={table} />\r\n    </div>\r\n  );\r\n}\r\n","---\r\nexport const prerender = false;\r\n\r\nimport Layout from '@/layouts/Layout.astro';\r\nimport { CustomerService } from \"@/lib/services/customer\";\r\n\r\nconst { API_TOKEN, DB } = Astro.locals.env || {};\r\n\r\nconst customerService = new CustomerService(DB);\r\nconst customers = await customerService.getAll();\r\n\r\nimport { CustomersTable } from '@/components/admin/customers-table';\r\nimport { CreateCustomerButton } from '@/components/admin/create-customer';\r\n---\r\n\r\n<Layout title=\"Customers\">\r\n  {customers.length ? (\r\n    <CustomersTable data={customers} />\r\n  ) : (\r\n    <p class=\"font-medium text-muted-foreground\">\r\n      No customers yet. Try creating one using the API or by selecting \"Create New Customer\" above.\r\n    </p>\r\n  )}\r\n\r\n  <div slot=\"actions\">\r\n    <CreateCustomerButton apiToken={API_TOKEN} client:only=\"react\" />\r\n  </div>\r\n</Layout>\r\n"],"names":["jsxs","jsx","$$createAstro","$$createComponent","Astro","$$render","$$renderComponent","Layout","$$result","$$maybeRenderHead"],"mappings":"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"}