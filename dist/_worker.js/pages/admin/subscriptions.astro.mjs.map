{"version":3,"file":"subscriptions.astro.mjs","sources":["../../../../src/components/admin/subscriptions-table.tsx","../../../../src/pages/admin/subscriptions.astro"],"sourcesContent":["import type { ColumnDef } from \"@tanstack/react-table\";\r\n\r\nimport { DataTable } from \"@/components/admin/data-table\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\n\r\nimport {\r\n  createColumnHelper,\r\n  getCoreRowModel,\r\n  useReactTable,\r\n} from \"@tanstack/react-table\";\r\n\r\nexport type Subscription = {\r\n  id: number;\r\n  name: string;\r\n  description: string;\r\n  price: number;\r\n  created_at: string;\r\n  updated_at: string;\r\n  status?: string;\r\n  tier?: string;\r\n  features?: string[];\r\n  subscribers?: number;\r\n};\r\n\r\nconst columnHelper = createColumnHelper<Subscription>();\r\n\r\n// Enhanced subscription tier detection based on name and price\r\nconst getSubscriptionTier = (name: string, price: number): 'Basic' | 'Professional' | 'Enterprise' | 'Clinical' => {\r\n  const lowerName = name.toLowerCase();\r\n  if (price === 0 || lowerName.includes('free') || lowerName.includes('trial')) return 'Basic';\r\n  if (price > 100 || lowerName.includes('enterprise') || lowerName.includes('premium')) return 'Enterprise';\r\n  if (lowerName.includes('clinical') || lowerName.includes('therapy') || lowerName.includes('professional')) return 'Clinical';\r\n  return 'Professional';\r\n};\r\n\r\n// Enhanced subscription status detection\r\nconst getSubscriptionStatus = (subscription: Subscription): 'Active' | 'Inactive' | 'Trial' | 'Expired' => {\r\n  if (subscription.status) {\r\n    const status = subscription.status.toLowerCase();\r\n    if (status === 'trial') return 'Trial';\r\n    if (status === 'expired' || status === 'cancelled') return 'Expired';\r\n    if (status === 'inactive') return 'Inactive';\r\n  }\r\n  return 'Active';\r\n};\r\n\r\n// Clinical subscription tier badge styling\r\nconst getTierBadgeVariant = (tier: string) => {\r\n  switch (tier) {\r\n    case 'Basic': return 'outline';\r\n    case 'Professional': return 'default';\r\n    case 'Clinical': return 'destructive';\r\n    case 'Enterprise': return 'secondary';\r\n    default: return 'outline';\r\n  }\r\n};\r\n\r\n// Clinical subscription status badge styling\r\nconst getStatusBadgeVariant = (status: string) => {\r\n  switch (status) {\r\n    case 'Active': return 'default';\r\n    case 'Trial': return 'secondary';\r\n    case 'Inactive': return 'outline';\r\n    case 'Expired': return 'destructive';\r\n    default: return 'outline';\r\n  }\r\n};\r\n\r\nconst columns: ColumnDef<Subscription, any>[] = [\r\n  {\r\n    accessorKey: \"id\",\r\n    header: \"Plan ID\",\r\n    cell: ({ getValue }) => (\r\n      <div className=\"flex items-center space-x-2\">\r\n        <div className=\"w-8 h-8 rounded-full bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center text-white text-xs font-medium\">\r\n          {String(getValue()).slice(-2)}\r\n        </div>\r\n        <span className=\"text-sm font-medium text-muted-foreground\">#{getValue()}</span>\r\n      </div>\r\n    ),\r\n  } as ColumnDef<Subscription, any>,\r\n  {\r\n    accessorKey: \"name\",\r\n    header: \"Subscription Plan\",\r\n    cell: ({ getValue, row }) => {\r\n      const name = getValue() as string;\r\n      const tier = getSubscriptionTier(name, row.original.price);\r\n      return (\r\n        <div className=\"space-y-1\">\r\n          <a\r\n            className=\"text-sm font-medium text-primary hover:text-primary/80 transition-colors\"\r\n            href={`/admin/subscriptions/${row.original.id}`}\r\n          >\r\n            {name}\r\n          </a>\r\n          <div className=\"flex items-center space-x-2\">\r\n            <Badge variant={getTierBadgeVariant(tier)} className=\"text-xs\">\r\n              {tier}\r\n            </Badge>\r\n            {row.original.subscribers && (\r\n              <span className=\"text-xs text-muted-foreground\">\r\n                {row.original.subscribers} subscribers\r\n              </span>\r\n            )}\r\n          </div>\r\n        </div>\r\n      );\r\n    },\r\n  } as ColumnDef<Subscription, any>,\r\n  {\r\n    accessorKey: \"description\",\r\n    header: \"Clinical Features\",\r\n    cell: ({ getValue, row }) => {\r\n      const description = getValue() as string;\r\n      const features = row.original.features || [];\r\n      return (\r\n        <div className=\"space-y-1 max-w-xs\">\r\n          <p className=\"text-sm text-foreground line-clamp-2\">{description}</p>\r\n          {features.length > 0 && (\r\n            <div className=\"flex flex-wrap gap-1\">\r\n              {features.slice(0, 2).map((feature: string, index: number) => (\r\n                <Badge key={index} variant=\"outline\" className=\"text-xs\">\r\n                  {feature}\r\n                </Badge>\r\n              ))}\r\n              {features.length > 2 && (\r\n                <Badge variant=\"outline\" className=\"text-xs\">\r\n                  +{features.length - 2} more\r\n                </Badge>\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n      );\r\n    },\r\n  } as ColumnDef<Subscription, any>,\r\n  {\r\n    accessorKey: \"price\",\r\n    header: \"Monthly Rate\",\r\n    cell: ({ getValue, row }) => {\r\n      const price = getValue() as number;\r\n      const tier = getSubscriptionTier(row.original.name, price);\r\n      return (\r\n        <div className=\"space-y-1\">\r\n          <div className=\"text-sm font-semibold text-foreground\">\r\n            {price === 0 ? (\r\n              <span className=\"text-green-600\">Free</span>\r\n            ) : (\r\n              <span>${price.toFixed(2)}</span>\r\n            )}\r\n            {price > 0 && <span className=\"text-muted-foreground text-xs\">/month</span>}\r\n          </div>\r\n          {tier === 'Clinical' && (\r\n            <Badge variant=\"destructive\" className=\"text-xs\">\r\n              HIPAA Compliant\r\n            </Badge>\r\n          )}\r\n        </div>\r\n      );\r\n    },\r\n  } as ColumnDef<Subscription, any>,\r\n  {\r\n    accessorKey: \"status\",\r\n    header: \"Status\",\r\n    cell: ({ row }) => {\r\n      const status = getSubscriptionStatus(row.original);\r\n      return (\r\n        <div className=\"space-y-1\">\r\n          <Badge variant={getStatusBadgeVariant(status)} className=\"text-xs\">\r\n            {status}\r\n          </Badge>\r\n          {status === 'Active' && (\r\n            <div className=\"text-xs text-green-600\">\r\n              ● Available for signup\r\n            </div>\r\n          )}\r\n          {status === 'Trial' && (\r\n            <div className=\"text-xs text-blue-600\">\r\n              ● 14-day trial period\r\n            </div>\r\n          )}\r\n        </div>\r\n      );\r\n    },\r\n  } as ColumnDef<Subscription, any>,\r\n  {\r\n    accessorKey: \"created_at\",\r\n    header: \"Launch Date\",\r\n    cell: ({ getValue }) => {\r\n      const date = new Date(getValue() as string);\r\n      const now = new Date();\r\n      const diffTime = Math.abs(now.getTime() - date.getTime());\r\n      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\r\n      \r\n      return (\r\n        <div className=\"space-y-1\">\r\n          <div className=\"text-sm text-foreground\">\r\n            {date.toLocaleDateString('en-US', {\r\n              month: 'short',\r\n              day: 'numeric',\r\n              year: 'numeric'\r\n            })}\r\n          </div>\r\n          <div className=\"text-xs text-muted-foreground\">\r\n            {diffDays < 30 ? `${diffDays} days ago` :\r\n             diffDays < 365 ? `${Math.floor(diffDays / 30)} months ago` :\r\n             `${Math.floor(diffDays / 365)} years ago`}\r\n          </div>\r\n        </div>\r\n      );\r\n    },\r\n  } as ColumnDef<Subscription, any>,\r\n];\r\n\r\ninterface DataTableProps {\r\n  data: Subscription[];\r\n}\r\n\r\nexport function SubscriptionsTable({ data }: DataTableProps) {\r\n  const table = useReactTable({\r\n    data,\r\n    columns,\r\n    getCoreRowModel: getCoreRowModel(),\r\n  });\r\n\r\n  return (\r\n    <div className=\"rounded-lg border border-slate-200/80 dark:border-slate-700/30 bg-gradient-to-br from-slate-50/90 to-slate-100/90 dark:from-slate-900/90 dark:to-slate-800/90 backdrop-blur-sm shadow-lg shadow-slate-200/50 dark:shadow-slate-900/50\">\r\n      <div className=\"p-6 border-b border-slate-200/80 dark:border-slate-700/30\">\r\n        <div className=\"flex items-center justify-between\">\r\n          <div>\r\n            <h3 className=\"text-xl font-semibold bg-gradient-to-r from-slate-900 to-slate-700 dark:from-slate-100 dark:to-slate-300 bg-clip-text text-transparent\">\r\n              Clinical Subscription Plans\r\n            </h3>\r\n            <p className=\"text-sm text-slate-600 dark:text-slate-400 mt-1\">\r\n              Manage healthcare professional subscription tiers and billing\r\n            </p>\r\n          </div>\r\n          <div className=\"flex items-center space-x-3\">\r\n            <Badge variant=\"outline\" className=\"text-xs border-slate-300/50 dark:border-slate-600/50 text-slate-600 dark:text-slate-400 bg-slate-50/50 dark:bg-slate-800/50\">\r\n              {data.length} Plans\r\n            </Badge>\r\n            <Badge variant=\"default\" className=\"text-xs bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white shadow-sm\">\r\n              {data.filter(sub => getSubscriptionStatus(sub) === 'Active').length} Active\r\n            </Badge>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <DataTable table={table} />\r\n    </div>\r\n  );\r\n}\r\n","---\r\nexport const prerender = false;\r\n\r\nimport Layout from '@/layouts/Layout.astro';\r\nimport { SubscriptionService } from '@/lib/services/subscription';\r\nimport { CreateSubscriptionButton } from '@/components/admin/create-subscription';\r\nimport { SubscriptionsTable } from '@/components/admin/subscriptions-table';\r\n\r\nconst { API_TOKEN, DB } = Astro.locals.env || {};\r\nconst subscriptionService = new SubscriptionService(DB);\r\nconst subscriptions = await subscriptionService.getAll();\r\n---\r\n\r\n<Layout title=\"Subscriptions\">\r\n  {subscriptions.length ? (\r\n    <SubscriptionsTable data={subscriptions} />\r\n  ) : (\r\n    <p class=\"font-medium text-muted-foreground\">\r\n      No subscriptions yet. Try creating one using the API or by selecting \"Create New Subscription\" above.\r\n    </p>\r\n  )}\r\n\r\n  <div slot=\"actions\">\r\n    <CreateSubscriptionButton apiToken={API_TOKEN} client:only=\"react\" />\r\n  </div>\r\n</Layout>\r\n"],"names":["jsxs","jsx","$$createAstro","$$createComponent","Astro","$$render","$$renderComponent","Layout","$$result","$$maybeRenderHead"],"mappings":"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"}