{"version":3,"file":"subscriptions.astro.mjs","sources":["../../../../src/pages/api/subscriptions.ts"],"sourcesContent":["import type { APIContext, APIRoute } from \"astro\";\r\nimport { SubscriptionService } from \"@/lib/services/subscription\";\r\nimport { authenticate, authorize } from \"@/lib/middleware/rbac-middleware\";\r\nimport { PERMISSIONS } from \"@/lib/utils/rbac\";\r\nimport { validateRequest, CreateSubscriptionRequest } from \"@/lib/schemas/api-validation\";\r\nimport { withPerformanceMonitoring } from \"@/lib/utils/performance-wrapper\";\r\n\r\nconst getHandler: APIRoute = async (context: APIContext) => {\r\n  const { DB } = (context.locals as any).runtime.env;\r\n\r\n  // Authenticate request\r\n  const authResult = await authenticate(context);\r\n  if (authResult instanceof Response) return authResult;\r\n\r\n  // Authorize request\r\n  const authzMiddleware = authorize(PERMISSIONS.READ, 'subscriptions');\r\n  const authzResult = await authzMiddleware(authResult);\r\n  if (authzResult instanceof Response) return authzResult;\r\n\r\n  const subscriptionService = new SubscriptionService(DB);\r\n\r\n  try {\r\n    const subscriptions = await subscriptionService.getAll();\r\n    return Response.json({ subscriptions });\r\n  } catch (error) {\r\n    return Response.json(\r\n      { message: \"Couldn't load subscriptions\" },\r\n      { status: 500 },\r\n    );\r\n  }\r\n}\r\n\r\nconst postHandler: APIRoute = async (context: APIContext) => {\r\n  const { DB } = (context.locals as any).runtime.env;\r\n\r\n  // Authenticate request\r\n  const authResult = await authenticate(context);\r\n  if (authResult instanceof Response) return authResult;\r\n\r\n  // Authorize request\r\n  const authzMiddleware = authorize(PERMISSIONS.CREATE, 'subscriptions');\r\n  const authzResult = await authzMiddleware(authResult);\r\n  if (authzResult instanceof Response) return authzResult;\r\n\r\n  const subscriptionService = new SubscriptionService(DB);\r\n\r\n  try {\r\n    const body = await context.request.json();\r\n    \r\n    // Validate request body using Zod schema\r\n    const validation = validateRequest(CreateSubscriptionRequest, body);\r\n    \r\n    if (!validation.success) {\r\n      return Response.json(\r\n        {\r\n          message: \"Invalid request data\",\r\n          errors: validation.errors\r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    await subscriptionService.create(validation.data);\r\n    return Response.json(\r\n      {\r\n        message: \"Subscription created successfully\",\r\n        success: true,\r\n      },\r\n      { status: 201 },\r\n    );\r\n  } catch (error) {\r\n    return Response.json(\r\n      {\r\n        message: error instanceof Error ? error.message : \"Failed to create subscription\",\r\n        success: false,\r\n      },\r\n      { status: 500 },\r\n    );\r\n  }\r\n}\r\n\r\nexport const GET = withPerformanceMonitoring(getHandler, 'subscriptions:list');\r\nexport const POST = withPerformanceMonitoring(postHandler, 'subscriptions:create');\r\n"],"names":[],"mappings":";;;;;;;;AAOA,MAAM,UAAA,GAAuB,OAAO,OAAA,KAAwB;AAC1D,EAAA,MAAM,EAAE,EAAA,EAAG,GAAK,OAAA,CAAQ,OAAe,OAAA,CAAQ,GAAA;AAG/C,EAAA,MAAM,UAAA,GAAa,MAAM,YAAA,CAAa,OAAO,CAAA;AAC7C,EAAA,IAAI,UAAA,YAAsB,UAAU,OAAO,UAAA;AAG3C,EAAA,MAAM,eAAA,GAAkB,SAAA,CAAU,WAAA,CAAY,IAAA,EAAM,eAAe,CAAA;AACnE,EAAA,MAAM,WAAA,GAAc,MAAM,eAAA,CAAgB,UAAU,CAAA;AACpD,EAAA,IAAI,WAAA,YAAuB,UAAU,OAAO,WAAA;AAE5C,EAAA,MAAM,mBAAA,GAAsB,IAAI,mBAAA,CAAoB,EAAE,CAAA;AAEtD,EAAA,IAAI;AACF,IAAA,MAAM,aAAA,GAAgB,MAAM,mBAAA,CAAoB,MAAA,EAAO;AACvD,IAAA,OAAO,QAAA,CAAS,IAAA,CAAK,EAAE,aAAA,EAAe,CAAA;AAAA,EACxC,SAAS,KAAA,EAAO;AACd,IAAA,OAAO,QAAA,CAAS,IAAA;AAAA,MACd,EAAE,SAAS,6BAAA,EAA8B;AAAA,MACzC,EAAE,QAAQ,GAAA;AAAI,KAChB;AAAA,EACF;AACF,CAAA;AAEA,MAAM,WAAA,GAAwB,OAAO,OAAA,KAAwB;AAC3D,EAAA,MAAM,EAAE,EAAA,EAAG,GAAK,OAAA,CAAQ,OAAe,OAAA,CAAQ,GAAA;AAG/C,EAAA,MAAM,UAAA,GAAa,MAAM,YAAA,CAAa,OAAO,CAAA;AAC7C,EAAA,IAAI,UAAA,YAAsB,UAAU,OAAO,UAAA;AAG3C,EAAA,MAAM,eAAA,GAAkB,SAAA,CAAU,WAAA,CAAY,MAAA,EAAQ,eAAe,CAAA;AACrE,EAAA,MAAM,WAAA,GAAc,MAAM,eAAA,CAAgB,UAAU,CAAA;AACpD,EAAA,IAAI,WAAA,YAAuB,UAAU,OAAO,WAAA;AAE5C,EAAA,MAAM,mBAAA,GAAsB,IAAI,mBAAA,CAAoB,EAAE,CAAA;AAEtD,EAAA,IAAI;AACF,IAAA,MAAM,IAAA,GAAO,MAAM,OAAA,CAAQ,OAAA,CAAQ,IAAA,EAAK;AAGxC,IAAA,MAAM,UAAA,GAAa,eAAA,CAAgB,yBAAA,EAA2B,IAAI,CAAA;AAElE,IAAA,IAAI,CAAC,WAAW,OAAA,EAAS;AACvB,MAAA,OAAO,QAAA,CAAS,IAAA;AAAA,QACd;AAAA,UACE,OAAA,EAAS,sBAAA;AAAA,UACT,QAAQ,UAAA,CAAW;AAAA,SACrB;AAAA,QACA,EAAE,QAAQ,GAAA;AAAI,OAChB;AAAA,IACF;AAEA,IAAA,MAAM,mBAAA,CAAoB,MAAA,CAAO,UAAA,CAAW,IAAI,CAAA;AAChD,IAAA,OAAO,QAAA,CAAS,IAAA;AAAA,MACd;AAAA,QACE,OAAA,EAAS,mCAAA;AAAA,QACT,OAAA,EAAS;AAAA,OACX;AAAA,MACA,EAAE,QAAQ,GAAA;AAAI,KAChB;AAAA,EACF,SAAS,KAAA,EAAO;AACd,IAAA,OAAO,QAAA,CAAS,IAAA;AAAA,MACd;AAAA,QACE,OAAA,EAAS,KAAA,YAAiB,KAAA,GAAQ,KAAA,CAAM,OAAA,GAAU,+BAAA;AAAA,QAClD,OAAA,EAAS;AAAA,OACX;AAAA,MACA,EAAE,QAAQ,GAAA;AAAI,KAChB;AAAA,EACF;AACF,CAAA;AAEO,MAAM,GAAA,GAAM,yBAAA,CAA0B,UAAA,EAAY,oBAAoB,CAAA;AACtE,MAAM,IAAA,GAAO,yBAAA,CAA0B,WAAA,EAAa,sBAAsB,CAAA;;;;;;;;;;;;"}