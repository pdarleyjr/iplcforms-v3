{"version":3,"file":"customers.astro.mjs","sources":["../../../../src/pages/api/customers.ts"],"sourcesContent":["import { CustomerService } from \"@/lib/services/customer\";\r\nimport { authenticate, authorize } from \"@/lib/middleware/rbac-middleware\";\r\nimport { PERMISSIONS } from \"@/lib/utils/rbac\";\r\nimport { CreateCustomerRequest, validateRequest, ApiResponseSchema } from \"@/lib/schemas/api-validation\";\r\nimport type { APIContext, APIRoute } from \"astro\";\r\nimport { withPerformanceMonitoring } from \"@/lib/utils/performance-wrapper\";\r\n\r\nconst getHandler: APIRoute = async (context: APIContext) => {\r\n  const { DB } = (context.locals as any).runtime.env;\r\n\r\n  // Authenticate request\r\n  const authResult = await authenticate(context);\r\n  if (authResult instanceof Response) return authResult;\r\n\r\n  // Authorize request\r\n  const authzMiddleware = authorize(PERMISSIONS.READ, 'customers');\r\n  const authzResult = await authzMiddleware(authResult);\r\n  if (authzResult instanceof Response) return authzResult;\r\n\r\n  const customerService = new CustomerService(DB);\r\n  const customers = await customerService.getAll();\r\n\r\n  if (customers) {\r\n    return Response.json({ customers });\r\n  } else {\r\n    return Response.json(\r\n      { message: \"Couldn't load customers\" },\r\n      { status: 500 },\r\n    );\r\n  }\r\n}\r\n\r\nconst postHandler: APIRoute = async (context: APIContext) => {\r\n  const { DB } = (context.locals as any).runtime.env;\r\n\r\n  // Authenticate request\r\n  const authResult = await authenticate(context);\r\n  if (authResult instanceof Response) return authResult;\r\n\r\n  // Authorize request\r\n  const authzMiddleware = authorize(PERMISSIONS.CREATE, 'customers');\r\n  const authzResult = await authzMiddleware(authResult);\r\n  if (authzResult instanceof Response) return authzResult;\r\n\r\n  try {\r\n    // Parse and validate request body with Zod\r\n    const body = await context.request.json();\r\n    const validation = validateRequest(CreateCustomerRequest, body);\r\n    \r\n    if (!validation.success) {\r\n      return Response.json(\r\n        {\r\n          success: false,\r\n          message: \"Validation failed\",\r\n          errors: validation.errors,\r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const customerService = new CustomerService(DB);\r\n    const success = await customerService.create(validation.data);\r\n\r\n    if (success) {\r\n      return Response.json(\r\n        {\r\n          success: true,\r\n          message: \"Customer created successfully\",\r\n          data: { customer_id: success }\r\n        },\r\n        { status: 201 },\r\n      );\r\n    } else {\r\n      return Response.json(\r\n        {\r\n          success: false,\r\n          message: \"Failed to create customer\",\r\n          errors: [\"Database operation failed\"]\r\n        },\r\n        { status: 500 },\r\n      );\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Customer creation error:\", error);\r\n    return Response.json(\r\n      {\r\n        success: false,\r\n        message: \"Failed to create customer\",\r\n        errors: [error instanceof Error ? error.message : \"Unknown error\"],\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n};\r\n\r\nexport const GET = withPerformanceMonitoring(getHandler, 'customers:list');\r\nexport const POST = withPerformanceMonitoring(postHandler, 'customers:create');\r\n"],"names":[],"mappings":"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"}