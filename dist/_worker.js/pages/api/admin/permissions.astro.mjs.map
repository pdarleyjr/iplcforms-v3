{"version":3,"file":"permissions.astro.mjs","sources":["../../../../../src/pages/api/admin/permissions.ts"],"sourcesContent":["import type { APIRoute } from 'astro';\r\nimport { authenticate, requireAdmin } from '@/lib/middleware/rbac-middleware';\r\nimport { ROLES, RESOURCES, PERMISSIONS } from '@/lib/utils/rbac';\r\n\r\nexport const GET: APIRoute = async (context) => {\r\n  // Authenticate and check admin role\r\n  const authResult = await authenticate(context);\r\n  if (authResult instanceof Response) {\r\n    return authResult;\r\n  }\r\n\r\n  const adminCheck = await requireAdmin(context);\r\n  if (adminCheck instanceof Response) {\r\n    return adminCheck;\r\n  }\r\n\r\n  const env = (context.locals as any).runtime.env;\r\n  const db = env.DB;\r\n\r\n  try {\r\n    // Fetch all permissions from database\r\n    const results = await db.prepare(\r\n      'SELECT role, permission, resource FROM clinical_permissions ORDER BY role, resource, permission'\r\n    ).all();\r\n\r\n    const permissions = results.results as unknown as Array<{\r\n      role: string;\r\n      permission: string;\r\n      resource: string;\r\n    }>;\r\n\r\n    // Return structured permission matrix data\r\n    return new Response(JSON.stringify({\r\n      permissions,\r\n      roles: Object.values(ROLES),\r\n      resources: Object.values(RESOURCES),\r\n      actions: Object.values(PERMISSIONS),\r\n    }), {\r\n      status: 200,\r\n      headers: { 'Content-Type': 'application/json' },\r\n    });\r\n  } catch (error) {\r\n    console.error('Error fetching permissions:', error);\r\n    return new Response(JSON.stringify({ error: 'Failed to fetch permissions' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' },\r\n    });\r\n  }\r\n};\r\n\r\nexport const PUT: APIRoute = async (context) => {\r\n  // Authenticate and check admin role\r\n  const authResult = await authenticate(context);\r\n  if (authResult instanceof Response) {\r\n    return authResult;\r\n  }\r\n\r\n  const adminCheck = await requireAdmin(context);\r\n  if (adminCheck instanceof Response) {\r\n    return adminCheck;\r\n  }\r\n\r\n  // Validate request body\r\n  let body: any;\r\n  try {\r\n    body = await context.request.json();\r\n  } catch (error) {\r\n    return new Response(JSON.stringify({ error: 'Invalid JSON' }), {\r\n      status: 400,\r\n      headers: { 'Content-Type': 'application/json' },\r\n    });\r\n  }\r\n\r\n  if (!body.permissions || !Array.isArray(body.permissions)) {\r\n    return new Response(JSON.stringify({ error: 'Invalid permissions format' }), {\r\n      status: 400,\r\n      headers: { 'Content-Type': 'application/json' },\r\n    });\r\n  }\r\n\r\n  const env = (context.locals as any).runtime.env;\r\n  const db = env.DB;\r\n\r\n  try {\r\n    // Start a transaction-like operation by batching updates\r\n    const statements = [];\r\n\r\n    for (const perm of body.permissions) {\r\n      const { role, permission, resource, granted } = perm;\r\n\r\n      // Validate inputs\r\n      const validRoles = Object.values(ROLES);\r\n      const validPermissions = Object.values(PERMISSIONS);\r\n      const validResources = Object.values(RESOURCES);\r\n      \r\n      if (!validRoles.includes(role) || !validPermissions.includes(permission) || !validResources.includes(resource)) {\r\n        return new Response(JSON.stringify({\r\n          error: 'Invalid permission data',\r\n          details: { role, permission, resource }\r\n        }), {\r\n          status: 400,\r\n          headers: { 'Content-Type': 'application/json' },\r\n        });\r\n      }\r\n\r\n      if (granted) {\r\n        // Insert or update permission\r\n        statements.push(\r\n          db.prepare(\r\n            `INSERT INTO clinical_permissions (role, permission, resource) \r\n             VALUES (?, ?, ?)\r\n             ON CONFLICT(role, permission, resource) DO NOTHING`\r\n          ).bind(role, permission, resource)\r\n        );\r\n      } else {\r\n        // Delete permission\r\n        statements.push(\r\n          db.prepare(\r\n            'DELETE FROM clinical_permissions WHERE role = ? AND permission = ? AND resource = ?'\r\n          ).bind(role, permission, resource)\r\n        );\r\n      }\r\n    }\r\n\r\n    // Execute all statements\r\n    await db.batch(statements);\r\n\r\n    // Clear RBAC cache\r\n    const rbac = (context.locals as any).rbac;\r\n    if (rbac && rbac.clearCache) {\r\n      rbac.clearCache();\r\n    }\r\n\r\n    return new Response(JSON.stringify({ \r\n      success: true, \r\n      message: 'Permissions updated successfully',\r\n      count: body.permissions.length\r\n    }), {\r\n      status: 200,\r\n      headers: { 'Content-Type': 'application/json' },\r\n    });\r\n  } catch (error) {\r\n    console.error('Error updating permissions:', error);\r\n    return new Response(JSON.stringify({ error: 'Failed to update permissions' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' },\r\n    });\r\n  }\r\n};"],"names":[],"mappings":";;;;;AAIO,MAAM,GAAA,GAAgB,OAAO,OAAA,KAAY;AAE9C,EAAA,MAAM,UAAA,GAAa,MAAM,YAAA,CAAa,OAAO,CAAA;AAC7C,EAAA,IAAI,sBAAsB,QAAA,EAAU;AAClC,IAAA,OAAO,UAAA;AAAA,EACT;AAEA,EAAA,MAAM,UAAA,GAAa,MAAM,YAAA,CAAa,OAAO,CAAA;AAC7C,EAAA,IAAI,sBAAsB,QAAA,EAAU;AAClC,IAAA,OAAO,UAAA;AAAA,EACT;AAEA,EAAA,MAAM,GAAA,GAAO,OAAA,CAAQ,MAAA,CAAe,OAAA,CAAQ,GAAA;AAC5C,EAAA,MAAM,KAAK,GAAA,CAAI,EAAA;AAEf,EAAA,IAAI;AAEF,IAAA,MAAM,OAAA,GAAU,MAAM,EAAA,CAAG,OAAA;AAAA,MACvB;AAAA,MACA,GAAA,EAAI;AAEN,IAAA,MAAM,cAAc,OAAA,CAAQ,OAAA;AAO5B,IAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,MACjC,WAAA;AAAA,MACA,KAAA,EAAO,MAAA,CAAO,MAAA,CAAO,KAAK,CAAA;AAAA,MAC1B,SAAA,EAAW,MAAA,CAAO,MAAA,CAAO,SAAS,CAAA;AAAA,MAClC,OAAA,EAAS,MAAA,CAAO,MAAA,CAAO,WAAW;AAAA,KACnC,CAAA,EAAG;AAAA,MACF,MAAA,EAAQ,GAAA;AAAA,MACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,KAC/C,CAAA;AAAA,EACH,SAAS,KAAA,EAAO;AACd,IAAA,OAAA,CAAQ,KAAA,CAAM,+BAA+B,KAAK,CAAA;AAClD,IAAA,OAAO,IAAI,SAAS,IAAA,CAAK,SAAA,CAAU,EAAE,KAAA,EAAO,6BAAA,EAA+B,CAAA,EAAG;AAAA,MAC5E,MAAA,EAAQ,GAAA;AAAA,MACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,KAC/C,CAAA;AAAA,EACH;AACF,CAAA;AAEO,MAAM,GAAA,GAAgB,OAAO,OAAA,KAAY;AAE9C,EAAA,MAAM,UAAA,GAAa,MAAM,YAAA,CAAa,OAAO,CAAA;AAC7C,EAAA,IAAI,sBAAsB,QAAA,EAAU;AAClC,IAAA,OAAO,UAAA;AAAA,EACT;AAEA,EAAA,MAAM,UAAA,GAAa,MAAM,YAAA,CAAa,OAAO,CAAA;AAC7C,EAAA,IAAI,sBAAsB,QAAA,EAAU;AAClC,IAAA,OAAO,UAAA;AAAA,EACT;AAGA,EAAA,IAAI,IAAA;AACJ,EAAA,IAAI;AACF,IAAA,IAAA,GAAO,MAAM,OAAA,CAAQ,OAAA,CAAQ,IAAA,EAAK;AAAA,EACpC,SAAS,KAAA,EAAO;AACd,IAAA,OAAO,IAAI,SAAS,IAAA,CAAK,SAAA,CAAU,EAAE,KAAA,EAAO,cAAA,EAAgB,CAAA,EAAG;AAAA,MAC7D,MAAA,EAAQ,GAAA;AAAA,MACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,KAC/C,CAAA;AAAA,EACH;AAEA,EAAA,IAAI,CAAC,KAAK,WAAA,IAAe,CAAC,MAAM,OAAA,CAAQ,IAAA,CAAK,WAAW,CAAA,EAAG;AACzD,IAAA,OAAO,IAAI,SAAS,IAAA,CAAK,SAAA,CAAU,EAAE,KAAA,EAAO,4BAAA,EAA8B,CAAA,EAAG;AAAA,MAC3E,MAAA,EAAQ,GAAA;AAAA,MACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,KAC/C,CAAA;AAAA,EACH;AAEA,EAAA,MAAM,GAAA,GAAO,OAAA,CAAQ,MAAA,CAAe,OAAA,CAAQ,GAAA;AAC5C,EAAA,MAAM,KAAK,GAAA,CAAI,EAAA;AAEf,EAAA,IAAI;AAEF,IAAA,MAAM,aAAa,EAAC;AAEpB,IAAA,KAAA,MAAW,IAAA,IAAQ,KAAK,WAAA,EAAa;AACnC,MAAA,MAAM,EAAE,IAAA,EAAM,UAAA,EAAY,QAAA,EAAU,SAAQ,GAAI,IAAA;AAGhD,MAAA,MAAM,UAAA,GAAa,MAAA,CAAO,MAAA,CAAO,KAAK,CAAA;AACtC,MAAA,MAAM,gBAAA,GAAmB,MAAA,CAAO,MAAA,CAAO,WAAW,CAAA;AAClD,MAAA,MAAM,cAAA,GAAiB,MAAA,CAAO,MAAA,CAAO,SAAS,CAAA;AAE9C,MAAA,IAAI,CAAC,UAAA,CAAW,QAAA,CAAS,IAAI,KAAK,CAAC,gBAAA,CAAiB,QAAA,CAAS,UAAU,CAAA,IAAK,CAAC,cAAA,CAAe,QAAA,CAAS,QAAQ,CAAA,EAAG;AAC9G,QAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,UACjC,KAAA,EAAO,yBAAA;AAAA,UACP,OAAA,EAAS,EAAE,IAAA,EAAM,UAAA,EAAY,QAAA;AAAS,SACvC,CAAA,EAAG;AAAA,UACF,MAAA,EAAQ,GAAA;AAAA,UACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,SAC/C,CAAA;AAAA,MACH;AAEA,MAAA,IAAI,OAAA,EAAS;AAEX,QAAA,UAAA,CAAW,IAAA;AAAA,UACT,EAAA,CAAG,OAAA;AAAA,YACD,CAAA;AAAA;AAAA,+DAAA;AAAA,WAGF,CAAE,IAAA,CAAK,IAAA,EAAM,UAAA,EAAY,QAAQ;AAAA,SACnC;AAAA,MACF,CAAA,MAAO;AAEL,QAAA,UAAA,CAAW,IAAA;AAAA,UACT,EAAA,CAAG,OAAA;AAAA,YACD;AAAA,WACF,CAAE,IAAA,CAAK,IAAA,EAAM,UAAA,EAAY,QAAQ;AAAA,SACnC;AAAA,MACF;AAAA,IACF;AAGA,IAAA,MAAM,EAAA,CAAG,MAAM,UAAU,CAAA;AAGzB,IAAA,MAAM,IAAA,GAAQ,QAAQ,MAAA,CAAe,IAAA;AACrC,IAAA,IAAI,IAAA,IAAQ,KAAK,UAAA,EAAY;AAC3B,MAAA,IAAA,CAAK,UAAA,EAAW;AAAA,IAClB;AAEA,IAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,MACjC,OAAA,EAAS,IAAA;AAAA,MACT,OAAA,EAAS,kCAAA;AAAA,MACT,KAAA,EAAO,KAAK,WAAA,CAAY;AAAA,KACzB,CAAA,EAAG;AAAA,MACF,MAAA,EAAQ,GAAA;AAAA,MACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,KAC/C,CAAA;AAAA,EACH,SAAS,KAAA,EAAO;AACd,IAAA,OAAA,CAAQ,KAAA,CAAM,+BAA+B,KAAK,CAAA;AAClD,IAAA,OAAO,IAAI,SAAS,IAAA,CAAK,SAAA,CAAU,EAAE,KAAA,EAAO,8BAAA,EAAgC,CAAA,EAAG;AAAA,MAC7E,MAAA,EAAQ,GAAA;AAAA,MACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,KAC/C,CAAA;AAAA,EACH;AACF,CAAA;;;;;;;;;;;;"}