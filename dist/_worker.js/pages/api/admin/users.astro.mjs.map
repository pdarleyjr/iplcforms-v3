{"version":3,"file":"users.astro.mjs","sources":["../../../../../src/pages/api/admin/users.ts"],"sourcesContent":["import type { APIRoute } from 'astro';\r\nimport type { D1Database } from '@cloudflare/workers-types';\r\nimport { authenticate, requireAdmin } from '../../../lib/middleware/rbac-middleware';\r\nimport type { AuthenticatedContext } from '../../../lib/middleware/rbac-middleware';\r\n\r\nexport const GET: APIRoute = async (context) => {\r\n  // Authenticate and check admin role\r\n  const authResult = await authenticate(context);\r\n  if (authResult instanceof Response) {\r\n    return authResult;\r\n  }\r\n\r\n  const adminCheck = await requireAdmin(context);\r\n  if (adminCheck instanceof Response) {\r\n    return adminCheck;\r\n  }\r\n\r\n  const { locals } = context;\r\n  const env = (locals as any).runtime.env;\r\n  const db: D1Database = env.DB;\r\n\r\n  try {\r\n    // Get query parameters\r\n    const url = new URL(context.request.url);\r\n    const search = url.searchParams.get('search') || '';\r\n    const role = url.searchParams.get('role') || '';\r\n    const page = parseInt(url.searchParams.get('page') || '1');\r\n    const limit = parseInt(url.searchParams.get('limit') || '10');\r\n    const offset = (page - 1) * limit;\r\n\r\n    // Build query\r\n    let query = `\r\n      SELECT \r\n        id,\r\n        email,\r\n        stripe_customer_id,\r\n        role,\r\n        license_number,\r\n        organization,\r\n        status,\r\n        subscription_status,\r\n        last_login_at,\r\n        created_at,\r\n        updated_at\r\n      FROM customers\r\n      WHERE 1=1\r\n    `;\r\n    \r\n    const params: any[] = [];\r\n    \r\n    if (search) {\r\n      query += ` AND (email LIKE ? OR organization LIKE ?)`;\r\n      params.push(`%${search}%`, `%${search}%`);\r\n    }\r\n    \r\n    if (role) {\r\n      query += ` AND role = ?`;\r\n      params.push(role);\r\n    }\r\n    \r\n    // Get total count\r\n    const countQuery = query.replace(\r\n      'SELECT id, email, stripe_customer_id, role, license_number, organization, status, subscription_status, last_login_at, created_at, updated_at',\r\n      'SELECT COUNT(*) as total'\r\n    );\r\n    \r\n    const countResult = await db.prepare(countQuery).bind(...params).first() as { total: number } | null;\r\n    const total = countResult?.total || 0;\r\n    \r\n    // Add pagination\r\n    query += ` ORDER BY created_at DESC LIMIT ? OFFSET ?`;\r\n    params.push(limit, offset);\r\n    \r\n    // Execute query\r\n    const results = await db.prepare(query).bind(...params).all();\r\n    const users = results.results || [];\r\n\r\n    return new Response(JSON.stringify({\r\n      users,\r\n      pagination: {\r\n        page,\r\n        limit,\r\n        total,\r\n        pages: Math.ceil(total / limit)\r\n      }\r\n    }), {\r\n      status: 200,\r\n      headers: { 'Content-Type': 'application/json' },\r\n    });\r\n  } catch (error) {\r\n    console.error('Error fetching users:', error);\r\n    return new Response(JSON.stringify({ error: 'Internal server error' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' },\r\n    });\r\n  }\r\n};"],"names":[],"mappings":"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"}