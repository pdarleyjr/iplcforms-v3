{"version":3,"file":"role.astro.mjs","sources":["../../../../../../../src/pages/api/admin/users/[id]/role.ts"],"sourcesContent":["import type { APIRoute } from 'astro';\r\nimport { authenticate, requireAdmin } from '@/lib/middleware/rbac-middleware';\r\nimport { z } from 'zod';\r\n\r\nconst updateRoleSchema = z.object({\r\n  role: z.enum(['patient', 'clinician', 'admin', 'researcher']),\r\n});\r\n\r\nexport const PUT: APIRoute = async (context) => {\r\n  // Authenticate and check admin role\r\n  const authResult = await authenticate(context);\r\n  if (authResult instanceof Response) {\r\n    return authResult;\r\n  }\r\n\r\n  const adminCheck = await requireAdmin(context);\r\n  if (adminCheck instanceof Response) {\r\n    return adminCheck;\r\n  }\r\n\r\n  // Get user ID from URL params\r\n  const userId = context.params.id;\r\n  if (!userId) {\r\n    return new Response(JSON.stringify({ error: 'User ID required' }), {\r\n      status: 400,\r\n      headers: { 'Content-Type': 'application/json' },\r\n    });\r\n  }\r\n\r\n  // Validate request body\r\n  let body: any;\r\n  try {\r\n    body = await context.request.json();\r\n  } catch (error) {\r\n    return new Response(JSON.stringify({ error: 'Invalid JSON' }), {\r\n      status: 400,\r\n      headers: { 'Content-Type': 'application/json' },\r\n    });\r\n  }\r\n\r\n  const validation = updateRoleSchema.safeParse(body);\r\n  if (!validation.success) {\r\n    return new Response(JSON.stringify({ error: 'Invalid role', details: validation.error.flatten() }), {\r\n      status: 400,\r\n      headers: { 'Content-Type': 'application/json' },\r\n    });\r\n  }\r\n\r\n  const { role } = validation.data;\r\n  const env = (context.locals as any).runtime.env;\r\n  const db = env.DB;\r\n\r\n  try {\r\n    // Check if user exists\r\n    const userResult = await db.prepare('SELECT id FROM customers WHERE id = ?').bind(userId).first();\r\n    if (!userResult) {\r\n      return new Response(JSON.stringify({ error: 'User not found' }), {\r\n        status: 404,\r\n        headers: { 'Content-Type': 'application/json' },\r\n      });\r\n    }\r\n\r\n    // Update user role\r\n    await db.prepare(\r\n      'UPDATE customers SET role = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?'\r\n    ).bind(role, userId).run();\r\n\r\n    // Clear any cached permissions for this user\r\n    const rbac = (context.locals as any).rbac;\r\n    if (rbac && rbac.clearUserCache) {\r\n      rbac.clearUserCache(userId);\r\n    }\r\n\r\n    // Return success response\r\n    return new Response(JSON.stringify({ \r\n      success: true, \r\n      message: 'Role updated successfully',\r\n      role \r\n    }), {\r\n      status: 200,\r\n      headers: { 'Content-Type': 'application/json' },\r\n    });\r\n  } catch (error) {\r\n    console.error('Error updating user role:', error);\r\n    return new Response(JSON.stringify({ error: 'Failed to update role' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' },\r\n    });\r\n  }\r\n};"],"names":["z.object","z.enum"],"mappings":"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"}