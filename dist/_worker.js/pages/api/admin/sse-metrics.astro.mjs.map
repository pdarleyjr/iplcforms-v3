{"version":3,"file":"sse-metrics.astro.mjs","sources":["../../../../../src/lib/utils/sse-performance.ts","../../../../../src/pages/api/admin/sse-metrics.ts"],"sourcesContent":["/**\n * SSE Performance Monitoring Utility\n * Tracks streaming performance metrics and provides optimization insights\n */\n\ninterface SSEMetrics {\n  connectionId: string;\n  startTime: number;\n  endTime?: number;\n  bytesTransferred: number;\n  chunksTransferred: number;\n  errors: number;\n  pingsSent: number;\n  averageChunkSize: number;\n  peakChunkSize: number;\n  totalDuration?: number;\n  throughput?: number; // bytes per second\n}\n\nexport class SSEPerformanceMonitor {\n  private metrics: Map<string, SSEMetrics> = new Map();\n  private kv?: KVNamespace;\n\n  constructor(kv?: KVNamespace) {\n    this.kv = kv;\n  }\n\n  /**\n   * Start monitoring a new SSE connection\n   */\n  startConnection(connectionId: string): void {\n    this.metrics.set(connectionId, {\n      connectionId,\n      startTime: Date.now(),\n      bytesTransferred: 0,\n      chunksTransferred: 0,\n      errors: 0,\n      pingsSent: 0,\n      averageChunkSize: 0,\n      peakChunkSize: 0\n    });\n  }\n\n  /**\n   * Record a data chunk being sent\n   */\n  recordChunk(connectionId: string, chunkSize: number): void {\n    const metric = this.metrics.get(connectionId);\n    if (!metric) return;\n\n    metric.bytesTransferred += chunkSize;\n    metric.chunksTransferred++;\n    metric.peakChunkSize = Math.max(metric.peakChunkSize, chunkSize);\n    metric.averageChunkSize = metric.bytesTransferred / metric.chunksTransferred;\n  }\n\n  /**\n   * Record a ping being sent\n   */\n  recordPing(connectionId: string): void {\n    const metric = this.metrics.get(connectionId);\n    if (metric) {\n      metric.pingsSent++;\n    }\n  }\n\n  /**\n   * Record an error\n   */\n  recordError(connectionId: string): void {\n    const metric = this.metrics.get(connectionId);\n    if (metric) {\n      metric.errors++;\n    }\n  }\n\n  /**\n   * End monitoring and calculate final metrics\n   */\n  async endConnection(connectionId: string): Promise<SSEMetrics | null> {\n    const metric = this.metrics.get(connectionId);\n    if (!metric) return null;\n\n    metric.endTime = Date.now();\n    metric.totalDuration = metric.endTime - metric.startTime;\n    metric.throughput = metric.totalDuration > 0 \n      ? (metric.bytesTransferred / metric.totalDuration) * 1000 \n      : 0;\n\n    // Store metrics in KV for analysis\n    if (this.kv) {\n      try {\n        await this.kv.put(\n          `sse_metrics:${connectionId}`,\n          JSON.stringify(metric),\n          { expirationTtl: 86400 } // Keep for 24 hours\n        );\n\n        // Update aggregate metrics\n        await this.updateAggregateMetrics(metric);\n      } catch (error) {\n        console.error('Failed to store SSE metrics:', error);\n      }\n    }\n\n    this.metrics.delete(connectionId);\n    return metric;\n  }\n\n  /**\n   * Update aggregate performance metrics\n   */\n  private async updateAggregateMetrics(metric: SSEMetrics): Promise<void> {\n    if (!this.kv) return;\n\n    try {\n      const aggregateKey = 'sse_metrics:aggregate';\n      const existing = await this.kv.get(aggregateKey, { type: 'json' }) as any || {\n        totalConnections: 0,\n        totalBytes: 0,\n        totalDuration: 0,\n        totalErrors: 0,\n        averageThroughput: 0,\n        averageDuration: 0,\n        peakThroughput: 0\n      };\n\n      existing.totalConnections++;\n      existing.totalBytes += metric.bytesTransferred;\n      existing.totalDuration += metric.totalDuration || 0;\n      existing.totalErrors += metric.errors;\n      existing.averageThroughput = \n        (existing.averageThroughput * (existing.totalConnections - 1) + (metric.throughput || 0)) / \n        existing.totalConnections;\n      existing.averageDuration = existing.totalDuration / existing.totalConnections;\n      existing.peakThroughput = Math.max(existing.peakThroughput, metric.throughput || 0);\n\n      await this.kv.put(aggregateKey, JSON.stringify(existing));\n    } catch (error) {\n      console.error('Failed to update aggregate metrics:', error);\n    }\n  }\n\n  /**\n   * Get performance recommendations based on metrics\n   */\n  async getPerformanceRecommendations(): Promise<string[]> {\n    if (!this.kv) return [];\n\n    try {\n      const aggregate = await this.kv.get('sse_metrics:aggregate', { type: 'json' }) as any;\n      if (!aggregate) return [];\n\n      const recommendations: string[] = [];\n\n      // Check average throughput\n      if (aggregate.averageThroughput < 1000) { // Less than 1KB/s\n        recommendations.push('Consider increasing buffer size for better throughput');\n      }\n\n      // Check error rate\n      if (aggregate.totalErrors / aggregate.totalConnections > 0.05) { // More than 5% error rate\n        recommendations.push('High error rate detected. Check network stability and error handling');\n      }\n\n      // Check average duration\n      if (aggregate.averageDuration > 300000) { // More than 5 minutes\n        recommendations.push('Long connection durations detected. Consider implementing connection recycling');\n      }\n\n      return recommendations;\n    } catch (error) {\n      console.error('Failed to get recommendations:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Get current active connections count\n   */\n  getActiveConnections(): number {\n    return this.metrics.size;\n  }\n\n  /**\n   * Get metrics for a specific connection\n   */\n  getConnectionMetrics(connectionId: string): SSEMetrics | undefined {\n    return this.metrics.get(connectionId);\n  }\n}\n\n// Singleton instance\nlet instance: SSEPerformanceMonitor | null = null;\n\nexport function getSSEPerformanceMonitor(kv?: KVNamespace): SSEPerformanceMonitor {\n  if (!instance) {\n    instance = new SSEPerformanceMonitor(kv);\n  }\n  return instance;\n}","import type { APIRoute } from 'astro';\r\nimport { getSSEPerformanceMonitor } from '../../../lib/utils/sse-performance';\r\n\r\nexport const GET: APIRoute = async ({ locals }) => {\r\n  const env = locals.runtime.env;\r\n  \r\n  try {\r\n    // Check authentication\r\n    const user = (locals as any).user;\r\n    if (!user || user.role !== 'admin') {\r\n      return new Response(JSON.stringify({ error: 'Unauthorized' }), {\r\n        status: 401,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    const monitor = getSSEPerformanceMonitor(env.CACHE_KV);\r\n    \r\n    // Get aggregate metrics\r\n    const aggregateData = await env.CACHE_KV?.get('sse_metrics:aggregate', { type: 'json' }) || {\r\n      totalConnections: 0,\r\n      totalBytes: 0,\r\n      totalDuration: 0,\r\n      totalErrors: 0,\r\n      averageThroughput: 0,\r\n      averageDuration: 0,\r\n      peakThroughput: 0\r\n    };\r\n\r\n    // Get recent connection metrics (last 24 hours)\r\n    const recentMetrics = [];\r\n    const metricsKeys = await env.CACHE_KV?.list({ prefix: 'sse_metrics:', limit: 100 });\r\n    \r\n    if (metricsKeys) {\r\n      for (const key of metricsKeys.keys) {\r\n        if (key.name !== 'sse_metrics:aggregate') {\r\n          const metric = await env.CACHE_KV.get(key.name, { type: 'json' });\r\n          if (metric) {\r\n            recentMetrics.push(metric);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Sort by start time (most recent first)\r\n    recentMetrics.sort((a: any, b: any) => b.startTime - a.startTime);\r\n\r\n    // Get performance recommendations\r\n    const recommendations = await monitor.getPerformanceRecommendations();\r\n\r\n    // Calculate additional insights\r\n    const insights = {\r\n      activeConnections: monitor.getActiveConnections(),\r\n      averageChunkSize: (aggregateData as any).totalBytes / Math.max(1, (aggregateData as any).totalConnections),\r\n      errorRate: (aggregateData as any).totalConnections > 0\r\n        ? ((aggregateData as any).totalErrors / (aggregateData as any).totalConnections * 100).toFixed(2) + '%'\r\n        : '0%',\r\n      uptimeHours: 24, // Metrics are kept for 24 hours\r\n    };\r\n\r\n    return new Response(JSON.stringify({\r\n      aggregate: aggregateData,\r\n      recent: recentMetrics.slice(0, 20), // Return last 20 connections\r\n      insights,\r\n      recommendations\r\n    }), {\r\n      status: 200,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('SSE metrics error:', error);\r\n    return new Response(JSON.stringify({ \r\n      error: 'Failed to retrieve SSE metrics',\r\n      details: error instanceof Error ? error.message : 'Unknown error'\r\n    }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n};"],"names":[],"mappings":"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"}