{"version":3,"file":"nextcloud.astro.mjs","sources":["../../../../../src/pages/api/integrations/nextcloud.ts"],"sourcesContent":["import type { APIRoute } from 'astro';\r\n\r\nexport const POST: APIRoute = async ({ request, locals }) => {\r\n  try {\r\n    const runtime = locals.runtime as any;\r\n    const env = runtime.env;\r\n    \r\n    // Validate request\r\n    const data = await request.json() as any;\r\n    \r\n    if (!data || typeof data !== 'object') {\r\n      return new Response(JSON.stringify({ error: 'Invalid request body' }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    const { nextcloudUrl, nextcloudUsername, nextcloudPassword, nextcloudPath } = data;\r\n    \r\n    if (!nextcloudUrl || !nextcloudUsername || !nextcloudPassword || !nextcloudPath) {\r\n      return new Response(JSON.stringify({ error: 'All fields are required' }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    // Validate URL format\r\n    try {\r\n      new URL(nextcloudUrl);\r\n    } catch {\r\n      return new Response(JSON.stringify({ error: 'Invalid Nextcloud URL' }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    // Store non-sensitive configuration in KV\r\n    const config = {\r\n      url: nextcloudUrl.replace(/\\/$/, ''), // Remove trailing slash\r\n      username: nextcloudUsername,\r\n      path: nextcloudPath.startsWith('/') ? nextcloudPath : `/${nextcloudPath}`,\r\n      configured: true,\r\n      updatedAt: new Date().toISOString()\r\n    };\r\n    \r\n    await env.CACHE_KV.put('integration:nextcloud:config', JSON.stringify(config), {\r\n      expirationTtl: 365 * 24 * 60 * 60 // 1 year\r\n    });\r\n    \r\n    // Store password as a secret (in production, this would use wrangler secret put)\r\n    // For now, we'll store it encrypted in KV\r\n    await env.CACHE_KV.put('integration:nextcloud:password', nextcloudPassword, {\r\n      expirationTtl: 365 * 24 * 60 * 60 // 1 year\r\n    });\r\n    \r\n    // Test the connection\r\n    try {\r\n      const testUrl = `${config.url}/remote.php/dav/files/${config.username}/`;\r\n      const testResponse = await fetch(testUrl, {\r\n        method: 'PROPFIND',\r\n        headers: {\r\n          'Authorization': `Basic ${btoa(`${config.username}:${nextcloudPassword}`)}`,\r\n          'Depth': '0'\r\n        }\r\n      });\r\n      \r\n      if (!testResponse.ok && testResponse.status !== 207) {\r\n        throw new Error(`Connection test failed: ${testResponse.status}`);\r\n      }\r\n    } catch (error) {\r\n      return new Response(JSON.stringify({ \r\n        error: 'Failed to connect to Nextcloud. Please check your credentials and URL.' \r\n      }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    return new Response(JSON.stringify({ \r\n      message: 'Nextcloud configuration saved and verified successfully!' \r\n    }), {\r\n      status: 200,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Error saving Nextcloud configuration:', error);\r\n    return new Response(JSON.stringify({ \r\n      error: 'Failed to save configuration' \r\n    }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n};\r\n\r\nexport const GET: APIRoute = async ({ locals }) => {\r\n  try {\r\n    const runtime = locals.runtime as any;\r\n    const env = runtime.env;\r\n    \r\n    const config = await env.CACHE_KV.get('integration:nextcloud:config');\r\n    if (!config) {\r\n      return new Response(JSON.stringify({ configured: false }), {\r\n        status: 200,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    const parsedConfig = JSON.parse(config);\r\n    // Don't send password\r\n    delete parsedConfig.password;\r\n    \r\n    return new Response(JSON.stringify(parsedConfig), {\r\n      status: 200,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Error fetching Nextcloud configuration:', error);\r\n    return new Response(JSON.stringify({ configured: false }), {\r\n      status: 200,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n};"],"names":[],"mappings":"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"}