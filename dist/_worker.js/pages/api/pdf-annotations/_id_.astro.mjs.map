{"version":3,"file":"_id_.astro.mjs","sources":["../../../../../src/pages/api/pdf-annotations/[id].ts"],"sourcesContent":["import type { APIRoute } from 'astro';\r\nimport { getD1Manager } from '../../../lib/services/d1-connection-manager';\r\n\r\nexport const GET: APIRoute = async ({ params, locals }) => {\r\n  try {\r\n    // @ts-ignore - Cloudflare runtime types\r\n    const db = (locals as any).runtime?.env?.DB;\r\n    if (!db) {\r\n      return new Response(JSON.stringify({ error: 'Database not available' }), {\r\n        status: 503,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    const d1Manager = getD1Manager(db);\r\n    const { id } = params;\r\n    \r\n    if (!id) {\r\n      return new Response(JSON.stringify({ error: 'Missing annotation ID' }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    // Try to get from cache first\r\n    const cacheKey = `pdf-annotation-${id}`;\r\n    const cached = d1Manager.getCachedData(cacheKey);\r\n    if (cached) {\r\n      return new Response(JSON.stringify(cached), {\r\n        status: 200,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    // Query database\r\n    const stmt = d1Manager.prepare('SELECT * FROM pdf_annotations WHERE pdf_id = ?');\r\n    const result = await stmt.bind(id).first();\r\n    \r\n    if (!result) {\r\n      return new Response(JSON.stringify({ error: 'Annotations not found' }), {\r\n        status: 404,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    // Parse JSON data\r\n    const annotations = {\r\n      ...result,\r\n      data: result.data ? d1Manager.parseJSON(result.data as string) : null\r\n    };\r\n    \r\n    // Cache the result\r\n    d1Manager.cacheData(cacheKey, annotations);\r\n    \r\n    return new Response(JSON.stringify({ annotations }), {\r\n      status: 200,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  } catch (error) {\r\n    console.error('Error fetching annotation:', error);\r\n    return new Response(JSON.stringify({ error: 'Internal server error' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n};\r\n\r\nexport const PUT: APIRoute = async ({ params, request, locals }) => {\r\n  try {\r\n    // @ts-ignore - Cloudflare runtime types\r\n    const db = (locals as any).runtime?.env?.DB;\r\n    if (!db) {\r\n      return new Response(JSON.stringify({ error: 'Database not available' }), {\r\n        status: 503,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    const d1Manager = getD1Manager(db);\r\n    const { id } = params;\r\n    \r\n    if (!id) {\r\n      return new Response(JSON.stringify({ error: 'Missing annotation ID' }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    const body = await request.json() as { annotations?: any[] };\r\n    const { annotations } = body;\r\n    \r\n    if (!annotations) {\r\n      return new Response(JSON.stringify({ error: 'Missing annotations data' }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    // Check if record exists\r\n    const checkStmt = d1Manager.prepare('SELECT id FROM pdf_annotations WHERE pdf_id = ?');\r\n    const existing = await checkStmt.bind(id).first();\r\n    \r\n    if (existing) {\r\n      // Update existing record\r\n      const updateStmt = d1Manager.prepare(`\r\n        UPDATE pdf_annotations \r\n        SET data = ?, updated_at = datetime('now')\r\n        WHERE pdf_id = ?\r\n      `);\r\n      \r\n      const result = await updateStmt.bind(\r\n        JSON.stringify(annotations),\r\n        id\r\n      ).run();\r\n      \r\n      if (!result.success) {\r\n        return new Response(JSON.stringify({ error: 'Failed to update annotations' }), {\r\n          status: 500,\r\n          headers: { 'Content-Type': 'application/json' }\r\n        });\r\n      }\r\n      \r\n      // Clear cache\r\n      d1Manager.clearSpecificCaches([`pdf-annotation-${id}`]);\r\n      \r\n      return new Response(JSON.stringify({ \r\n        success: true,\r\n        message: 'Annotations updated successfully' \r\n      }), {\r\n        status: 200,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    } else {\r\n      // Create new record\r\n      const insertStmt = d1Manager.prepare(`\r\n        INSERT INTO pdf_annotations (id, pdf_id, data, created_at)\r\n        VALUES (?, ?, ?, datetime('now'))\r\n      `);\r\n      \r\n      const newId = `pdf-ann-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\r\n      const result = await insertStmt.bind(\r\n        newId,\r\n        id,\r\n        JSON.stringify(annotations)\r\n      ).run();\r\n      \r\n      if (!result.success) {\r\n        return new Response(JSON.stringify({ error: 'Failed to save annotations' }), {\r\n          status: 500,\r\n          headers: { 'Content-Type': 'application/json' }\r\n        });\r\n      }\r\n      \r\n      return new Response(JSON.stringify({ \r\n        success: true,\r\n        id: newId,\r\n        message: 'Annotations created successfully' \r\n      }), {\r\n        status: 201,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.error('Error updating annotations:', error);\r\n    return new Response(JSON.stringify({ error: 'Internal server error' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n};\r\n\r\nexport const DELETE: APIRoute = async ({ params, locals }) => {\r\n  try {\r\n    // @ts-ignore - Cloudflare runtime types\r\n    const db = (locals as any).runtime?.env?.DB;\r\n    if (!db) {\r\n      return new Response(JSON.stringify({ error: 'Database not available' }), {\r\n        status: 503,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    const d1Manager = getD1Manager(db);\r\n    const { id } = params;\r\n    \r\n    if (!id) {\r\n      return new Response(JSON.stringify({ error: 'Missing annotation ID' }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    const stmt = d1Manager.prepare('DELETE FROM pdf_annotations WHERE pdf_id = ?');\r\n    const result = await stmt.bind(id).run();\r\n    \r\n    if (!result.success) {\r\n      return new Response(JSON.stringify({ error: 'Failed to delete annotations' }), {\r\n        status: 500,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    if (result.meta.changes === 0) {\r\n      return new Response(JSON.stringify({ error: 'Annotations not found' }), {\r\n        status: 404,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    // Clear cache\r\n    d1Manager.clearSpecificCaches([`pdf-annotation-${id}`]);\r\n    \r\n    return new Response(JSON.stringify({ \r\n      success: true,\r\n      message: 'Annotations deleted successfully' \r\n    }), {\r\n      status: 200,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  } catch (error) {\r\n    console.error('Error deleting annotations:', error);\r\n    return new Response(JSON.stringify({ error: 'Internal server error' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n};"],"names":[],"mappings":"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"}