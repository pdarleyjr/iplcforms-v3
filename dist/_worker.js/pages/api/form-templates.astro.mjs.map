{"version":3,"file":"form-templates.astro.mjs","sources":["../../../../src/pages/api/form-templates.ts"],"sourcesContent":["import type { APIRoute } from 'astro';\r\nimport { FormTemplateService } from '../../lib/services/form_template';\r\nimport { \r\n  FormTemplateSchema, \r\n  UpdateFormTemplateRequest,\r\n  validateQueryParams, \r\n  FormTemplateFiltersSchema,\r\n  type GetTemplatesResponse,\r\n  type FormTemplateFilters\r\n} from '../../lib/schemas/api-validation';\r\nimport { authenticate, authorize, type AuthenticatedContext } from '../../lib/middleware/rbac-middleware';\r\nimport { PERMISSIONS, RESOURCES } from '../../lib/utils/rbac';\r\n\r\nconst getHandler: APIRoute = async (context) => {\r\n  const { locals, request } = context;\r\n  const env = (locals as any)?.runtime?.env;\r\n\r\n  if (!env) {\r\n    return new Response(JSON.stringify({\r\n      error: 'Runtime environment not available'\r\n    }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  // Use authorize middleware which includes authentication\r\n  const authzMiddleware = authorize(PERMISSIONS.READ, RESOURCES.FORM_TEMPLATES);\r\n  const authResult = await authzMiddleware(context);\r\n  \r\n  if (authResult instanceof Response) {\r\n    return authResult;\r\n  }\r\n\r\n  // Now we have authenticated context\r\n  const authenticatedContext = authResult as AuthenticatedContext;\r\n\r\n  try {\r\n    const url = new URL(request.url);\r\n    const params = validateQueryParams(url, FormTemplateFiltersSchema);\r\n\r\n    if (!params.success) {\r\n      return new Response(JSON.stringify({\r\n        error: 'Invalid query parameters',\r\n        details: 'errors' in params ? params.errors : ['Query parameter validation failed'],\r\n        help: {\r\n          valid_categories: ['assessment', 'intake', 'treatment', 'outcome', 'research', 'other'],\r\n          valid_target_audiences: ['adult', 'pediatric', 'geriatric', 'adolescent', 'all_ages'],\r\n          valid_sort_fields: ['name', 'created_at', 'updated_at', 'usage_count', 'completion_time'],\r\n          pagination_limits: 'page >= 1, per_page 1-100'\r\n        }\r\n      }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    const filters = params.data as FormTemplateFilters;\r\n\r\n    // Validate search term length if provided\r\n    if (filters.search && filters.search.length < 3) {\r\n      return new Response(JSON.stringify({\r\n        error: 'Search term must be at least 3 characters long'\r\n      }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    const formTemplateService = new FormTemplateService(env.DB);\r\n    \r\n    // Get templates with pagination using the correct service method\r\n    const templatesResult = await formTemplateService.getTemplateWithTotalCount({\r\n      category: filters.category,\r\n      subcategory: filters.subcategory,\r\n      search: filters.search,\r\n      tags: filters.tags,\r\n      organization: filters.organization,\r\n      target_audience: filters.target_audience,\r\n      max_completion_time: filters.max_completion_time,\r\n      sort_by: filters.sort_by,\r\n      sort_order: filters.sort_order,\r\n      page: filters.page,\r\n      per_page: filters.per_page\r\n    });\r\n\r\n    // Get facets if requested\r\n    let facets = undefined;\r\n    if (filters.include_facets) {\r\n      const facetsData = await formTemplateService.getFacets();\r\n      facets = Object.entries(facetsData).map(([name, values]) => ({\r\n        name,\r\n        values: Array.isArray(values) ? values.map(v => ({\r\n          value: typeof v === 'object' ? v.value : v,\r\n          count: typeof v === 'object' ? v.count : 1,\r\n          label: typeof v === 'object' ? v.value : v\r\n        })) : []\r\n      }));\r\n    }\r\n\r\n    // Calculate aggregations from the templates\r\n    const categoryCounts: Record<string, number> = {};\r\n    const allTags: string[] = [];\r\n    let totalCompletionTime = 0;\r\n    let templatesWithCompletionTime = 0;\r\n\r\n    templatesResult.templates.forEach(template => {\r\n      categoryCounts[template.category] = (categoryCounts[template.category] || 0) + 1;\r\n      \r\n      // Collect tags for most used calculation\r\n      if (template.tags && Array.isArray(template.tags)) {\r\n        allTags.push(...template.tags);\r\n      }\r\n      \r\n      // Calculate average completion time\r\n      if (template.estimated_completion_time) {\r\n        totalCompletionTime += template.estimated_completion_time;\r\n        templatesWithCompletionTime++;\r\n      }\r\n    });\r\n\r\n    // Calculate most used tags\r\n    const tagCounts: Record<string, number> = {};\r\n    allTags.forEach(tag => {\r\n      tagCounts[tag] = (tagCounts[tag] || 0) + 1;\r\n    });\r\n    \r\n    const mostUsedTags = Object.entries(tagCounts)\r\n      .sort(([, a], [, b]) => b - a)\r\n      .slice(0, 10)\r\n      .map(([tag, count]) => ({ tag, count }));\r\n\r\n    const aggregations = {\r\n      total_templates: templatesResult.total_count,\r\n      categories: categoryCounts,\r\n      avg_completion_time: templatesWithCompletionTime > 0\r\n        ? Math.round(totalCompletionTime / templatesWithCompletionTime)\r\n        : undefined,\r\n      most_used_tags: mostUsedTags.length > 0 ? mostUsedTags : undefined\r\n    };\r\n\r\n    // Structure response according to GetTemplatesResponse interface\r\n    const response: GetTemplatesResponse = {\r\n      success: true,\r\n      data: {\r\n        templates: templatesResult.templates,\r\n        pagination: {\r\n          page: templatesResult.page,\r\n          per_page: templatesResult.per_page,\r\n          total: templatesResult.total_count,\r\n          pages: templatesResult.total_pages,\r\n        },\r\n        ...(facets && { facets }),\r\n        aggregations\r\n      },\r\n      message: `Found ${templatesResult.templates.length} form templates`\r\n    };\r\n\r\n    return new Response(JSON.stringify(response), {\r\n      status: 200,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  } catch (error) {\r\n    console.error('Error fetching form templates:', error);\r\n    return new Response(JSON.stringify({\r\n      error: 'Failed to fetch form templates',\r\n      details: error instanceof Error ? error.message : 'Unknown error'\r\n    }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n};\r\n\r\nconst postHandler: APIRoute = async (context) => {\r\n  const { locals, request } = context;\r\n  const env = (locals as any)?.runtime?.env;\r\n\r\n  if (!env) {\r\n    return new Response(JSON.stringify({\r\n      error: 'Runtime environment not available'\r\n    }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  // Use authorize middleware which includes authentication\r\n  const authzMiddleware = authorize(PERMISSIONS.CREATE, RESOURCES.FORM_TEMPLATES);\r\n  const authResult = await authzMiddleware(context);\r\n  \r\n  if (authResult instanceof Response) {\r\n    return authResult;\r\n  }\r\n\r\n  // Now we have authenticated context\r\n  const authenticatedContext = authResult as AuthenticatedContext;\r\n\r\n  try {\r\n    const body = await request.json();\r\n    const validation = FormTemplateSchema.safeParse(body);\r\n\r\n    if (!validation.success) {\r\n      // Provide enhanced error messages for specific validation scenarios\r\n      const enhancedErrors = validation.error.issues.map(issue => {\r\n        const path = issue.path.join('.');\r\n        let enhancedMessage = issue.message;\r\n        \r\n        // Enhanced error messages for new fields\r\n        if (path.includes('tags')) {\r\n          enhancedMessage = `Tags validation failed: ${issue.message}. Tags must be strings, max 50 characters each, and no more than 20 tags total.`;\r\n        } else if (path.includes('clinical_codes')) {\r\n          enhancedMessage = `Clinical codes validation failed: ${issue.message}. Supported types: icd10, snomed, loinc, custom.`;\r\n        } else if (path.includes('target_audience')) {\r\n          enhancedMessage = `Target audience validation failed: ${issue.message}. Valid values: adult, pediatric, geriatric, adolescent, all_ages.`;\r\n        } else if (path.includes('estimated_completion_time')) {\r\n          enhancedMessage = `Completion time validation failed: ${issue.message}. Must be between 1 and 480 minutes (8 hours).`;\r\n        } else if (path.includes('change_log')) {\r\n          enhancedMessage = `Change log validation failed: ${issue.message}. Each entry requires version, date, changes, and changed_by.`;\r\n        } else if (path.includes('collaborators')) {\r\n          enhancedMessage = `Collaborators validation failed: ${issue.message}. Each collaborator requires user_id, role (editor/reviewer/viewer), added_at, and added_by.`;\r\n        } else if (path.includes('usage_stats')) {\r\n          enhancedMessage = `Usage stats validation failed: ${issue.message}. All numeric fields must be non-negative.`;\r\n        } else if (path.includes('schema.components')) {\r\n          enhancedMessage = `Form schema validation failed: ${issue.message}. Each component requires id, type, label, and order.`;\r\n        } else if (path.includes('title_subtitle')) {\r\n          enhancedMessage = `Title/Subtitle component validation failed: ${issue.message}. Check text content, color format (#RRGGBB), and styling options.`;\r\n        } else if (path.includes('line_separator')) {\r\n          enhancedMessage = `Line separator component validation failed: ${issue.message}. Check thickness (1-10), color format (#RRGGBB), and margins (0-100).`;\r\n        }\r\n        \r\n        return {\r\n          field: path,\r\n          message: enhancedMessage,\r\n          received: 'received' in issue ? issue.received : 'unknown'\r\n        };\r\n      });\r\n\r\n      return new Response(JSON.stringify({\r\n        error: 'Form template validation failed',\r\n        details: enhancedErrors,\r\n        help: {\r\n          required_fields: ['name', 'category', 'clinical_context', 'schema'],\r\n          valid_categories: ['assessment', 'intake', 'treatment', 'outcome', 'research', 'other'],\r\n          valid_statuses: ['draft', 'active', 'archived'],\r\n          schema_structure: 'schema.components must be an array of form components'\r\n        }\r\n      }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    const formTemplateService = new FormTemplateService(env.DB);\r\n    const validatedData = validation.data;\r\n\r\n    // Create template with enhanced metadata support\r\n    const result = await formTemplateService.create({\r\n      name: validatedData.name,\r\n      description: validatedData.description,\r\n      category: validatedData.category,\r\n      subcategory: validatedData.subcategory,\r\n      clinical_context: validatedData.clinical_context,\r\n      form_config: validatedData.schema, // Map schema to form_config for backward compatibility\r\n      ui_schema: validatedData.ui_schema,\r\n      scoring_config: validatedData.scoring_config,\r\n      permissions: validatedData.permissions,\r\n      metadata: validatedData.metadata,\r\n      // Enhanced metadata fields\r\n      tags: validatedData.tags,\r\n      clinical_codes: validatedData.clinical_codes,\r\n      target_audience: validatedData.target_audience,\r\n      estimated_completion_time: validatedData.estimated_completion_time,\r\n      change_log: validatedData.change_log,\r\n      collaborators: validatedData.collaborators,\r\n      usage_stats: validatedData.usage_stats,\r\n      status: validatedData.status || 'draft',\r\n      created_by: validatedData.created_by || Number(authenticatedContext.locals.customerId),\r\n      updated_by: validatedData.updated_by || Number(authenticatedContext.locals.customerId),\r\n    });\r\n\r\n    if (!result.success) {\r\n      return new Response(JSON.stringify({\r\n        error: 'Failed to create form template'\r\n      }), {\r\n        status: 500,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    return new Response(JSON.stringify({\r\n      success: true,\r\n      data: { templateId: result.templateId },\r\n      message: 'Form template created successfully'\r\n    }), {\r\n      status: 201,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  } catch (error) {\r\n    console.error('Error creating form template:', error);\r\n    \r\n    // Handle specific database errors\r\n    if (error instanceof Error) {\r\n      if (error.message.includes('UNIQUE constraint failed')) {\r\n        return new Response(JSON.stringify({\r\n          error: 'A form template with this name already exists'\r\n        }), {\r\n          status: 409,\r\n          headers: { 'Content-Type': 'application/json' }\r\n        });\r\n      }\r\n      \r\n      if (error.message.includes('FOREIGN KEY constraint failed')) {\r\n        return new Response(JSON.stringify({\r\n          error: 'Invalid reference to related entity'\r\n        }), {\r\n          status: 400,\r\n          headers: { 'Content-Type': 'application/json' }\r\n        });\r\n      }\r\n    }\r\n\r\n    return new Response(JSON.stringify({\r\n      error: 'Failed to create form template',\r\n      details: error instanceof Error ? error.message : 'Unknown error'\r\n    }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n};\r\n\r\n// PUT handler for updating templates\r\nconst putHandler: APIRoute = async (context) => {\r\n  const { locals, request } = context;\r\n  const env = (locals as any)?.runtime?.env;\r\n\r\n  if (!env) {\r\n    return new Response(JSON.stringify({\r\n      error: 'Runtime environment not available'\r\n    }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  // Use authorize middleware which includes authentication\r\n  const authzMiddleware = authorize(PERMISSIONS.UPDATE, RESOURCES.FORM_TEMPLATES);\r\n  const authResult = await authzMiddleware(context);\r\n  \r\n  if (authResult instanceof Response) {\r\n    return authResult;\r\n  }\r\n\r\n  const authenticatedContext = authResult as AuthenticatedContext;\r\n\r\n  try {\r\n    const url = new URL(request.url);\r\n    const templateId = url.searchParams.get('id');\r\n\r\n    if (!templateId) {\r\n      return new Response(JSON.stringify({\r\n        error: 'Template ID is required'\r\n      }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    const body = await request.json();\r\n    const validation = UpdateFormTemplateRequest.safeParse(body);\r\n\r\n    if (!validation.success) {\r\n      // Provide enhanced error messages for specific validation scenarios\r\n      const enhancedErrors = validation.error.issues.map(issue => {\r\n        const path = issue.path.join('.');\r\n        let enhancedMessage = issue.message;\r\n        \r\n        // Enhanced error messages for new fields\r\n        if (path.includes('tags')) {\r\n          enhancedMessage = `Tags validation failed: ${issue.message}. Tags must be strings, max 50 characters each, and no more than 20 tags total.`;\r\n        } else if (path.includes('clinical_codes')) {\r\n          enhancedMessage = `Clinical codes validation failed: ${issue.message}. Supported types: icd10, snomed, loinc, custom.`;\r\n        } else if (path.includes('target_audience')) {\r\n          enhancedMessage = `Target audience validation failed: ${issue.message}. Valid values: adult, pediatric, geriatric, adolescent, all_ages.`;\r\n        } else if (path.includes('estimated_completion_time')) {\r\n          enhancedMessage = `Completion time validation failed: ${issue.message}. Must be between 1 and 480 minutes (8 hours).`;\r\n        } else if (path.includes('change_log')) {\r\n          enhancedMessage = `Change log validation failed: ${issue.message}. Each entry requires version, date, changes, and changed_by.`;\r\n        } else if (path.includes('collaborators')) {\r\n          enhancedMessage = `Collaborators validation failed: ${issue.message}. Each collaborator requires user_id, role (editor/reviewer/viewer), added_at, and added_by.`;\r\n        } else if (path.includes('usage_stats')) {\r\n          enhancedMessage = `Usage stats validation failed: ${issue.message}. All numeric fields must be non-negative.`;\r\n        } else if (path.includes('schema.components')) {\r\n          enhancedMessage = `Form schema validation failed: ${issue.message}. Each component requires id, type, label, and order.`;\r\n        } else if (path.includes('title_subtitle')) {\r\n          enhancedMessage = `Title/Subtitle component validation failed: ${issue.message}. Check text content, color format (#RRGGBB), and styling options.`;\r\n        } else if (path.includes('line_separator')) {\r\n          enhancedMessage = `Line separator component validation failed: ${issue.message}. Check thickness (1-10), color format (#RRGGBB), and margins (0-100).`;\r\n        }\r\n        \r\n        return {\r\n          field: path,\r\n          message: enhancedMessage,\r\n          received: 'received' in issue ? issue.received : 'unknown'\r\n        };\r\n      });\r\n\r\n      return new Response(JSON.stringify({\r\n        error: 'Form template update validation failed',\r\n        details: enhancedErrors,\r\n        help: {\r\n          updatable_fields: ['name', 'description', 'category', 'subcategory', 'tags', 'clinical_codes', 'target_audience', 'estimated_completion_time', 'schema', 'change_log', 'collaborators'],\r\n          valid_categories: ['assessment', 'intake', 'treatment', 'outcome', 'research', 'other'],\r\n          valid_statuses: ['draft', 'active', 'archived'],\r\n          note: 'Template ID cannot be changed after creation'\r\n        }\r\n      }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    const formTemplateService = new FormTemplateService(env.DB);\r\n    const validatedData = validation.data;\r\n\r\n    // Prepare update data with enhanced metadata - service expects objects, not strings\r\n    const updateData: any = {\r\n      updated_by: Number(authenticatedContext.locals.customerId),\r\n    };\r\n\r\n    // Only include fields that are provided\r\n    if (validatedData.name !== undefined) updateData.name = validatedData.name;\r\n    if (validatedData.description !== undefined) updateData.description = validatedData.description;\r\n    if (validatedData.category !== undefined) updateData.category = validatedData.category;\r\n    if (validatedData.subcategory !== undefined) updateData.subcategory = validatedData.subcategory;\r\n    if (validatedData.clinical_context !== undefined) updateData.clinical_context = validatedData.clinical_context;\r\n    if (validatedData.schema !== undefined) updateData.schema = validatedData.schema;\r\n    if (validatedData.ui_schema !== undefined) updateData.ui_schema = validatedData.ui_schema;\r\n    if (validatedData.scoring_config !== undefined) updateData.scoring_config = validatedData.scoring_config;\r\n    if (validatedData.permissions !== undefined) updateData.permissions = validatedData.permissions;\r\n    if (validatedData.metadata !== undefined) updateData.metadata = validatedData.metadata;\r\n    if (validatedData.tags !== undefined) updateData.tags = validatedData.tags;\r\n    if (validatedData.clinical_codes !== undefined) updateData.clinical_codes = validatedData.clinical_codes;\r\n    if (validatedData.target_audience !== undefined) updateData.target_audience = validatedData.target_audience;\r\n    if (validatedData.estimated_completion_time !== undefined) updateData.estimated_completion_time = validatedData.estimated_completion_time;\r\n    if (validatedData.change_log !== undefined) updateData.change_log = validatedData.change_log;\r\n    if (validatedData.collaborators !== undefined) updateData.collaborators = validatedData.collaborators;\r\n    if (validatedData.usage_stats !== undefined) updateData.usage_stats = validatedData.usage_stats;\r\n    if (validatedData.status !== undefined) updateData.status = validatedData.status;\r\n\r\n    const result = await formTemplateService.update(Number(templateId), updateData);\r\n\r\n    if (!result.success) {\r\n      return new Response(JSON.stringify({\r\n        error: 'Form template not found'\r\n      }), {\r\n        status: 404,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    return new Response(JSON.stringify({\r\n      success: true,\r\n      data: { templateId: Number(templateId) },\r\n      message: 'Form template updated successfully'\r\n    }), {\r\n      status: 200,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  } catch (error) {\r\n    console.error('Error updating form template:', error);\r\n    \r\n    if (error instanceof Error && error.message.includes('UNIQUE constraint failed')) {\r\n      return new Response(JSON.stringify({\r\n        error: 'A form template with this name already exists'\r\n      }), {\r\n        status: 409,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    return new Response(JSON.stringify({\r\n      error: 'Failed to update form template',\r\n      details: error instanceof Error ? error.message : 'Unknown error'\r\n    }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n};\r\n\r\n// DELETE handler for removing templates\r\nconst deleteHandler: APIRoute = async (context) => {\r\n  const { locals, request } = context;\r\n  const env = (locals as any)?.runtime?.env;\r\n\r\n  if (!env) {\r\n    return new Response(JSON.stringify({\r\n      error: 'Runtime environment not available'\r\n    }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  // Use authorize middleware which includes authentication\r\n  const authzMiddleware = authorize(PERMISSIONS.DELETE, RESOURCES.FORM_TEMPLATES);\r\n  const authResult = await authzMiddleware(context);\r\n  \r\n  if (authResult instanceof Response) {\r\n    return authResult;\r\n  }\r\n\r\n  try {\r\n    const url = new URL(request.url);\r\n    const templateId = url.searchParams.get('id');\r\n\r\n    if (!templateId) {\r\n      return new Response(JSON.stringify({\r\n        error: 'Template ID is required',\r\n        help: {\r\n          parameter: 'Include template ID as query parameter: ?id=123',\r\n          valid_format: 'Template ID must be a positive integer'\r\n        }\r\n      }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    // Validate template ID format\r\n    const templateIdNum = Number(templateId);\r\n    if (isNaN(templateIdNum) || templateIdNum <= 0) {\r\n      return new Response(JSON.stringify({\r\n        error: 'Invalid template ID format',\r\n        details: `Received: \"${templateId}\", expected: positive integer`,\r\n        help: {\r\n          valid_format: 'Template ID must be a positive integer (e.g., 1, 2, 123)',\r\n          parameter: 'Include as query parameter: ?id=123'\r\n        }\r\n      }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    const formTemplateService = new FormTemplateService(env.DB);\r\n    const result = await formTemplateService.delete(templateIdNum);\r\n\r\n    if (!result) {\r\n      return new Response(JSON.stringify({\r\n        error: 'Form template not found',\r\n        help: {\r\n          check: `Template with ID ${templateIdNum} does not exist`,\r\n          suggestion: 'Verify the template ID exists before attempting deletion'\r\n        }\r\n      }), {\r\n        status: 404,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    return new Response(JSON.stringify({\r\n      success: true,\r\n      message: 'Form template deleted successfully'\r\n    }), {\r\n      status: 200,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  } catch (error) {\r\n    console.error('Error deleting form template:', error);\r\n    \r\n    // Enhanced error handling for deletion\r\n    if (error instanceof Error) {\r\n      if (error.message.includes('FOREIGN KEY constraint failed')) {\r\n        return new Response(JSON.stringify({\r\n          error: 'Cannot delete template: it is being used by existing submissions',\r\n          help: {\r\n            solution: 'Archive the template instead of deleting it',\r\n            alternative: 'Update all submissions to use a different template first'\r\n          }\r\n        }), {\r\n          status: 409,\r\n          headers: { 'Content-Type': 'application/json' }\r\n        });\r\n      }\r\n      \r\n      if (error.message.includes('permission denied') || error.message.includes('unauthorized')) {\r\n        return new Response(JSON.stringify({\r\n          error: 'Insufficient permissions to delete this template',\r\n          help: {\r\n            required_permission: 'delete:form_templates',\r\n            contact: 'Contact your administrator for deletion permissions'\r\n          }\r\n        }), {\r\n          status: 403,\r\n          headers: { 'Content-Type': 'application/json' }\r\n        });\r\n      }\r\n    }\r\n\r\n    return new Response(JSON.stringify({\r\n      error: 'Failed to delete form template',\r\n      details: error instanceof Error ? error.message : 'Unknown error',\r\n      help: {\r\n        troubleshoot: 'Check template ID format and permissions',\r\n        support: 'Contact support if the issue persists'\r\n      }\r\n    }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n};\r\n\r\nexport const GET = getHandler;\r\nexport const POST = postHandler;\r\nexport const PUT = putHandler;\r\nexport const DELETE = deleteHandler;"],"names":[],"mappings":";;;;;;;AAaA,MAAM,UAAA,GAAuB,OAAO,OAAA,KAAY;AAC9C,EAAA,MAAM,EAAE,MAAA,EAAQ,OAAA,EAAQ,GAAI,OAAA;AAC5B,EAAA,MAAM,GAAA,GAAO,QAAgB,OAAA,EAAS,GAAA;AAEtC,EAAA,IAAI,CAAC,GAAA,EAAK;AACR,IAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,MACjC,KAAA,EAAO;AAAA,KACR,CAAA,EAAG;AAAA,MACF,MAAA,EAAQ,GAAA;AAAA,MACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,KAC/C,CAAA;AAAA,EACH;AAGA,EAAA,MAAM,eAAA,GAAkB,SAAA,CAAU,WAAA,CAAY,IAAA,EAAM,UAAU,cAAc,CAAA;AAC5E,EAAA,MAAM,UAAA,GAAa,MAAM,eAAA,CAAgB,OAAO,CAAA;AAEhD,EAAA,IAAI,sBAAsB,QAAA,EAAU;AAClC,IAAA,OAAO,UAAA;AAAA,EACT;AAKA,EAAA,IAAI;AACF,IAAA,MAAM,GAAA,GAAM,IAAI,GAAA,CAAI,OAAA,CAAQ,GAAG,CAAA;AAC/B,IAAA,MAAM,MAAA,GAAS,mBAAA,CAAoB,GAAA,EAAK,yBAAyB,CAAA;AAEjE,IAAA,IAAI,CAAC,OAAO,OAAA,EAAS;AACnB,MAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,QACjC,KAAA,EAAO,0BAAA;AAAA,QACP,SAAS,QAAA,IAAY,MAAA,GAAS,MAAA,CAAO,MAAA,GAAS,CAAC,mCAAmC,CAAA;AAAA,QAClF,IAAA,EAAM;AAAA,UACJ,kBAAkB,CAAC,YAAA,EAAc,UAAU,WAAA,EAAa,SAAA,EAAW,YAAY,OAAO,CAAA;AAAA,UACtF,wBAAwB,CAAC,OAAA,EAAS,WAAA,EAAa,WAAA,EAAa,cAAc,UAAU,CAAA;AAAA,UACpF,mBAAmB,CAAC,MAAA,EAAQ,YAAA,EAAc,YAAA,EAAc,eAAe,iBAAiB,CAAA;AAAA,UACxF,iBAAA,EAAmB;AAAA;AACrB,OACD,CAAA,EAAG;AAAA,QACF,MAAA,EAAQ,GAAA;AAAA,QACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,OAC/C,CAAA;AAAA,IACH;AAEA,IAAA,MAAM,UAAU,MAAA,CAAO,IAAA;AAGvB,IAAA,IAAI,OAAA,CAAQ,MAAA,IAAU,OAAA,CAAQ,MAAA,CAAO,SAAS,CAAA,EAAG;AAC/C,MAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,QACjC,KAAA,EAAO;AAAA,OACR,CAAA,EAAG;AAAA,QACF,MAAA,EAAQ,GAAA;AAAA,QACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,OAC/C,CAAA;AAAA,IACH;AAEA,IAAA,MAAM,mBAAA,GAAsB,IAAI,mBAAA,CAAoB,GAAA,CAAI,EAAE,CAAA;AAG1D,IAAA,MAAM,eAAA,GAAkB,MAAM,mBAAA,CAAoB,yBAAA,CAA0B;AAAA,MAC1E,UAAU,OAAA,CAAQ,QAAA;AAAA,MAClB,aAAa,OAAA,CAAQ,WAAA;AAAA,MACrB,QAAQ,OAAA,CAAQ,MAAA;AAAA,MAChB,MAAM,OAAA,CAAQ,IAAA;AAAA,MACd,cAAc,OAAA,CAAQ,YAAA;AAAA,MACtB,iBAAiB,OAAA,CAAQ,eAAA;AAAA,MACzB,qBAAqB,OAAA,CAAQ,mBAAA;AAAA,MAC7B,SAAS,OAAA,CAAQ,OAAA;AAAA,MACjB,YAAY,OAAA,CAAQ,UAAA;AAAA,MACpB,MAAM,OAAA,CAAQ,IAAA;AAAA,MACd,UAAU,OAAA,CAAQ;AAAA,KACnB,CAAA;AAGD,IAAA,IAAI,MAAA,GAAS,KAAA,CAAA;AACb,IAAA,IAAI,QAAQ,cAAA,EAAgB;AAC1B,MAAA,MAAM,UAAA,GAAa,MAAM,mBAAA,CAAoB,SAAA,EAAU;AACvD,MAAA,MAAA,GAAS,MAAA,CAAO,QAAQ,UAAU,CAAA,CAAE,IAAI,CAAC,CAAC,IAAA,EAAM,MAAM,CAAA,MAAO;AAAA,QAC3D,IAAA;AAAA,QACA,QAAQ,KAAA,CAAM,OAAA,CAAQ,MAAM,CAAA,GAAI,MAAA,CAAO,IAAI,CAAA,CAAA,MAAM;AAAA,UAC/C,KAAA,EAAO,OAAO,CAAA,KAAM,QAAA,GAAW,EAAE,KAAA,GAAQ,CAAA;AAAA,UACzC,KAAA,EAAO,OAAO,CAAA,KAAM,QAAA,GAAW,EAAE,KAAA,GAAQ,CAAA;AAAA,UACzC,KAAA,EAAO,OAAO,CAAA,KAAM,QAAA,GAAW,EAAE,KAAA,GAAQ;AAAA,SAC3C,CAAE,IAAI;AAAC,OACT,CAAE,CAAA;AAAA,IACJ;AAGA,IAAA,MAAM,iBAAyC,EAAC;AAChD,IAAA,MAAM,UAAoB,EAAC;AAC3B,IAAA,IAAI,mBAAA,GAAsB,CAAA;AAC1B,IAAA,IAAI,2BAAA,GAA8B,CAAA;AAElC,IAAA,eAAA,CAAgB,SAAA,CAAU,QAAQ,CAAA,QAAA,KAAY;AAC5C,MAAA,cAAA,CAAe,SAAS,QAAQ,CAAA,GAAA,CAAK,eAAe,QAAA,CAAS,QAAQ,KAAK,CAAA,IAAK,CAAA;AAG/E,MAAA,IAAI,SAAS,IAAA,IAAQ,KAAA,CAAM,OAAA,CAAQ,QAAA,CAAS,IAAI,CAAA,EAAG;AACjD,QAAA,OAAA,CAAQ,IAAA,CAAK,GAAG,QAAA,CAAS,IAAI,CAAA;AAAA,MAC/B;AAGA,MAAA,IAAI,SAAS,yBAAA,EAA2B;AACtC,QAAA,mBAAA,IAAuB,QAAA,CAAS,yBAAA;AAChC,QAAA,2BAAA,EAAA;AAAA,MACF;AAAA,IACF,CAAC,CAAA;AAGD,IAAA,MAAM,YAAoC,EAAC;AAC3C,IAAA,OAAA,CAAQ,QAAQ,CAAA,GAAA,KAAO;AACrB,MAAA,SAAA,CAAU,GAAG,CAAA,GAAA,CAAK,SAAA,CAAU,GAAG,KAAK,CAAA,IAAK,CAAA;AAAA,IAC3C,CAAC,CAAA;AAED,IAAA,MAAM,YAAA,GAAe,MAAA,CAAO,OAAA,CAAQ,SAAS,CAAA,CAC1C,IAAA,CAAK,CAAC,GAAG,CAAC,CAAA,EAAG,GAAG,CAAC,CAAA,KAAM,CAAA,GAAI,CAAC,CAAA,CAC5B,KAAA,CAAM,CAAA,EAAG,EAAE,EACX,GAAA,CAAI,CAAC,CAAC,GAAA,EAAK,KAAK,CAAA,MAAO,EAAE,GAAA,EAAK,OAAM,CAAE,CAAA;AAEzC,IAAA,MAAM,YAAA,GAAe;AAAA,MACnB,iBAAiB,eAAA,CAAgB,WAAA;AAAA,MACjC,UAAA,EAAY,cAAA;AAAA,MACZ,qBAAqB,2BAAA,GAA8B,CAAA,GAC/C,KAAK,KAAA,CAAM,mBAAA,GAAsB,2BAA2B,CAAA,GAC5D,KAAA,CAAA;AAAA,MACJ,cAAA,EAAgB,YAAA,CAAa,MAAA,GAAS,CAAA,GAAI,YAAA,GAAe,KAAA;AAAA,KAC3D;AAGA,IAAA,MAAM,QAAA,GAAiC;AAAA,MACrC,OAAA,EAAS,IAAA;AAAA,MACT,IAAA,EAAM;AAAA,QACJ,WAAW,eAAA,CAAgB,SAAA;AAAA,QAC3B,UAAA,EAAY;AAAA,UACV,MAAM,eAAA,CAAgB,IAAA;AAAA,UACtB,UAAU,eAAA,CAAgB,QAAA;AAAA,UAC1B,OAAO,eAAA,CAAgB,WAAA;AAAA,UACvB,OAAO,eAAA,CAAgB;AAAA,SACzB;AAAA,QACA,GAAI,MAAA,IAAU,EAAE,MAAA,EAAO;AAAA,QACvB;AAAA,OACF;AAAA,MACA,OAAA,EAAS,CAAA,MAAA,EAAS,eAAA,CAAgB,SAAA,CAAU,MAAM,CAAA,eAAA;AAAA,KACpD;AAEA,IAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU,QAAQ,CAAA,EAAG;AAAA,MAC5C,MAAA,EAAQ,GAAA;AAAA,MACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,KAC/C,CAAA;AAAA,EACH,SAAS,KAAA,EAAO;AACd,IAAA,OAAA,CAAQ,KAAA,CAAM,kCAAkC,KAAK,CAAA;AACrD,IAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,MACjC,KAAA,EAAO,gCAAA;AAAA,MACP,OAAA,EAAS,KAAA,YAAiB,KAAA,GAAQ,KAAA,CAAM,OAAA,GAAU;AAAA,KACnD,CAAA,EAAG;AAAA,MACF,MAAA,EAAQ,GAAA;AAAA,MACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,KAC/C,CAAA;AAAA,EACH;AACF,CAAA;AAEA,MAAM,WAAA,GAAwB,OAAO,OAAA,KAAY;AAC/C,EAAA,MAAM,EAAE,MAAA,EAAQ,OAAA,EAAQ,GAAI,OAAA;AAC5B,EAAA,MAAM,GAAA,GAAO,QAAgB,OAAA,EAAS,GAAA;AAEtC,EAAA,IAAI,CAAC,GAAA,EAAK;AACR,IAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,MACjC,KAAA,EAAO;AAAA,KACR,CAAA,EAAG;AAAA,MACF,MAAA,EAAQ,GAAA;AAAA,MACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,KAC/C,CAAA;AAAA,EACH;AAGA,EAAA,MAAM,eAAA,GAAkB,SAAA,CAAU,WAAA,CAAY,MAAA,EAAQ,UAAU,cAAc,CAAA;AAC9E,EAAA,MAAM,UAAA,GAAa,MAAM,eAAA,CAAgB,OAAO,CAAA;AAEhD,EAAA,IAAI,sBAAsB,QAAA,EAAU;AAClC,IAAA,OAAO,UAAA;AAAA,EACT;AAGA,EAAA,MAAM,oBAAA,GAAuB,UAAA;AAE7B,EAAA,IAAI;AACF,IAAA,MAAM,IAAA,GAAO,MAAM,OAAA,CAAQ,IAAA,EAAK;AAChC,IAAA,MAAM,UAAA,GAAa,kBAAA,CAAmB,SAAA,CAAU,IAAI,CAAA;AAEpD,IAAA,IAAI,CAAC,WAAW,OAAA,EAAS;AAEvB,MAAA,MAAM,cAAA,GAAiB,UAAA,CAAW,KAAA,CAAM,MAAA,CAAO,IAAI,CAAA,KAAA,KAAS;AAC1D,QAAA,MAAM,IAAA,GAAO,KAAA,CAAM,IAAA,CAAK,IAAA,CAAK,GAAG,CAAA;AAChC,QAAA,IAAI,kBAAkB,KAAA,CAAM,OAAA;AAG5B,QAAA,IAAI,IAAA,CAAK,QAAA,CAAS,MAAM,CAAA,EAAG;AACzB,UAAA,eAAA,GAAkB,CAAA,wBAAA,EAA2B,MAAM,OAAO,CAAA,+EAAA,CAAA;AAAA,QAC5D,CAAA,MAAA,IAAW,IAAA,CAAK,QAAA,CAAS,gBAAgB,CAAA,EAAG;AAC1C,UAAA,eAAA,GAAkB,CAAA,kCAAA,EAAqC,MAAM,OAAO,CAAA,gDAAA,CAAA;AAAA,QACtE,CAAA,MAAA,IAAW,IAAA,CAAK,QAAA,CAAS,iBAAiB,CAAA,EAAG;AAC3C,UAAA,eAAA,GAAkB,CAAA,mCAAA,EAAsC,MAAM,OAAO,CAAA,kEAAA,CAAA;AAAA,QACvE,CAAA,MAAA,IAAW,IAAA,CAAK,QAAA,CAAS,2BAA2B,CAAA,EAAG;AACrD,UAAA,eAAA,GAAkB,CAAA,mCAAA,EAAsC,MAAM,OAAO,CAAA,8CAAA,CAAA;AAAA,QACvE,CAAA,MAAA,IAAW,IAAA,CAAK,QAAA,CAAS,YAAY,CAAA,EAAG;AACtC,UAAA,eAAA,GAAkB,CAAA,8BAAA,EAAiC,MAAM,OAAO,CAAA,6DAAA,CAAA;AAAA,QAClE,CAAA,MAAA,IAAW,IAAA,CAAK,QAAA,CAAS,eAAe,CAAA,EAAG;AACzC,UAAA,eAAA,GAAkB,CAAA,iCAAA,EAAoC,MAAM,OAAO,CAAA,4FAAA,CAAA;AAAA,QACrE,CAAA,MAAA,IAAW,IAAA,CAAK,QAAA,CAAS,aAAa,CAAA,EAAG;AACvC,UAAA,eAAA,GAAkB,CAAA,+BAAA,EAAkC,MAAM,OAAO,CAAA,0CAAA,CAAA;AAAA,QACnE,CAAA,MAAA,IAAW,IAAA,CAAK,QAAA,CAAS,mBAAmB,CAAA,EAAG;AAC7C,UAAA,eAAA,GAAkB,CAAA,+BAAA,EAAkC,MAAM,OAAO,CAAA,qDAAA,CAAA;AAAA,QACnE,CAAA,MAAA,IAAW,IAAA,CAAK,QAAA,CAAS,gBAAgB,CAAA,EAAG;AAC1C,UAAA,eAAA,GAAkB,CAAA,4CAAA,EAA+C,MAAM,OAAO,CAAA,kEAAA,CAAA;AAAA,QAChF,CAAA,MAAA,IAAW,IAAA,CAAK,QAAA,CAAS,gBAAgB,CAAA,EAAG;AAC1C,UAAA,eAAA,GAAkB,CAAA,4CAAA,EAA+C,MAAM,OAAO,CAAA,sEAAA,CAAA;AAAA,QAChF;AAEA,QAAA,OAAO;AAAA,UACL,KAAA,EAAO,IAAA;AAAA,UACP,OAAA,EAAS,eAAA;AAAA,UACT,QAAA,EAAU,UAAA,IAAc,KAAA,GAAQ,KAAA,CAAM,QAAA,GAAW;AAAA,SACnD;AAAA,MACF,CAAC,CAAA;AAED,MAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,QACjC,KAAA,EAAO,iCAAA;AAAA,QACP,OAAA,EAAS,cAAA;AAAA,QACT,IAAA,EAAM;AAAA,UACJ,eAAA,EAAiB,CAAC,MAAA,EAAQ,UAAA,EAAY,oBAAoB,QAAQ,CAAA;AAAA,UAClE,kBAAkB,CAAC,YAAA,EAAc,UAAU,WAAA,EAAa,SAAA,EAAW,YAAY,OAAO,CAAA;AAAA,UACtF,cAAA,EAAgB,CAAC,OAAA,EAAS,QAAA,EAAU,UAAU,CAAA;AAAA,UAC9C,gBAAA,EAAkB;AAAA;AACpB,OACD,CAAA,EAAG;AAAA,QACF,MAAA,EAAQ,GAAA;AAAA,QACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,OAC/C,CAAA;AAAA,IACH;AAEA,IAAA,MAAM,mBAAA,GAAsB,IAAI,mBAAA,CAAoB,GAAA,CAAI,EAAE,CAAA;AAC1D,IAAA,MAAM,gBAAgB,UAAA,CAAW,IAAA;AAGjC,IAAA,MAAM,MAAA,GAAS,MAAM,mBAAA,CAAoB,MAAA,CAAO;AAAA,MAC9C,MAAM,aAAA,CAAc,IAAA;AAAA,MACpB,aAAa,aAAA,CAAc,WAAA;AAAA,MAC3B,UAAU,aAAA,CAAc,QAAA;AAAA,MACxB,aAAa,aAAA,CAAc,WAAA;AAAA,MAC3B,kBAAkB,aAAA,CAAc,gBAAA;AAAA,MAChC,aAAa,aAAA,CAAc,MAAA;AAAA;AAAA,MAC3B,WAAW,aAAA,CAAc,SAAA;AAAA,MACzB,gBAAgB,aAAA,CAAc,cAAA;AAAA,MAC9B,aAAa,aAAA,CAAc,WAAA;AAAA,MAC3B,UAAU,aAAA,CAAc,QAAA;AAAA;AAAA,MAExB,MAAM,aAAA,CAAc,IAAA;AAAA,MACpB,gBAAgB,aAAA,CAAc,cAAA;AAAA,MAC9B,iBAAiB,aAAA,CAAc,eAAA;AAAA,MAC/B,2BAA2B,aAAA,CAAc,yBAAA;AAAA,MACzC,YAAY,aAAA,CAAc,UAAA;AAAA,MAC1B,eAAe,aAAA,CAAc,aAAA;AAAA,MAC7B,aAAa,aAAA,CAAc,WAAA;AAAA,MAC3B,MAAA,EAAQ,cAAc,MAAA,IAAU,OAAA;AAAA,MAChC,YAAY,aAAA,CAAc,UAAA,IAAc,MAAA,CAAO,oBAAA,CAAqB,OAAO,UAAU,CAAA;AAAA,MACrF,YAAY,aAAA,CAAc,UAAA,IAAc,MAAA,CAAO,oBAAA,CAAqB,OAAO,UAAU;AAAA,KACtF,CAAA;AAED,IAAA,IAAI,CAAC,OAAO,OAAA,EAAS;AACnB,MAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,QACjC,KAAA,EAAO;AAAA,OACR,CAAA,EAAG;AAAA,QACF,MAAA,EAAQ,GAAA;AAAA,QACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,OAC/C,CAAA;AAAA,IACH;AAEA,IAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,MACjC,OAAA,EAAS,IAAA;AAAA,MACT,IAAA,EAAM,EAAE,UAAA,EAAY,MAAA,CAAO,UAAA,EAAW;AAAA,MACtC,OAAA,EAAS;AAAA,KACV,CAAA,EAAG;AAAA,MACF,MAAA,EAAQ,GAAA;AAAA,MACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,KAC/C,CAAA;AAAA,EACH,SAAS,KAAA,EAAO;AACd,IAAA,OAAA,CAAQ,KAAA,CAAM,iCAAiC,KAAK,CAAA;AAGpD,IAAA,IAAI,iBAAiB,KAAA,EAAO;AAC1B,MAAA,IAAI,KAAA,CAAM,OAAA,CAAQ,QAAA,CAAS,0BAA0B,CAAA,EAAG;AACtD,QAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,UACjC,KAAA,EAAO;AAAA,SACR,CAAA,EAAG;AAAA,UACF,MAAA,EAAQ,GAAA;AAAA,UACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,SAC/C,CAAA;AAAA,MACH;AAEA,MAAA,IAAI,KAAA,CAAM,OAAA,CAAQ,QAAA,CAAS,+BAA+B,CAAA,EAAG;AAC3D,QAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,UACjC,KAAA,EAAO;AAAA,SACR,CAAA,EAAG;AAAA,UACF,MAAA,EAAQ,GAAA;AAAA,UACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,SAC/C,CAAA;AAAA,MACH;AAAA,IACF;AAEA,IAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,MACjC,KAAA,EAAO,gCAAA;AAAA,MACP,OAAA,EAAS,KAAA,YAAiB,KAAA,GAAQ,KAAA,CAAM,OAAA,GAAU;AAAA,KACnD,CAAA,EAAG;AAAA,MACF,MAAA,EAAQ,GAAA;AAAA,MACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,KAC/C,CAAA;AAAA,EACH;AACF,CAAA;AAGA,MAAM,UAAA,GAAuB,OAAO,OAAA,KAAY;AAC9C,EAAA,MAAM,EAAE,MAAA,EAAQ,OAAA,EAAQ,GAAI,OAAA;AAC5B,EAAA,MAAM,GAAA,GAAO,QAAgB,OAAA,EAAS,GAAA;AAEtC,EAAA,IAAI,CAAC,GAAA,EAAK;AACR,IAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,MACjC,KAAA,EAAO;AAAA,KACR,CAAA,EAAG;AAAA,MACF,MAAA,EAAQ,GAAA;AAAA,MACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,KAC/C,CAAA;AAAA,EACH;AAGA,EAAA,MAAM,eAAA,GAAkB,SAAA,CAAU,WAAA,CAAY,MAAA,EAAQ,UAAU,cAAc,CAAA;AAC9E,EAAA,MAAM,UAAA,GAAa,MAAM,eAAA,CAAgB,OAAO,CAAA;AAEhD,EAAA,IAAI,sBAAsB,QAAA,EAAU;AAClC,IAAA,OAAO,UAAA;AAAA,EACT;AAEA,EAAA,MAAM,oBAAA,GAAuB,UAAA;AAE7B,EAAA,IAAI;AACF,IAAA,MAAM,GAAA,GAAM,IAAI,GAAA,CAAI,OAAA,CAAQ,GAAG,CAAA;AAC/B,IAAA,MAAM,UAAA,GAAa,GAAA,CAAI,YAAA,CAAa,GAAA,CAAI,IAAI,CAAA;AAE5C,IAAA,IAAI,CAAC,UAAA,EAAY;AACf,MAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,QACjC,KAAA,EAAO;AAAA,OACR,CAAA,EAAG;AAAA,QACF,MAAA,EAAQ,GAAA;AAAA,QACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,OAC/C,CAAA;AAAA,IACH;AAEA,IAAA,MAAM,IAAA,GAAO,MAAM,OAAA,CAAQ,IAAA,EAAK;AAChC,IAAA,MAAM,UAAA,GAAa,yBAAA,CAA0B,SAAA,CAAU,IAAI,CAAA;AAE3D,IAAA,IAAI,CAAC,WAAW,OAAA,EAAS;AAEvB,MAAA,MAAM,cAAA,GAAiB,UAAA,CAAW,KAAA,CAAM,MAAA,CAAO,IAAI,CAAA,KAAA,KAAS;AAC1D,QAAA,MAAM,IAAA,GAAO,KAAA,CAAM,IAAA,CAAK,IAAA,CAAK,GAAG,CAAA;AAChC,QAAA,IAAI,kBAAkB,KAAA,CAAM,OAAA;AAG5B,QAAA,IAAI,IAAA,CAAK,QAAA,CAAS,MAAM,CAAA,EAAG;AACzB,UAAA,eAAA,GAAkB,CAAA,wBAAA,EAA2B,MAAM,OAAO,CAAA,+EAAA,CAAA;AAAA,QAC5D,CAAA,MAAA,IAAW,IAAA,CAAK,QAAA,CAAS,gBAAgB,CAAA,EAAG;AAC1C,UAAA,eAAA,GAAkB,CAAA,kCAAA,EAAqC,MAAM,OAAO,CAAA,gDAAA,CAAA;AAAA,QACtE,CAAA,MAAA,IAAW,IAAA,CAAK,QAAA,CAAS,iBAAiB,CAAA,EAAG;AAC3C,UAAA,eAAA,GAAkB,CAAA,mCAAA,EAAsC,MAAM,OAAO,CAAA,kEAAA,CAAA;AAAA,QACvE,CAAA,MAAA,IAAW,IAAA,CAAK,QAAA,CAAS,2BAA2B,CAAA,EAAG;AACrD,UAAA,eAAA,GAAkB,CAAA,mCAAA,EAAsC,MAAM,OAAO,CAAA,8CAAA,CAAA;AAAA,QACvE,CAAA,MAAA,IAAW,IAAA,CAAK,QAAA,CAAS,YAAY,CAAA,EAAG;AACtC,UAAA,eAAA,GAAkB,CAAA,8BAAA,EAAiC,MAAM,OAAO,CAAA,6DAAA,CAAA;AAAA,QAClE,CAAA,MAAA,IAAW,IAAA,CAAK,QAAA,CAAS,eAAe,CAAA,EAAG;AACzC,UAAA,eAAA,GAAkB,CAAA,iCAAA,EAAoC,MAAM,OAAO,CAAA,4FAAA,CAAA;AAAA,QACrE,CAAA,MAAA,IAAW,IAAA,CAAK,QAAA,CAAS,aAAa,CAAA,EAAG;AACvC,UAAA,eAAA,GAAkB,CAAA,+BAAA,EAAkC,MAAM,OAAO,CAAA,0CAAA,CAAA;AAAA,QACnE,CAAA,MAAA,IAAW,IAAA,CAAK,QAAA,CAAS,mBAAmB,CAAA,EAAG;AAC7C,UAAA,eAAA,GAAkB,CAAA,+BAAA,EAAkC,MAAM,OAAO,CAAA,qDAAA,CAAA;AAAA,QACnE,CAAA,MAAA,IAAW,IAAA,CAAK,QAAA,CAAS,gBAAgB,CAAA,EAAG;AAC1C,UAAA,eAAA,GAAkB,CAAA,4CAAA,EAA+C,MAAM,OAAO,CAAA,kEAAA,CAAA;AAAA,QAChF,CAAA,MAAA,IAAW,IAAA,CAAK,QAAA,CAAS,gBAAgB,CAAA,EAAG;AAC1C,UAAA,eAAA,GAAkB,CAAA,4CAAA,EAA+C,MAAM,OAAO,CAAA,sEAAA,CAAA;AAAA,QAChF;AAEA,QAAA,OAAO;AAAA,UACL,KAAA,EAAO,IAAA;AAAA,UACP,OAAA,EAAS,eAAA;AAAA,UACT,QAAA,EAAU,UAAA,IAAc,KAAA,GAAQ,KAAA,CAAM,QAAA,GAAW;AAAA,SACnD;AAAA,MACF,CAAC,CAAA;AAED,MAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,QACjC,KAAA,EAAO,wCAAA;AAAA,QACP,OAAA,EAAS,cAAA;AAAA,QACT,IAAA,EAAM;AAAA,UACJ,gBAAA,EAAkB,CAAC,MAAA,EAAQ,aAAA,EAAe,UAAA,EAAY,aAAA,EAAe,MAAA,EAAQ,gBAAA,EAAkB,iBAAA,EAAmB,2BAAA,EAA6B,QAAA,EAAU,YAAA,EAAc,eAAe,CAAA;AAAA,UACtL,kBAAkB,CAAC,YAAA,EAAc,UAAU,WAAA,EAAa,SAAA,EAAW,YAAY,OAAO,CAAA;AAAA,UACtF,cAAA,EAAgB,CAAC,OAAA,EAAS,QAAA,EAAU,UAAU,CAAA;AAAA,UAC9C,IAAA,EAAM;AAAA;AACR,OACD,CAAA,EAAG;AAAA,QACF,MAAA,EAAQ,GAAA;AAAA,QACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,OAC/C,CAAA;AAAA,IACH;AAEA,IAAA,MAAM,mBAAA,GAAsB,IAAI,mBAAA,CAAoB,GAAA,CAAI,EAAE,CAAA;AAC1D,IAAA,MAAM,gBAAgB,UAAA,CAAW,IAAA;AAGjC,IAAA,MAAM,UAAA,GAAkB;AAAA,MACtB,UAAA,EAAY,MAAA,CAAO,oBAAA,CAAqB,MAAA,CAAO,UAAU;AAAA,KAC3D;AAGA,IAAA,IAAI,aAAA,CAAc,IAAA,KAAS,KAAA,CAAA,EAAW,UAAA,CAAW,OAAO,aAAA,CAAc,IAAA;AACtE,IAAA,IAAI,aAAA,CAAc,WAAA,KAAgB,KAAA,CAAA,EAAW,UAAA,CAAW,cAAc,aAAA,CAAc,WAAA;AACpF,IAAA,IAAI,aAAA,CAAc,QAAA,KAAa,KAAA,CAAA,EAAW,UAAA,CAAW,WAAW,aAAA,CAAc,QAAA;AAC9E,IAAA,IAAI,aAAA,CAAc,WAAA,KAAgB,KAAA,CAAA,EAAW,UAAA,CAAW,cAAc,aAAA,CAAc,WAAA;AACpF,IAAA,IAAI,aAAA,CAAc,gBAAA,KAAqB,KAAA,CAAA,EAAW,UAAA,CAAW,mBAAmB,aAAA,CAAc,gBAAA;AAC9F,IAAA,IAAI,aAAA,CAAc,MAAA,KAAW,KAAA,CAAA,EAAW,UAAA,CAAW,SAAS,aAAA,CAAc,MAAA;AAC1E,IAAA,IAAI,aAAA,CAAc,SAAA,KAAc,KAAA,CAAA,EAAW,UAAA,CAAW,YAAY,aAAA,CAAc,SAAA;AAChF,IAAA,IAAI,aAAA,CAAc,cAAA,KAAmB,KAAA,CAAA,EAAW,UAAA,CAAW,iBAAiB,aAAA,CAAc,cAAA;AAC1F,IAAA,IAAI,aAAA,CAAc,WAAA,KAAgB,KAAA,CAAA,EAAW,UAAA,CAAW,cAAc,aAAA,CAAc,WAAA;AACpF,IAAA,IAAI,aAAA,CAAc,QAAA,KAAa,KAAA,CAAA,EAAW,UAAA,CAAW,WAAW,aAAA,CAAc,QAAA;AAC9E,IAAA,IAAI,aAAA,CAAc,IAAA,KAAS,KAAA,CAAA,EAAW,UAAA,CAAW,OAAO,aAAA,CAAc,IAAA;AACtE,IAAA,IAAI,aAAA,CAAc,cAAA,KAAmB,KAAA,CAAA,EAAW,UAAA,CAAW,iBAAiB,aAAA,CAAc,cAAA;AAC1F,IAAA,IAAI,aAAA,CAAc,eAAA,KAAoB,KAAA,CAAA,EAAW,UAAA,CAAW,kBAAkB,aAAA,CAAc,eAAA;AAC5F,IAAA,IAAI,aAAA,CAAc,yBAAA,KAA8B,KAAA,CAAA,EAAW,UAAA,CAAW,4BAA4B,aAAA,CAAc,yBAAA;AAChH,IAAA,IAAI,aAAA,CAAc,UAAA,KAAe,KAAA,CAAA,EAAW,UAAA,CAAW,aAAa,aAAA,CAAc,UAAA;AAClF,IAAA,IAAI,aAAA,CAAc,aAAA,KAAkB,KAAA,CAAA,EAAW,UAAA,CAAW,gBAAgB,aAAA,CAAc,aAAA;AACxF,IAAA,IAAI,aAAA,CAAc,WAAA,KAAgB,KAAA,CAAA,EAAW,UAAA,CAAW,cAAc,aAAA,CAAc,WAAA;AACpF,IAAA,IAAI,aAAA,CAAc,MAAA,KAAW,KAAA,CAAA,EAAW,UAAA,CAAW,SAAS,aAAA,CAAc,MAAA;AAE1E,IAAA,MAAM,SAAS,MAAM,mBAAA,CAAoB,OAAO,MAAA,CAAO,UAAU,GAAG,UAAU,CAAA;AAE9E,IAAA,IAAI,CAAC,OAAO,OAAA,EAAS;AACnB,MAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,QACjC,KAAA,EAAO;AAAA,OACR,CAAA,EAAG;AAAA,QACF,MAAA,EAAQ,GAAA;AAAA,QACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,OAC/C,CAAA;AAAA,IACH;AAEA,IAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,MACjC,OAAA,EAAS,IAAA;AAAA,MACT,IAAA,EAAM,EAAE,UAAA,EAAY,MAAA,CAAO,UAAU,CAAA,EAAE;AAAA,MACvC,OAAA,EAAS;AAAA,KACV,CAAA,EAAG;AAAA,MACF,MAAA,EAAQ,GAAA;AAAA,MACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,KAC/C,CAAA;AAAA,EACH,SAAS,KAAA,EAAO;AACd,IAAA,OAAA,CAAQ,KAAA,CAAM,iCAAiC,KAAK,CAAA;AAEpD,IAAA,IAAI,iBAAiB,KAAA,IAAS,KAAA,CAAM,OAAA,CAAQ,QAAA,CAAS,0BAA0B,CAAA,EAAG;AAChF,MAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,QACjC,KAAA,EAAO;AAAA,OACR,CAAA,EAAG;AAAA,QACF,MAAA,EAAQ,GAAA;AAAA,QACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,OAC/C,CAAA;AAAA,IACH;AAEA,IAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,MACjC,KAAA,EAAO,gCAAA;AAAA,MACP,OAAA,EAAS,KAAA,YAAiB,KAAA,GAAQ,KAAA,CAAM,OAAA,GAAU;AAAA,KACnD,CAAA,EAAG;AAAA,MACF,MAAA,EAAQ,GAAA;AAAA,MACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,KAC/C,CAAA;AAAA,EACH;AACF,CAAA;AAGA,MAAM,aAAA,GAA0B,OAAO,OAAA,KAAY;AACjD,EAAA,MAAM,EAAE,MAAA,EAAQ,OAAA,EAAQ,GAAI,OAAA;AAC5B,EAAA,MAAM,GAAA,GAAO,QAAgB,OAAA,EAAS,GAAA;AAEtC,EAAA,IAAI,CAAC,GAAA,EAAK;AACR,IAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,MACjC,KAAA,EAAO;AAAA,KACR,CAAA,EAAG;AAAA,MACF,MAAA,EAAQ,GAAA;AAAA,MACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,KAC/C,CAAA;AAAA,EACH;AAGA,EAAA,MAAM,eAAA,GAAkB,SAAA,CAAU,WAAA,CAAY,MAAA,EAAQ,UAAU,cAAc,CAAA;AAC9E,EAAA,MAAM,UAAA,GAAa,MAAM,eAAA,CAAgB,OAAO,CAAA;AAEhD,EAAA,IAAI,sBAAsB,QAAA,EAAU;AAClC,IAAA,OAAO,UAAA;AAAA,EACT;AAEA,EAAA,IAAI;AACF,IAAA,MAAM,GAAA,GAAM,IAAI,GAAA,CAAI,OAAA,CAAQ,GAAG,CAAA;AAC/B,IAAA,MAAM,UAAA,GAAa,GAAA,CAAI,YAAA,CAAa,GAAA,CAAI,IAAI,CAAA;AAE5C,IAAA,IAAI,CAAC,UAAA,EAAY;AACf,MAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,QACjC,KAAA,EAAO,yBAAA;AAAA,QACP,IAAA,EAAM;AAAA,UACJ,SAAA,EAAW,iDAAA;AAAA,UACX,YAAA,EAAc;AAAA;AAChB,OACD,CAAA,EAAG;AAAA,QACF,MAAA,EAAQ,GAAA;AAAA,QACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,OAC/C,CAAA;AAAA,IACH;AAGA,IAAA,MAAM,aAAA,GAAgB,OAAO,UAAU,CAAA;AACvC,IAAA,IAAI,KAAA,CAAM,aAAa,CAAA,IAAK,aAAA,IAAiB,CAAA,EAAG;AAC9C,MAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,QACjC,KAAA,EAAO,4BAAA;AAAA,QACP,OAAA,EAAS,cAAc,UAAU,CAAA,6BAAA,CAAA;AAAA,QACjC,IAAA,EAAM;AAAA,UACJ,YAAA,EAAc,0DAAA;AAAA,UACd,SAAA,EAAW;AAAA;AACb,OACD,CAAA,EAAG;AAAA,QACF,MAAA,EAAQ,GAAA;AAAA,QACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,OAC/C,CAAA;AAAA,IACH;AAEA,IAAA,MAAM,mBAAA,GAAsB,IAAI,mBAAA,CAAoB,GAAA,CAAI,EAAE,CAAA;AAC1D,IAAA,MAAM,MAAA,GAAS,MAAM,mBAAA,CAAoB,MAAA,CAAO,aAAa,CAAA;AAE7D,IAAA,IAAI,CAAC,MAAA,EAAQ;AACX,MAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,QACjC,KAAA,EAAO,yBAAA;AAAA,QACP,IAAA,EAAM;AAAA,UACJ,KAAA,EAAO,oBAAoB,aAAa,CAAA,eAAA,CAAA;AAAA,UACxC,UAAA,EAAY;AAAA;AACd,OACD,CAAA,EAAG;AAAA,QACF,MAAA,EAAQ,GAAA;AAAA,QACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,OAC/C,CAAA;AAAA,IACH;AAEA,IAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,MACjC,OAAA,EAAS,IAAA;AAAA,MACT,OAAA,EAAS;AAAA,KACV,CAAA,EAAG;AAAA,MACF,MAAA,EAAQ,GAAA;AAAA,MACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,KAC/C,CAAA;AAAA,EACH,SAAS,KAAA,EAAO;AACd,IAAA,OAAA,CAAQ,KAAA,CAAM,iCAAiC,KAAK,CAAA;AAGpD,IAAA,IAAI,iBAAiB,KAAA,EAAO;AAC1B,MAAA,IAAI,KAAA,CAAM,OAAA,CAAQ,QAAA,CAAS,+BAA+B,CAAA,EAAG;AAC3D,QAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,UACjC,KAAA,EAAO,kEAAA;AAAA,UACP,IAAA,EAAM;AAAA,YACJ,QAAA,EAAU,6CAAA;AAAA,YACV,WAAA,EAAa;AAAA;AACf,SACD,CAAA,EAAG;AAAA,UACF,MAAA,EAAQ,GAAA;AAAA,UACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,SAC/C,CAAA;AAAA,MACH;AAEA,MAAA,IAAI,KAAA,CAAM,QAAQ,QAAA,CAAS,mBAAmB,KAAK,KAAA,CAAM,OAAA,CAAQ,QAAA,CAAS,cAAc,CAAA,EAAG;AACzF,QAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,UACjC,KAAA,EAAO,kDAAA;AAAA,UACP,IAAA,EAAM;AAAA,YACJ,mBAAA,EAAqB,uBAAA;AAAA,YACrB,OAAA,EAAS;AAAA;AACX,SACD,CAAA,EAAG;AAAA,UACF,MAAA,EAAQ,GAAA;AAAA,UACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,SAC/C,CAAA;AAAA,MACH;AAAA,IACF;AAEA,IAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,MACjC,KAAA,EAAO,gCAAA;AAAA,MACP,OAAA,EAAS,KAAA,YAAiB,KAAA,GAAQ,KAAA,CAAM,OAAA,GAAU,eAAA;AAAA,MAClD,IAAA,EAAM;AAAA,QACJ,YAAA,EAAc,0CAAA;AAAA,QACd,OAAA,EAAS;AAAA;AACX,KACD,CAAA,EAAG;AAAA,MACF,MAAA,EAAQ,GAAA;AAAA,MACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,KAC/C,CAAA;AAAA,EACH;AACF,CAAA;AAEO,MAAM,GAAA,GAAM,UAAA;AACZ,MAAM,IAAA,GAAO,WAAA;AACb,MAAM,GAAA,GAAM,UAAA;AACZ,MAAM,MAAA,GAAS,aAAA;;;;;;;;;;;;;;"}