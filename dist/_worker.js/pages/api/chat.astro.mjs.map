{"version":3,"file":"chat.astro.mjs","sources":["../../../../src/pages/api/chat.ts"],"sourcesContent":["import type { APIRoute } from 'astro';\r\nimport { checkRateLimit } from '../../lib/ai';\r\nimport type { AIEnv, ChatMessage } from '../../lib/ai';\r\n\r\nexport const POST: APIRoute = async ({ request, locals }) => {\r\n  const env = (locals as any).runtime.env as unknown as AIEnv;\r\n  \r\n  try {\r\n    // Parse request with defensive defaults\r\n    const body = await request.json() as any;\r\n    \r\n    if (!body || typeof body !== 'object') {\r\n      return new Response(JSON.stringify({ error: 'Invalid request body' }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    const question = String(body.question ?? '').trim();\r\n    const history = Array.isArray(body.history) ? body.history : [];\r\n    const conversationId = body.conversationId ?? undefined;\r\n    const options = body.options ?? {};\r\n    \r\n    if (!question) {\r\n      return new Response(JSON.stringify({ error: 'No question provided' }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    // Check rate limit\r\n    const clientId = request.headers.get('CF-Connecting-IP') || 'anonymous';\r\n    const rateLimitInfo = await checkRateLimit(clientId, env);\r\n    \r\n    if (!rateLimitInfo) {\r\n      console.error('Rate limit info is undefined');\r\n      return new Response(JSON.stringify({ error: 'Rate limit check failed' }), {\r\n        status: 500,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    if (!rateLimitInfo.allowed) {\r\n      return new Response(JSON.stringify({\r\n        error: 'Rate limit exceeded',\r\n        retryAfter: (rateLimitInfo as any).retryAfter || 60\r\n      }), {\r\n        status: 429,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'X-RateLimit-Limit': '60',\r\n          'X-RateLimit-Remaining': (rateLimitInfo.remaining || 0).toString(),\r\n          'X-RateLimit-Reset': Math.floor((rateLimitInfo.resetAt || Date.now()) / 1000).toString()\r\n        }\r\n      });\r\n    }\r\n\r\n    // Validate and sanitize each message in history\r\n    const sanitizedHistory: ChatMessage[] = [];\r\n    for (const msg of history) {\r\n      if (!msg || typeof msg !== 'object') continue;\r\n      \r\n      const role = String(msg.role ?? '').trim();\r\n      const content = String(msg.content ?? '').trim();\r\n      \r\n      if (!role || !content) {\r\n        console.warn('Skipping invalid message:', msg);\r\n        continue;\r\n      }\r\n      \r\n      if (!['user', 'assistant', 'system'].includes(role)) {\r\n        console.warn('Skipping message with invalid role:', role);\r\n        continue;\r\n      }\r\n      \r\n      sanitizedHistory.push({ role, content } as ChatMessage);\r\n    }\r\n\r\n    // Use IPLC_AI service binding\r\n    const iplcAI = (env as any).IPLC_AI;\r\n    if (!iplcAI || typeof iplcAI.fetch !== 'function') {\r\n      return new Response(JSON.stringify({\r\n        error: 'AI service not available',\r\n        details: 'IPLC_AI service binding is not configured'\r\n      }), {\r\n        status: 503,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    // Call the iplc-ai worker's /rag endpoint\r\n    const ragResponse = await iplcAI.fetch('https://iplc-ai.worker/rag', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        question: question,\r\n        history: sanitizedHistory,\r\n        sessionId: conversationId,\r\n        options: {\r\n          maxTokens: Math.min(Number(options.maxTokens) || 1000, 2048),\r\n          temperature: Math.min(Math.max(Number(options.temperature) || 0.7, 0), 1),\r\n          topK: Math.min(Number(options.topK) || 5, 10)\r\n        }\r\n      })\r\n    });\r\n    \r\n    if (!ragResponse.ok) {\r\n      const error = await ragResponse.text();\r\n      console.error('IPLC_AI service error:', error);\r\n      \r\n      // Create error SSE stream\r\n      const errorStream = new ReadableStream({\r\n        start(controller) {\r\n          const encoder = new TextEncoder();\r\n          const errorEvent = `event: error\\ndata: ${JSON.stringify({\r\n            error: 'AI service error',\r\n            details: error\r\n          })}\\n\\n`;\r\n          controller.enqueue(encoder.encode(errorEvent));\r\n          controller.close();\r\n        }\r\n      });\r\n\r\n      return new Response(errorStream, {\r\n        headers: {\r\n          'Content-Type': 'text/event-stream',\r\n          'Cache-Control': 'no-cache',\r\n          'Connection': 'keep-alive'\r\n        }\r\n      });\r\n    }\r\n\r\n    const responseHeaders: Record<string, string> = {\r\n      'Content-Type': 'text/event-stream',\r\n      'Cache-Control': 'no-cache, no-store, must-revalidate',\r\n      'Connection': 'keep-alive',\r\n      'X-Accel-Buffering': 'no',\r\n      'Transfer-Encoding': 'chunked',\r\n      'X-RateLimit-Limit': '60'\r\n    };\r\n\r\n    // Safely add rate limit headers\r\n    if (rateLimitInfo && typeof rateLimitInfo.remaining !== 'undefined') {\r\n      responseHeaders['X-RateLimit-Remaining'] = String(rateLimitInfo.remaining);\r\n    }\r\n    if (rateLimitInfo && typeof rateLimitInfo.resetAt !== 'undefined') {\r\n      responseHeaders['X-RateLimit-Reset'] = String(Math.floor(rateLimitInfo.resetAt / 1000));\r\n    }\r\n\r\n    // Return the streaming response from iplc-ai\r\n    return new Response(ragResponse.body, {\r\n      headers: responseHeaders\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Chat error:', error);\r\n    console.error('Error type:', typeof error);\r\n    console.error('Error stack:', error instanceof Error ? error.stack : 'No stack');\r\n    \r\n    // Create error SSE stream\r\n    const errorStream = new ReadableStream({\r\n      start(controller) {\r\n        const encoder = new TextEncoder();\r\n        const errorEvent = `event: error\\ndata: ${JSON.stringify({\r\n          error: 'Failed to process chat request',\r\n          details: error instanceof Error ? error.message : 'Unknown error'\r\n        })}\\n\\n`;\r\n        controller.enqueue(encoder.encode(errorEvent));\r\n        controller.close();\r\n      }\r\n    });\r\n\r\n    return new Response(errorStream, {\r\n      headers: {\r\n        'Content-Type': 'text/event-stream',\r\n        'Cache-Control': 'no-cache',\r\n        'Connection': 'keep-alive'\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\n// Example request body:\r\n/*\r\n{\r\n  \"question\": \"What is the capital of France?\",\r\n  \"history\": [\r\n    {\r\n      \"role\": \"user\",\r\n      \"content\": \"Hello\"\r\n    },\r\n    {\r\n      \"role\": \"assistant\", \r\n      \"content\": \"Hello! How can I help you today?\"\r\n    }\r\n  ],\r\n  \"conversationId\": \"conv-123\",\r\n  \"options\": {\r\n    \"maxTokens\": 1000,\r\n    \"temperature\": 0.7,\r\n    \"topK\": 5\r\n  }\r\n}\r\n*/\r\n\r\n// Example SSE response format:\r\n/*\r\nevent: start\r\ndata: {\"timestamp\":\"2024-01-01T00:00:00Z\"}\r\n\r\nevent: context\r\ndata: {\"documents\":[{\"id\":\"doc1\",\"chunk\":\"Paris is the capital...\",\"score\":0.9}]}\r\n\r\nevent: token\r\ndata: {\"token\":\"The\"}\r\n\r\nevent: token\r\ndata: {\"token\":\" capital\"}\r\n\r\nevent: token  \r\ndata: {\"token\":\" of\"}\r\n\r\nevent: done\r\ndata: {\"tokensUsed\":150,\"duration\":1234}\r\n*/"],"names":[],"mappings":"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"}