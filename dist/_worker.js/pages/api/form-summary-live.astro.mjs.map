{"version":3,"file":"form-summary-live.astro.mjs","sources":["../../../../src/pages/api/form-summary-live.ts"],"sourcesContent":["// API endpoint for generating AI summaries in live forms\r\n// IPLC Forms v3\r\n\r\nimport type { APIRoute } from 'astro';\r\nimport { checkRateLimit } from '../../lib/ai/rateLimit';\r\nimport type { AIEnv } from '../../lib/ai/types';\r\n\r\nexport const POST: APIRoute = async ({ request, locals }) => {\r\n  const env = (locals as any).runtime.env;\r\n  \r\n  try {\r\n    // Parse request body\r\n    const body = await request.json() as {\r\n      selectedFields: string[];\r\n      fieldData: Record<string, any>;\r\n      summaryConfig?: {\r\n        defaultPrompt?: string;\r\n        maxLength?: number;\r\n        includeMedicalContext?: boolean;\r\n        sourceFieldLabels?: boolean;\r\n      };\r\n    };\r\n    const { selectedFields, fieldData, summaryConfig } = body;\r\n\r\n    if (!selectedFields || !Array.isArray(selectedFields) || selectedFields.length === 0) {\r\n      return new Response(JSON.stringify({ error: 'No fields selected for summary' }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    // Create AI environment object\r\n    const aiEnv: AIEnv = {\r\n      AI: env.AI,\r\n      DOC_INDEX: env.DOC_INDEX,\r\n      DOC_METADATA: env.DOC_METADATA,\r\n      CHAT_HISTORY: env.CHAT_HISTORY || env.FORMS_KV,\r\n      AI_GATE: env.AIGate\r\n    };\r\n\r\n    // Check rate limit\r\n    const clientIp = request.headers.get('cf-connecting-ip') || 'unknown';\r\n    const clientId = `form-summary-live:${clientIp}`;\r\n    const rateLimitResult = await checkRateLimit(clientId, aiEnv);\r\n    \r\n    if (!rateLimitResult.allowed) {\r\n      const retryAfter = Math.ceil((rateLimitResult.resetAt - Date.now()) / 1000);\r\n      return new Response(JSON.stringify({\r\n        error: 'Rate limit exceeded',\r\n        retryAfter: retryAfter\r\n      }), {\r\n        status: 429,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Retry-After': retryAfter.toString()\r\n        }\r\n      });\r\n    }\r\n\r\n    // Extract configuration with defaults\r\n    const {\r\n      defaultPrompt = '',\r\n      maxLength = 500,\r\n      includeMedicalContext = true,\r\n      sourceFieldLabels = true\r\n    } = summaryConfig || {};\r\n\r\n    // Build the content for summarization\r\n    const contentParts: string[] = [];\r\n    \r\n    selectedFields.forEach(fieldId => {\r\n      const value = fieldData[fieldId];\r\n      if (value !== undefined && value !== null && value !== '') {\r\n        if (sourceFieldLabels) {\r\n          // Try to get field label from the field ID (assuming format like \"fieldLabel_timestamp\")\r\n          const label = fieldId.split('_')[0]\r\n            .replace(/([A-Z])/g, ' $1')\r\n            .replace(/^./, (str: string) => str.toUpperCase())\r\n            .trim();\r\n          contentParts.push(`${label}: ${value}`);\r\n        } else {\r\n          contentParts.push(String(value));\r\n        }\r\n      }\r\n    });\r\n\r\n    if (contentParts.length === 0) {\r\n      return new Response(JSON.stringify({ error: 'No content to summarize' }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    const contentToSummarize = contentParts.join('\\n');\r\n\r\n    // Build the system prompt\r\n    let systemPrompt = 'You are a medical assistant helping to summarize form data. ';\r\n    if (includeMedicalContext) {\r\n      systemPrompt += 'Use appropriate medical terminology and maintain clinical accuracy. ';\r\n    }\r\n    systemPrompt += `Create a concise summary of the provided information in no more than ${maxLength} characters.`;\r\n\r\n    // Build the full prompt\r\n    let fullPrompt = '';\r\n    if (defaultPrompt) {\r\n      fullPrompt = `${systemPrompt}\\n\\n${defaultPrompt}\\n\\nData to summarize:\\n${contentToSummarize}`;\r\n    } else {\r\n      fullPrompt = `${systemPrompt}\\n\\nPlease summarize the following form data:\\n\\n${contentToSummarize}`;\r\n    }\r\n\r\n    // Use IPLC_AI service binding\r\n    const iplcAI = (env as any).IPLC_AI;\r\n    if (!iplcAI || typeof iplcAI.fetch !== 'function') {\r\n      return new Response(JSON.stringify({\r\n        error: 'AI service not available',\r\n        details: 'IPLC_AI service binding is not configured'\r\n      }), {\r\n        status: 503,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    // Call the iplc-ai worker's /summary endpoint\r\n    const summaryResponse = await iplcAI.fetch('https://iplc-ai.worker/summary', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        content: fullPrompt,\r\n        maxWords: maxLength\r\n      })\r\n    });\r\n\r\n    if (!summaryResponse.ok) {\r\n      const error = await summaryResponse.text();\r\n      console.error('IPLC_AI summary error:', error);\r\n      throw new Error(`AI service error: ${error}`);\r\n    }\r\n\r\n    const { summary } = await summaryResponse.json();\r\n\r\n    if (!summary) {\r\n      throw new Error('Failed to generate summary');\r\n    }\r\n\r\n    return new Response(JSON.stringify({\r\n      summary: summary,\r\n      generatedAt: new Date().toISOString(),\r\n      sourceFields: selectedFields\r\n    }), {\r\n      status: 200,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error generating AI summary:', error);\r\n    return new Response(JSON.stringify({ \r\n      error: 'Failed to generate summary',\r\n      details: error instanceof Error ? error.message : 'Unknown error'\r\n    }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n};\r\n\r\n// OPTIONS handler is now handled by CORS middleware"],"names":[],"mappings":";;;;AAOO,MAAM,IAAA,GAAiB,OAAO,EAAE,OAAA,EAAS,QAAO,KAAM;AAC3D,EAAA,MAAM,GAAA,GAAO,OAAe,OAAA,CAAQ,GAAA;AAEpC,EAAA,IAAI;AAEF,IAAA,MAAM,IAAA,GAAO,MAAM,OAAA,CAAQ,IAAA,EAAK;AAUhC,IAAA,MAAM,EAAE,cAAA,EAAgB,SAAA,EAAW,aAAA,EAAc,GAAI,IAAA;AAErD,IAAA,IAAI,CAAC,kBAAkB,CAAC,KAAA,CAAM,QAAQ,cAAc,CAAA,IAAK,cAAA,CAAe,MAAA,KAAW,CAAA,EAAG;AACpF,MAAA,OAAO,IAAI,SAAS,IAAA,CAAK,SAAA,CAAU,EAAE,KAAA,EAAO,gCAAA,EAAkC,CAAA,EAAG;AAAA,QAC/E,MAAA,EAAQ,GAAA;AAAA,QACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,OAC/C,CAAA;AAAA,IACH;AAGA,IAAA,MAAM,KAAA,GAAe;AAAA,MACnB,IAAI,GAAA,CAAI,EAAA;AAAA,MACR,WAAW,GAAA,CAAI,SAAA;AAAA,MACf,cAAc,GAAA,CAAI,YAAA;AAAA,MAClB,YAAA,EAAc,GAAA,CAAI,YAAA,IAAgB,GAAA,CAAI,QAAA;AAAA,MACtC,SAAS,GAAA,CAAI;AAAA,KACf;AAGA,IAAA,MAAM,QAAA,GAAW,OAAA,CAAQ,OAAA,CAAQ,GAAA,CAAI,kBAAkB,CAAA,IAAK,SAAA;AAC5D,IAAA,MAAM,QAAA,GAAW,qBAAqB,QAAQ,CAAA,CAAA;AAC9C,IAAA,MAAM,eAAA,GAAkB,MAAM,cAAA,CAAe,QAAA,EAAU,KAAK,CAAA;AAE5D,IAAA,IAAI,CAAC,gBAAgB,OAAA,EAAS;AAC5B,MAAA,MAAM,UAAA,GAAa,KAAK,IAAA,CAAA,CAAM,eAAA,CAAgB,UAAU,IAAA,CAAK,GAAA,MAAS,GAAI,CAAA;AAC1E,MAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,QACjC,KAAA,EAAO,qBAAA;AAAA,QACP;AAAA,OACD,CAAA,EAAG;AAAA,QACF,MAAA,EAAQ,GAAA;AAAA,QACR,OAAA,EAAS;AAAA,UACP,cAAA,EAAgB,kBAAA;AAAA,UAChB,aAAA,EAAe,WAAW,QAAA;AAAS;AACrC,OACD,CAAA;AAAA,IACH;AAGA,IAAA,MAAM;AAAA,MACJ,aAAA,GAAgB,EAAA;AAAA,MAChB,SAAA,GAAY,GAAA;AAAA,MACZ,qBAAA,GAAwB,IAAA;AAAA,MACxB,iBAAA,GAAoB;AAAA,KACtB,GAAI,iBAAiB,EAAC;AAGtB,IAAA,MAAM,eAAyB,EAAC;AAEhC,IAAA,cAAA,CAAe,QAAQ,CAAA,OAAA,KAAW;AAChC,MAAA,MAAM,KAAA,GAAQ,UAAU,OAAO,CAAA;AAC/B,MAAA,IAAI,KAAA,KAAU,KAAA,CAAA,IAAa,KAAA,KAAU,IAAA,IAAQ,UAAU,EAAA,EAAI;AACzD,QAAA,IAAI,iBAAA,EAAmB;AAErB,UAAA,MAAM,QAAQ,OAAA,CAAQ,KAAA,CAAM,GAAG,CAAA,CAAE,CAAC,EAC/B,OAAA,CAAQ,UAAA,EAAY,KAAK,CAAA,CACzB,OAAA,CAAQ,MAAM,CAAC,GAAA,KAAgB,IAAI,WAAA,EAAa,EAChD,IAAA,EAAK;AACR,UAAA,YAAA,CAAa,IAAA,CAAK,CAAA,EAAG,KAAK,CAAA,EAAA,EAAK,KAAK,CAAA,CAAE,CAAA;AAAA,QACxC,CAAA,MAAO;AACL,UAAA,YAAA,CAAa,IAAA,CAAK,MAAA,CAAO,KAAK,CAAC,CAAA;AAAA,QACjC;AAAA,MACF;AAAA,IACF,CAAC,CAAA;AAED,IAAA,IAAI,YAAA,CAAa,WAAW,CAAA,EAAG;AAC7B,MAAA,OAAO,IAAI,SAAS,IAAA,CAAK,SAAA,CAAU,EAAE,KAAA,EAAO,yBAAA,EAA2B,CAAA,EAAG;AAAA,QACxE,MAAA,EAAQ,GAAA;AAAA,QACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,OAC/C,CAAA;AAAA,IACH;AAEA,IAAA,MAAM,kBAAA,GAAqB,YAAA,CAAa,IAAA,CAAK,IAAI,CAAA;AAGjD,IAAA,IAAI,YAAA,GAAe,8DAAA;AACnB,IAAA,IAAI,qBAAA,EAAuB;AACzB,MAAA,YAAA,IAAgB,sEAAA;AAAA,IAClB;AACA,IAAA,YAAA,IAAgB,wEAAwE,SAAS,CAAA,YAAA,CAAA;AAGjG,IAAA,IAAI,UAAA,GAAa,EAAA;AACjB,IAAA,IAAI,aAAA,EAAe;AACjB,MAAA,UAAA,GAAa,GAAG,YAAY;;AAAA,EAAO,aAAa;;AAAA;AAAA,EAA2B,kBAAkB,CAAA,CAAA;AAAA,IAC/F,CAAA,MAAO;AACL,MAAA,UAAA,GAAa,GAAG,YAAY;;AAAA;;AAAA,EAAoD,kBAAkB,CAAA,CAAA;AAAA,IACpG;AAGA,IAAA,MAAM,SAAU,GAAA,CAAY,OAAA;AAC5B,IAAA,IAAI,CAAC,MAAA,IAAU,OAAO,MAAA,CAAO,UAAU,UAAA,EAAY;AACjD,MAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,QACjC,KAAA,EAAO,0BAAA;AAAA,QACP,OAAA,EAAS;AAAA,OACV,CAAA,EAAG;AAAA,QACF,MAAA,EAAQ,GAAA;AAAA,QACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,OAC/C,CAAA;AAAA,IACH;AAGA,IAAA,MAAM,eAAA,GAAkB,MAAM,MAAA,CAAO,KAAA,CAAM,gCAAA,EAAkC;AAAA,MAC3E,MAAA,EAAQ,MAAA;AAAA,MACR,OAAA,EAAS;AAAA,QACP,cAAA,EAAgB;AAAA,OAClB;AAAA,MACA,IAAA,EAAM,KAAK,SAAA,CAAU;AAAA,QACnB,OAAA,EAAS,UAAA;AAAA,QACT,QAAA,EAAU;AAAA,OACX;AAAA,KACF,CAAA;AAED,IAAA,IAAI,CAAC,gBAAgB,EAAA,EAAI;AACvB,MAAA,MAAM,KAAA,GAAQ,MAAM,eAAA,CAAgB,IAAA,EAAK;AACzC,MAAA,OAAA,CAAQ,KAAA,CAAM,0BAA0B,KAAK,CAAA;AAC7C,MAAA,MAAM,IAAI,KAAA,CAAM,CAAA,kBAAA,EAAqB,KAAK,CAAA,CAAE,CAAA;AAAA,IAC9C;AAEA,IAAA,MAAM,EAAE,OAAA,EAAQ,GAAI,MAAM,gBAAgB,IAAA,EAAK;AAE/C,IAAA,IAAI,CAAC,OAAA,EAAS;AACZ,MAAA,MAAM,IAAI,MAAM,4BAA4B,CAAA;AAAA,IAC9C;AAEA,IAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,MACjC,OAAA;AAAA,MACA,WAAA,EAAA,iBAAa,IAAI,IAAA,EAAK,EAAE,WAAA,EAAY;AAAA,MACpC,YAAA,EAAc;AAAA,KACf,CAAA,EAAG;AAAA,MACF,MAAA,EAAQ,GAAA;AAAA,MACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,KAC/C,CAAA;AAAA,EAEH,SAAS,KAAA,EAAO;AACd,IAAA,OAAA,CAAQ,KAAA,CAAM,gCAAgC,KAAK,CAAA;AACnD,IAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,MACjC,KAAA,EAAO,4BAAA;AAAA,MACP,OAAA,EAAS,KAAA,YAAiB,KAAA,GAAQ,KAAA,CAAM,OAAA,GAAU;AAAA,KACnD,CAAA,EAAG;AAAA,MACF,MAAA,EAAQ,GAAA;AAAA,MACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,KAC/C,CAAA;AAAA,EACH;AACF,CAAA;;;;;;;;;;;"}