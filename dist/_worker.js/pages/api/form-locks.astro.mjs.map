{"version":3,"file":"form-locks.astro.mjs","sources":["../../../../src/pages/api/form-locks.ts"],"sourcesContent":["import type { APIRoute } from 'astro';\r\nimport { z } from 'zod';\r\n\r\nconst LockRequestSchema = z.object({\r\n  formId: z.string(),\r\n  userId: z.string(),\r\n  userName: z.string(),\r\n  forceTakeover: z.boolean().optional().default(false)\r\n});\r\n\r\nconst UnlockRequestSchema = z.object({\r\n  formId: z.string(),\r\n  lockHash: z.string()\r\n});\r\n\r\n// Acquire or refresh a form lock\r\nexport const POST: APIRoute = async ({ request, locals }) => {\r\n  const env = (locals as any).runtime?.env;\r\n  \r\n  // Handle test environment\r\n  if (!env) {\r\n    return new Response(JSON.stringify({\r\n      success: true,\r\n      lockHash: 'test-lock-hash',\r\n      message: 'Test environment - lock simulated'\r\n    }), {\r\n      status: 200,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n  \r\n  try {\r\n    const body = await request.json();\r\n    const validation = LockRequestSchema.safeParse(body);\r\n    \r\n    if (!validation.success) {\r\n      return new Response(JSON.stringify({\r\n        error: 'Invalid request data',\r\n        details: validation.error.issues\r\n      }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    const { formId, userId, userName, forceTakeover } = validation.data;\r\n    const lockHash = `${userId}_${Date.now()}`;\r\n    const now = new Date().toISOString();\r\n    \r\n    // Check if form is already locked\r\n    const existingLock = await env.DB.prepare(\r\n      'SELECT user_name, lock_hash, last_saved FROM form_templates WHERE id = ?'\r\n    ).bind(formId).first();\r\n    \r\n    if (existingLock && existingLock.lock_hash) {\r\n      // Check if lock is stale (older than 5 minutes)\r\n      const lastSaved = new Date(existingLock.last_saved as string);\r\n      const fiveMinutesAgo = new Date(Date.now() - 5 * 60 * 1000);\r\n      \r\n      if (lastSaved > fiveMinutesAgo && !forceTakeover) {\r\n        return new Response(JSON.stringify({\r\n          error: 'Form is locked',\r\n          lockedBy: existingLock.user_name,\r\n          canTakeover: true\r\n        }), {\r\n          status: 423, // Locked\r\n          headers: { 'Content-Type': 'application/json' }\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Acquire or takeover lock\r\n    await env.DB.prepare(\r\n      'UPDATE form_templates SET user_name = ?, lock_hash = ?, last_saved = ? WHERE id = ?'\r\n    ).bind(userName, lockHash, now, formId).run();\r\n    \r\n    return new Response(JSON.stringify({\r\n      success: true,\r\n      lockHash,\r\n      message: forceTakeover ? 'Lock taken over' : 'Lock acquired'\r\n    }), {\r\n      status: 200,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Error managing form lock:', error);\r\n    return new Response(JSON.stringify({\r\n      error: 'Failed to manage form lock',\r\n      details: error instanceof Error ? error.message : 'Unknown error'\r\n    }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n};\r\n\r\n// Release a form lock\r\nexport const DELETE: APIRoute = async ({ request, locals }) => {\r\n  const env = (locals as any).runtime?.env;\r\n  \r\n  // Handle test environment\r\n  if (!env) {\r\n    return new Response(JSON.stringify({\r\n      success: true,\r\n      message: 'Test environment - lock released'\r\n    }), {\r\n      status: 200,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n  \r\n  try {\r\n    const body = await request.json();\r\n    const validation = UnlockRequestSchema.safeParse(body);\r\n    \r\n    if (!validation.success) {\r\n      return new Response(JSON.stringify({\r\n        error: 'Invalid request data',\r\n        details: validation.error.issues\r\n      }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    const { formId, lockHash } = validation.data;\r\n    \r\n    // Only unlock if the lock hash matches\r\n    const result = await env.DB.prepare(\r\n      'UPDATE form_templates SET lock_hash = NULL, user_name = NULL WHERE id = ? AND lock_hash = ?'\r\n    ).bind(formId, lockHash).run();\r\n    \r\n    if (result.meta.changes === 0) {\r\n      return new Response(JSON.stringify({\r\n        error: 'Invalid lock hash or form not found'\r\n      }), {\r\n        status: 403,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    return new Response(JSON.stringify({\r\n      success: true,\r\n      message: 'Lock released'\r\n    }), {\r\n      status: 200,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Error releasing form lock:', error);\r\n    return new Response(JSON.stringify({\r\n      error: 'Failed to release form lock',\r\n      details: error instanceof Error ? error.message : 'Unknown error'\r\n    }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n};\r\n\r\n// Check lock status\r\nexport const GET: APIRoute = async ({ request, locals }) => {\r\n  const env = (locals as any).runtime?.env;\r\n  \r\n  // Handle test environment\r\n  if (!env) {\r\n    return new Response(JSON.stringify({\r\n      locked: false\r\n    }), {\r\n      status: 200,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n  \r\n  try {\r\n    const url = new URL(request.url);\r\n    const formId = url.searchParams.get('formId');\r\n    \r\n    if (!formId) {\r\n      return new Response(JSON.stringify({\r\n        error: 'formId parameter is required'\r\n      }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    const lock = await env.DB.prepare(\r\n      'SELECT user_name, lock_hash, last_saved FROM form_templates WHERE id = ?'\r\n    ).bind(formId).first();\r\n    \r\n    if (!lock || !lock.lock_hash) {\r\n      return new Response(JSON.stringify({\r\n        locked: false\r\n      }), {\r\n        status: 200,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    // Check if lock is stale\r\n    const lastSaved = new Date(lock.last_saved as string);\r\n    const fiveMinutesAgo = new Date(Date.now() - 5 * 60 * 1000);\r\n    const isStale = lastSaved <= fiveMinutesAgo;\r\n    \r\n    return new Response(JSON.stringify({\r\n      locked: true,\r\n      lockedBy: lock.user_name,\r\n      lastActivity: lock.last_saved,\r\n      isStale,\r\n      canTakeover: isStale\r\n    }), {\r\n      status: 200,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Error checking form lock:', error);\r\n    return new Response(JSON.stringify({\r\n      error: 'Failed to check form lock',\r\n      details: error instanceof Error ? error.message : 'Unknown error'\r\n    }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n};"],"names":["z.object","z.string","z.boolean"],"mappings":";;;;AAGA,MAAM,iBAAA,GAAoBA,MAAE,CAAO;AAAA,EACjC,MAAA,EAAQC,MAAE,EAAO;AAAA,EACjB,MAAA,EAAQA,MAAE,EAAO;AAAA,EACjB,QAAA,EAAUA,MAAE,EAAO;AAAA,EACnB,eAAeC,OAAE,GAAU,QAAA,EAAS,CAAE,QAAQ,KAAK;AACrD,CAAC,CAAA;AAED,MAAM,mBAAA,GAAsBF,MAAE,CAAO;AAAA,EACnC,MAAA,EAAQC,MAAE,EAAO;AAAA,EACjB,QAAA,EAAUA,MAAE;AACd,CAAC,CAAA;AAGM,MAAM,IAAA,GAAiB,OAAO,EAAE,OAAA,EAAS,QAAO,KAAM;AAC3D,EAAA,MAAM,GAAA,GAAO,OAAe,OAAA,EAAS,GAAA;AAGrC,EAAA,IAAI,CAAC,GAAA,EAAK;AACR,IAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,MACjC,OAAA,EAAS,IAAA;AAAA,MACT,QAAA,EAAU,gBAAA;AAAA,MACV,OAAA,EAAS;AAAA,KACV,CAAA,EAAG;AAAA,MACF,MAAA,EAAQ,GAAA;AAAA,MACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,KAC/C,CAAA;AAAA,EACH;AAEA,EAAA,IAAI;AACF,IAAA,MAAM,IAAA,GAAO,MAAM,OAAA,CAAQ,IAAA,EAAK;AAChC,IAAA,MAAM,UAAA,GAAa,iBAAA,CAAkB,SAAA,CAAU,IAAI,CAAA;AAEnD,IAAA,IAAI,CAAC,WAAW,OAAA,EAAS;AACvB,MAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,QACjC,KAAA,EAAO,sBAAA;AAAA,QACP,OAAA,EAAS,WAAW,KAAA,CAAM;AAAA,OAC3B,CAAA,EAAG;AAAA,QACF,MAAA,EAAQ,GAAA;AAAA,QACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,OAC/C,CAAA;AAAA,IACH;AAEA,IAAA,MAAM,EAAE,MAAA,EAAQ,MAAA,EAAQ,QAAA,EAAU,aAAA,KAAkB,UAAA,CAAW,IAAA;AAC/D,IAAA,MAAM,WAAW,CAAA,EAAG,MAAM,CAAA,CAAA,EAAI,IAAA,CAAK,KAAK,CAAA,CAAA;AACxC,IAAA,MAAM,GAAA,GAAA,iBAAM,IAAI,IAAA,EAAK,EAAE,WAAA,EAAY;AAGnC,IAAA,MAAM,YAAA,GAAe,MAAM,GAAA,CAAI,EAAA,CAAG,OAAA;AAAA,MAChC;AAAA,KACF,CAAE,IAAA,CAAK,MAAM,CAAA,CAAE,KAAA,EAAM;AAErB,IAAA,IAAI,YAAA,IAAgB,aAAa,SAAA,EAAW;AAE1C,MAAA,MAAM,SAAA,GAAY,IAAI,IAAA,CAAK,YAAA,CAAa,UAAoB,CAAA;AAC5D,MAAA,MAAM,cAAA,GAAiB,IAAI,IAAA,CAAK,IAAA,CAAK,KAAI,GAAI,CAAA,GAAI,KAAK,GAAI,CAAA;AAE1D,MAAA,IAAI,SAAA,GAAY,cAAA,IAAkB,CAAC,aAAA,EAAe;AAChD,QAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,UACjC,KAAA,EAAO,gBAAA;AAAA,UACP,UAAU,YAAA,CAAa,SAAA;AAAA,UACvB,WAAA,EAAa;AAAA,SACd,CAAA,EAAG;AAAA,UACF,MAAA,EAAQ,GAAA;AAAA;AAAA,UACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,SAC/C,CAAA;AAAA,MACH;AAAA,IACF;AAGA,IAAA,MAAM,IAAI,EAAA,CAAG,OAAA;AAAA,MACX;AAAA,MACA,IAAA,CAAK,QAAA,EAAU,UAAU,GAAA,EAAK,MAAM,EAAE,GAAA,EAAI;AAE5C,IAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,MACjC,OAAA,EAAS,IAAA;AAAA,MACT,QAAA;AAAA,MACA,OAAA,EAAS,gBAAgB,iBAAA,GAAoB;AAAA,KAC9C,CAAA,EAAG;AAAA,MACF,MAAA,EAAQ,GAAA;AAAA,MACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,KAC/C,CAAA;AAAA,EAEH,SAAS,KAAA,EAAO;AACd,IAAA,OAAA,CAAQ,KAAA,CAAM,6BAA6B,KAAK,CAAA;AAChD,IAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,MACjC,KAAA,EAAO,4BAAA;AAAA,MACP,OAAA,EAAS,KAAA,YAAiB,KAAA,GAAQ,KAAA,CAAM,OAAA,GAAU;AAAA,KACnD,CAAA,EAAG;AAAA,MACF,MAAA,EAAQ,GAAA;AAAA,MACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,KAC/C,CAAA;AAAA,EACH;AACF,CAAA;AAGO,MAAM,MAAA,GAAmB,OAAO,EAAE,OAAA,EAAS,QAAO,KAAM;AAC7D,EAAA,MAAM,GAAA,GAAO,OAAe,OAAA,EAAS,GAAA;AAGrC,EAAA,IAAI,CAAC,GAAA,EAAK;AACR,IAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,MACjC,OAAA,EAAS,IAAA;AAAA,MACT,OAAA,EAAS;AAAA,KACV,CAAA,EAAG;AAAA,MACF,MAAA,EAAQ,GAAA;AAAA,MACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,KAC/C,CAAA;AAAA,EACH;AAEA,EAAA,IAAI;AACF,IAAA,MAAM,IAAA,GAAO,MAAM,OAAA,CAAQ,IAAA,EAAK;AAChC,IAAA,MAAM,UAAA,GAAa,mBAAA,CAAoB,SAAA,CAAU,IAAI,CAAA;AAErD,IAAA,IAAI,CAAC,WAAW,OAAA,EAAS;AACvB,MAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,QACjC,KAAA,EAAO,sBAAA;AAAA,QACP,OAAA,EAAS,WAAW,KAAA,CAAM;AAAA,OAC3B,CAAA,EAAG;AAAA,QACF,MAAA,EAAQ,GAAA;AAAA,QACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,OAC/C,CAAA;AAAA,IACH;AAEA,IAAA,MAAM,EAAE,MAAA,EAAQ,QAAA,EAAS,GAAI,UAAA,CAAW,IAAA;AAGxC,IAAA,MAAM,MAAA,GAAS,MAAM,GAAA,CAAI,EAAA,CAAG,OAAA;AAAA,MAC1B;AAAA,KACF,CAAE,IAAA,CAAK,MAAA,EAAQ,QAAQ,EAAE,GAAA,EAAI;AAE7B,IAAA,IAAI,MAAA,CAAO,IAAA,CAAK,OAAA,KAAY,CAAA,EAAG;AAC7B,MAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,QACjC,KAAA,EAAO;AAAA,OACR,CAAA,EAAG;AAAA,QACF,MAAA,EAAQ,GAAA;AAAA,QACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,OAC/C,CAAA;AAAA,IACH;AAEA,IAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,MACjC,OAAA,EAAS,IAAA;AAAA,MACT,OAAA,EAAS;AAAA,KACV,CAAA,EAAG;AAAA,MACF,MAAA,EAAQ,GAAA;AAAA,MACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,KAC/C,CAAA;AAAA,EAEH,SAAS,KAAA,EAAO;AACd,IAAA,OAAA,CAAQ,KAAA,CAAM,8BAA8B,KAAK,CAAA;AACjD,IAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,MACjC,KAAA,EAAO,6BAAA;AAAA,MACP,OAAA,EAAS,KAAA,YAAiB,KAAA,GAAQ,KAAA,CAAM,OAAA,GAAU;AAAA,KACnD,CAAA,EAAG;AAAA,MACF,MAAA,EAAQ,GAAA;AAAA,MACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,KAC/C,CAAA;AAAA,EACH;AACF,CAAA;AAGO,MAAM,GAAA,GAAgB,OAAO,EAAE,OAAA,EAAS,QAAO,KAAM;AAC1D,EAAA,MAAM,GAAA,GAAO,OAAe,OAAA,EAAS,GAAA;AAGrC,EAAA,IAAI,CAAC,GAAA,EAAK;AACR,IAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,MACjC,MAAA,EAAQ;AAAA,KACT,CAAA,EAAG;AAAA,MACF,MAAA,EAAQ,GAAA;AAAA,MACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,KAC/C,CAAA;AAAA,EACH;AAEA,EAAA,IAAI;AACF,IAAA,MAAM,GAAA,GAAM,IAAI,GAAA,CAAI,OAAA,CAAQ,GAAG,CAAA;AAC/B,IAAA,MAAM,MAAA,GAAS,GAAA,CAAI,YAAA,CAAa,GAAA,CAAI,QAAQ,CAAA;AAE5C,IAAA,IAAI,CAAC,MAAA,EAAQ;AACX,MAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,QACjC,KAAA,EAAO;AAAA,OACR,CAAA,EAAG;AAAA,QACF,MAAA,EAAQ,GAAA;AAAA,QACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,OAC/C,CAAA;AAAA,IACH;AAEA,IAAA,MAAM,IAAA,GAAO,MAAM,GAAA,CAAI,EAAA,CAAG,OAAA;AAAA,MACxB;AAAA,KACF,CAAE,IAAA,CAAK,MAAM,CAAA,CAAE,KAAA,EAAM;AAErB,IAAA,IAAI,CAAC,IAAA,IAAQ,CAAC,IAAA,CAAK,SAAA,EAAW;AAC5B,MAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,QACjC,MAAA,EAAQ;AAAA,OACT,CAAA,EAAG;AAAA,QACF,MAAA,EAAQ,GAAA;AAAA,QACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,OAC/C,CAAA;AAAA,IACH;AAGA,IAAA,MAAM,SAAA,GAAY,IAAI,IAAA,CAAK,IAAA,CAAK,UAAoB,CAAA;AACpD,IAAA,MAAM,cAAA,GAAiB,IAAI,IAAA,CAAK,IAAA,CAAK,KAAI,GAAI,CAAA,GAAI,KAAK,GAAI,CAAA;AAC1D,IAAA,MAAM,UAAU,SAAA,IAAa,cAAA;AAE7B,IAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,MACjC,MAAA,EAAQ,IAAA;AAAA,MACR,UAAU,IAAA,CAAK,SAAA;AAAA,MACf,cAAc,IAAA,CAAK,UAAA;AAAA,MACnB,OAAA;AAAA,MACA,WAAA,EAAa;AAAA,KACd,CAAA,EAAG;AAAA,MACF,MAAA,EAAQ,GAAA;AAAA,MACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,KAC/C,CAAA;AAAA,EAEH,SAAS,KAAA,EAAO;AACd,IAAA,OAAA,CAAQ,KAAA,CAAM,6BAA6B,KAAK,CAAA;AAChD,IAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,MACjC,KAAA,EAAO,2BAAA;AAAA,MACP,OAAA,EAAS,KAAA,YAAiB,KAAA,GAAQ,KAAA,CAAM,OAAA,GAAU;AAAA,KACnD,CAAA,EAAG;AAAA,MACF,MAAA,EAAQ,GAAA;AAAA,MACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,KAC/C,CAAA;AAAA,EACH;AACF,CAAA;;;;;;;;;;;;;"}