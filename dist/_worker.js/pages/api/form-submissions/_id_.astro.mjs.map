{"version":3,"file":"_id_.astro.mjs","sources":["../../../../../src/pages/api/form-submissions/[id].ts"],"sourcesContent":["import { FormSubmissionService } from \"@/lib/services/form_submission\";\r\nimport { authenticate, authorize } from \"@/lib/middleware/rbac-middleware\";\r\nimport { PERMISSIONS } from \"@/lib/utils/rbac\";\r\nimport { UpdateFormSubmissionRequest, validateRequest } from \"@/lib/schemas/api-validation\";\r\nimport { withPerformanceMonitoring } from \"@/lib/utils/performance-wrapper\";\r\nimport type { APIContext, APIRoute } from \"astro\";\r\n\r\nconst getHandler: APIRoute = async (context: APIContext) => {\r\n  const { id } = context.params;\r\n  const { DB } = (context.locals as any).runtime.env;\r\n\r\n  if (!id) {\r\n    return Response.json({ message: \"Form submission ID is required\" }, { status: 400 });\r\n  }\r\n\r\n  // Authenticate request\r\n  const authResult = await authenticate(context);\r\n  if (authResult instanceof Response) return authResult;\r\n\r\n  // Authorize request\r\n  const authzMiddleware = authorize(PERMISSIONS.READ, 'form_submissions');\r\n  const authzResult = await authzMiddleware(authResult);\r\n  if (authzResult instanceof Response) return authzResult;\r\n\r\n  const formSubmissionService = new FormSubmissionService(DB);\r\n  const submission = await formSubmissionService.getById(parseInt(id, 10));\r\n\r\n  if (!submission) {\r\n    return Response.json({ message: \"Form submission not found\" }, { status: 404 });\r\n  }\r\n\r\n  return Response.json({ submission });\r\n}\r\n\r\nconst putHandler: APIRoute = async (context: APIContext) => {\r\n  const { id } = context.params;\r\n  const { DB } = (context.locals as any).runtime.env;\r\n\r\n  if (!id) {\r\n    return Response.json({ message: \"Form submission ID is required\" }, { status: 400 });\r\n  }\r\n\r\n  // Authenticate request\r\n  const authResult = await authenticate(context);\r\n  if (authResult instanceof Response) return authResult;\r\n\r\n  // Authorize request\r\n  const authzMiddleware = authorize(PERMISSIONS.UPDATE, 'form_submissions');\r\n  const authzResult = await authzMiddleware(authResult);\r\n  if (authzResult instanceof Response) return authzResult;\r\n\r\n  const formSubmissionService = new FormSubmissionService(DB);\r\n\r\n  try {\r\n    const body = await context.request.json();\r\n    \r\n    // Validate request body using Zod schema\r\n    const validationResult = validateRequest(UpdateFormSubmissionRequest, body);\r\n    \r\n    if (!validationResult.success) {\r\n      return Response.json(\r\n        {\r\n          message: \"Invalid request data\",\r\n          errors: validationResult.errors\r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const result = await formSubmissionService.update(parseInt(id, 10), validationResult.data as {\r\n      responses?: object;\r\n      status?: string;\r\n      completion_time_seconds?: number;\r\n      metadata?: object;\r\n    });\r\n    \r\n    if (!result.success) {\r\n      return Response.json({ message: \"Form submission not found\" }, { status: 404 });\r\n    }\r\n\r\n    // Get the updated submission to return\r\n    const updatedSubmission = await formSubmissionService.getById(parseInt(id, 10));\r\n\r\n    return Response.json({\r\n      message: \"Form submission updated successfully\",\r\n      submission: updatedSubmission,\r\n      calculated_score: result.calculated_score,\r\n      success: true,\r\n    });\r\n  } catch (error) {\r\n    if (error instanceof Error && error.message === \"Submission not found\") {\r\n      return Response.json({ message: \"Form submission not found\" }, { status: 404 });\r\n    }\r\n    \r\n    return Response.json(\r\n      {\r\n        message: error instanceof Error ? error.message : \"Failed to update form submission\",\r\n        success: false,\r\n      },\r\n      { status: 500 },\r\n    );\r\n  }\r\n}\r\n\r\nconst deleteHandler: APIRoute = async (context: APIContext) => {\r\n  const { id } = context.params;\r\n  const { DB } = (context.locals as any).runtime.env;\r\n\r\n  if (!id) {\r\n    return Response.json({ message: \"Form submission ID is required\" }, { status: 400 });\r\n  }\r\n\r\n  // Authenticate request\r\n  const authResult = await authenticate(context);\r\n  if (authResult instanceof Response) return authResult;\r\n\r\n  // Authorize request\r\n  const authzMiddleware = authorize(PERMISSIONS.DELETE, 'form_submissions');\r\n  const authzResult = await authzMiddleware(authResult);\r\n  if (authzResult instanceof Response) return authzResult;\r\n\r\n  const formSubmissionService = new FormSubmissionService(DB);\r\n\r\n  try {\r\n    // Mark submission as deleted instead of hard delete for audit purposes\r\n    const result = await formSubmissionService.updateStatus(parseInt(id, 10), 'deleted');\r\n    \r\n    if (!result.success) {\r\n      return Response.json({ message: \"Form submission not found\" }, { status: 404 });\r\n    }\r\n\r\n    return Response.json({\r\n      message: \"Form submission deleted successfully\",\r\n      success: true,\r\n    });\r\n  } catch (error) {\r\n    if (error instanceof Error && error.message === \"Failed to update submission status\") {\r\n      return Response.json({ message: \"Form submission not found\" }, { status: 404 });\r\n    }\r\n    \r\n    return Response.json(\r\n      {\r\n        message: error instanceof Error ? error.message : \"Failed to delete form submission\",\r\n        success: false,\r\n      },\r\n      { status: 500 },\r\n    );\r\n  }\r\n}\r\n\r\nexport const GET = withPerformanceMonitoring(getHandler, 'form-submissions:get');\r\nexport const PUT = withPerformanceMonitoring(putHandler, 'form-submissions:update');\r\nexport const DELETE = withPerformanceMonitoring(deleteHandler, 'form-submissions:delete');"],"names":[],"mappings":"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"}