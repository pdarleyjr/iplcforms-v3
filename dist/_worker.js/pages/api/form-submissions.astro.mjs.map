{"version":3,"file":"form-submissions.astro.mjs","sources":["../../../../src/pages/api/form-submissions.ts"],"sourcesContent":["import type { APIContext, APIRoute } from \"astro\";\r\nimport { FormSubmissionService } from \"@/lib/services/form_submission\";\r\nimport { FormTemplateService } from \"@/lib/services/form_template\";\r\nimport { authenticate, authorize } from \"@/lib/middleware/rbac-middleware\";\r\nimport { PERMISSIONS } from \"@/lib/utils/rbac\";\r\nimport {\r\n  FormSubmissionFiltersSchema,\r\n  CreateFormSubmissionRequest,\r\n  validateRequest,\r\n  validateQueryParams\r\n} from \"@/lib/schemas/api-validation\";\r\nimport { withPerformanceMonitoring } from \"@/lib/utils/performance-wrapper\";\r\nimport { sendSlackNotification } from \"./integrations/slack\";\r\nimport { sendEmail } from \"./integrations/email\";\r\nimport { sendWebhook } from \"./integrations/webhook\";\r\n\r\nconst getHandler: APIRoute = async (context: APIContext) => {\r\n  const { DB } = (context.locals as any).runtime.env;\r\n  \r\n  // Authenticate request\r\n  const authResult = await authenticate(context);\r\n  if (authResult instanceof Response) return authResult;\r\n\r\n  // Authorize request\r\n  const authzMiddleware = authorize(PERMISSIONS.READ, 'form_submissions');\r\n  const authzResult = await authzMiddleware(authResult);\r\n  if (authzResult instanceof Response) return authzResult;\r\n\r\n  const formSubmissionService = new FormSubmissionService(DB);\r\n  \r\n  try {\r\n    // Validate query parameters using Zod schema\r\n    const url = new URL(context.request.url);\r\n    const filtersValidation = validateQueryParams(url, FormSubmissionFiltersSchema);\r\n    \r\n    if (!filtersValidation.success) {\r\n      return Response.json(\r\n        {\r\n          message: \"Invalid query parameters\",\r\n          errors: filtersValidation.errors\r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const filters = filtersValidation.data;\r\n    const submissions = await formSubmissionService.getAll(filters as any);\r\n    return Response.json({ submissions });\r\n  } catch (error) {\r\n    console.error('Error loading form submissions:', error);\r\n    return Response.json(\r\n      { message: \"Couldn't load form submissions\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n};\r\n\r\nconst postHandler: APIRoute = async (context: APIContext) => {\r\n  const { DB, CACHE_KV } = (context.locals as any).runtime.env;\r\n  \r\n  // Authenticate request\r\n  const authResult = await authenticate(context);\r\n  if (authResult instanceof Response) return authResult;\r\n\r\n  // Authorize request\r\n  const authzMiddleware = authorize(PERMISSIONS.CREATE, 'form_submissions');\r\n  const authzResult = await authzMiddleware(authResult);\r\n  if (authzResult instanceof Response) return authzResult;\r\n\r\n  const formSubmissionService = new FormSubmissionService(DB);\r\n  const formTemplateService = new FormTemplateService(DB);\r\n  \r\n  try {\r\n    const body = await context.request.json();\r\n    \r\n    // Validate request body using Zod schema\r\n    const validation = validateRequest(CreateFormSubmissionRequest, body);\r\n    \r\n    if (!validation.success) {\r\n      return Response.json(\r\n        {\r\n          message: \"Invalid request data\",\r\n          errors: validation.errors\r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Transform validated data to match service interface\r\n    const submissionData = {\r\n      template_id: validation.data.template_id,\r\n      patient_id: validation.data.user_id ? parseInt(validation.data.user_id) : undefined,\r\n      responses: validation.data.form_data,\r\n      status: validation.data.status,\r\n      completion_time_seconds: undefined,\r\n      submitted_by: Number(authResult.locals.customerId),\r\n      metadata: validation.data.metadata\r\n    };\r\n\r\n    const result = await formSubmissionService.create(submissionData);\r\n    \r\n    if (result.success) {\r\n      // Get form template details for notifications\r\n      const template = await formTemplateService.getById(validation.data.template_id);\r\n      const formTitle = template?.title || 'Untitled Form';\r\n      \r\n      // Trigger notifications and exports in the background\r\n      const notificationPromises: Promise<any>[] = [];\r\n      \r\n      // Check if Slack is configured and send notification\r\n      const slackConfig = await CACHE_KV.get('integration:slack:config');\r\n      if (slackConfig) {\r\n        notificationPromises.push(\r\n          sendSlackNotification(CACHE_KV, formTitle, result.submissionId, validation.data.form_data)\r\n            .catch((err: any) => console.error('Slack notification failed:', err))\r\n        );\r\n      }\r\n      \r\n      // Check if email is configured and send notification\r\n      const emailConfig = await CACHE_KV.get('integration:email:config');\r\n      if (emailConfig) {\r\n        notificationPromises.push(\r\n          sendEmail(CACHE_KV, formTitle, result.submissionId.toString(), validation.data.form_data)\r\n            .catch((err: any) => console.error('Email notification failed:', err))\r\n        );\r\n      }\r\n      \r\n      // Check if webhook is configured and send notification\r\n      const webhookConfig = await CACHE_KV.get('integration:webhook:config');\r\n      if (webhookConfig) {\r\n        notificationPromises.push(\r\n          sendWebhook(CACHE_KV, formTitle, result.submissionId, validation.data.form_data)\r\n            .catch((err: any) => console.error('Webhook notification failed:', err))\r\n        );\r\n      }\r\n      \r\n      // Check if Nextcloud is configured and export data\r\n      const nextcloudConfig = await CACHE_KV.get('integration:nextcloud:config');\r\n      if (nextcloudConfig) {\r\n        const exportUrl = new URL('/api/export/nextcloud', context.url);\r\n        notificationPromises.push(\r\n          fetch(exportUrl, {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              // Forward auth headers for internal API call\r\n              'Authorization': context.request.headers.get('Authorization') || ''\r\n            },\r\n            body: JSON.stringify({\r\n              formTitle,\r\n              submissionId: result.submissionId,\r\n              data: validation.data.form_data,\r\n              format: 'json'\r\n            })\r\n          })\r\n          .then(res => res.ok ? res.json() : Promise.reject('Nextcloud export failed'))\r\n          .catch((err: any) => console.error('Nextcloud export failed:', err))\r\n        );\r\n      }\r\n      \r\n      // Execute all notifications in parallel without blocking the response\r\n      Promise.all(notificationPromises).catch((err: any) =>\r\n        console.error('Some notifications failed:', err)\r\n      );\r\n      \r\n      return Response.json({\r\n        message: \"Form submission created successfully\",\r\n        submission_id: result.submissionId,\r\n        calculated_score: result.calculated_score\r\n      }, { status: 201 });\r\n    } else {\r\n      return Response.json(\r\n        { message: \"Failed to create form submission\" },\r\n        { status: 500 }\r\n      );\r\n    }\r\n  } catch (error) {\r\n    console.error('Error creating form submission:', error);\r\n    return Response.json(\r\n      { message: \"Couldn't create form submission\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n};\r\n\r\nexport const GET = withPerformanceMonitoring(getHandler, 'form-submissions:list');\r\nexport const POST = withPerformanceMonitoring(postHandler, 'form-submissions:create');"],"names":[],"mappings":"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"}