{"version":3,"file":"forms.astro.mjs","sources":["../../../../../src/pages/api/analytics/forms.ts"],"sourcesContent":["import { FormAnalyticsService } from \"@/lib/services/form_analytics\";\r\nimport type { APIRoute, APIContext } from \"astro\";\r\nimport { withPerformanceMonitoring } from \"@/lib/utils/performance-wrapper\";\r\nimport { authenticate, authorize } from \"@/lib/middleware/rbac-middleware\";\r\nimport { PERMISSIONS } from \"@/lib/utils/rbac\";\r\n\r\nconst getHandler: APIRoute = async (context: APIContext) => {\r\n  const { DB } = (context.locals as any).runtime.env;\r\n\r\n  // Authenticate request\r\n  const authResult = await authenticate(context);\r\n  if (authResult instanceof Response) return authResult;\r\n\r\n  // Authorize request - analytics requires READ permission on forms\r\n  const authzMiddleware = authorize(PERMISSIONS.READ, 'forms');\r\n  const authzResult = await authzMiddleware(authResult);\r\n  if (authzResult instanceof Response) return authzResult;\r\n\r\n  const formAnalyticsService = new FormAnalyticsService(DB);\r\n  const url = new URL(context.request.url);\r\n\r\n  try {\r\n    // Template-specific analytics\r\n    const templateId = url.searchParams.get('template_id');\r\n    if (templateId) {\r\n      const templateIdNum = parseInt(templateId, 10);\r\n      \r\n      // Time series analytics\r\n      const timeSeriesDays = url.searchParams.get('time_series');\r\n      if (timeSeriesDays) {\r\n        const days = parseInt(timeSeriesDays, 10);\r\n        const timeSeriesData = await formAnalyticsService.getTimeSeriesAnalytics(templateIdNum, days);\r\n        return Response.json({ \r\n          timeSeriesData,\r\n          templateId: templateIdNum,\r\n          days \r\n        });\r\n      }\r\n\r\n      // Export analytics report\r\n      const exportFormat = url.searchParams.get('export') as 'json' | 'csv' | null;\r\n      if (exportFormat) {\r\n        const reportData = await formAnalyticsService.exportAnalyticsReport(templateIdNum, exportFormat);\r\n        \r\n        if (exportFormat === 'csv') {\r\n          return new Response(reportData, {\r\n            headers: {\r\n              'Content-Type': 'text/csv',\r\n              'Content-Disposition': `attachment; filename=\"form-analytics-${templateIdNum}.csv\"`\r\n            }\r\n          });\r\n        }\r\n        \r\n        return new Response(reportData, {\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'Content-Disposition': `attachment; filename=\"form-analytics-${templateIdNum}.json\"`\r\n          }\r\n        });\r\n      }\r\n\r\n      // Basic form analytics\r\n      const analytics = await formAnalyticsService.getFormAnalytics(templateIdNum);\r\n      return Response.json({ analytics });\r\n    }\r\n\r\n    // Submission-specific analytics\r\n    const submissionId = url.searchParams.get('submission_id');\r\n    if (submissionId) {\r\n      const submissionIdNum = parseInt(submissionId, 10);\r\n      const submissionAnalytics = await formAnalyticsService.getSubmissionAnalytics(submissionIdNum);\r\n      \r\n      if (!submissionAnalytics) {\r\n        return Response.json({ message: \"Submission not found\" }, { status: 404 });\r\n      }\r\n      \r\n      return Response.json({ submissionAnalytics });\r\n    }\r\n\r\n    // Form comparison analytics\r\n    const compareParam = url.searchParams.get('compare');\r\n    if (compareParam) {\r\n      const templateIds = compareParam.split(',').map(id => parseInt(id.trim(), 10)).filter(id => !isNaN(id));\r\n      \r\n      if (templateIds.length === 0) {\r\n        return Response.json({ message: \"Invalid template IDs for comparison\" }, { status: 400 });\r\n      }\r\n      \r\n      const comparisonData = await formAnalyticsService.getFormComparisonAnalytics(templateIds);\r\n      return Response.json({ \r\n        comparison: comparisonData,\r\n        templateIds \r\n      });\r\n    }\r\n\r\n    // Clinical insights\r\n    const clinicalInsights = url.searchParams.get('clinical_insights');\r\n    if (clinicalInsights === 'true') {\r\n      const insights = await formAnalyticsService.getClinicalInsights();\r\n      return Response.json({ clinicalInsights: insights });\r\n    }\r\n\r\n    // No specific analytics requested - return available endpoints\r\n    return Response.json({\r\n      message: \"Form Analytics API\",\r\n      availableEndpoints: {\r\n        formAnalytics: \"?template_id={id}\",\r\n        submissionAnalytics: \"?submission_id={id}\",\r\n        timeSeriesAnalytics: \"?template_id={id}&time_series={days}\",\r\n        formComparison: \"?compare={id1,id2,id3}\",\r\n        clinicalInsights: \"?clinical_insights=true\",\r\n        exportReport: \"?template_id={id}&export={json|csv}\"\r\n      },\r\n      examples: [\r\n        \"/api/analytics/forms?template_id=1\",\r\n        \"/api/analytics/forms?submission_id=123\",\r\n        \"/api/analytics/forms?template_id=1&time_series=30\",\r\n        \"/api/analytics/forms?compare=1,2,3\",\r\n        \"/api/analytics/forms?clinical_insights=true\",\r\n        \"/api/analytics/forms?template_id=1&export=csv\"\r\n      ]\r\n    });\r\n\r\n  } catch (error) {\r\n    return Response.json(\r\n      {\r\n        message: error instanceof Error ? error.message : \"Failed to retrieve analytics data\",\r\n        success: false,\r\n      },\r\n      { status: 500 },\r\n    );\r\n  }\r\n};\r\n\r\nconst postHandler: APIRoute = async (context: APIContext) => {\r\n  const { DB } = (context.locals as any).runtime.env;\r\n\r\n  // Authenticate request\r\n  const authResult = await authenticate(context);\r\n  if (authResult instanceof Response) return authResult;\r\n\r\n  // Authorize request - analytics operations require READ permission on forms\r\n  const authzMiddleware = authorize(PERMISSIONS.READ, 'forms');\r\n  const authzResult = await authzMiddleware(authResult);\r\n  if (authzResult instanceof Response) return authzResult;\r\n\r\n  try {\r\n    const body = await context.request.json() as {\r\n      operation: string;\r\n      parameters: {\r\n        template_id?: number;\r\n        submission_id?: number;\r\n        template_ids?: number[];\r\n        days?: number;\r\n        format?: 'json' | 'csv';\r\n      };\r\n    };\r\n    const { operation, parameters } = body;\r\n\r\n    const formAnalyticsService = new FormAnalyticsService(DB);\r\n\r\n    switch (operation) {\r\n      case 'form_analytics':\r\n        if (!parameters.template_id) {\r\n          return Response.json({ message: \"template_id is required\" }, { status: 400 });\r\n        }\r\n        const analytics = await formAnalyticsService.getFormAnalytics(parameters.template_id);\r\n        return Response.json({ analytics });\r\n\r\n      case 'submission_analytics':\r\n        if (!parameters.submission_id) {\r\n          return Response.json({ message: \"submission_id is required\" }, { status: 400 });\r\n        }\r\n        const submissionAnalytics = await formAnalyticsService.getSubmissionAnalytics(parameters.submission_id);\r\n        if (!submissionAnalytics) {\r\n          return Response.json({ message: \"Submission not found\" }, { status: 404 });\r\n        }\r\n        return Response.json({ submissionAnalytics });\r\n\r\n      case 'form_comparison':\r\n        if (!parameters.template_ids || !Array.isArray(parameters.template_ids)) {\r\n          return Response.json({ message: \"template_ids array is required\" }, { status: 400 });\r\n        }\r\n        const comparisonData = await formAnalyticsService.getFormComparisonAnalytics(parameters.template_ids);\r\n        return Response.json({ comparison: comparisonData });\r\n\r\n      case 'time_series':\r\n        if (!parameters.template_id) {\r\n          return Response.json({ message: \"template_id is required\" }, { status: 400 });\r\n        }\r\n        const days = parameters.days || 30;\r\n        const timeSeriesData = await formAnalyticsService.getTimeSeriesAnalytics(parameters.template_id, days);\r\n        return Response.json({ timeSeriesData, days });\r\n\r\n      case 'clinical_insights':\r\n        const insights = await formAnalyticsService.getClinicalInsights();\r\n        return Response.json({ clinicalInsights: insights });\r\n\r\n      case 'export_report':\r\n        if (!parameters.template_id) {\r\n          return Response.json({ message: \"template_id is required\" }, { status: 400 });\r\n        }\r\n        const format = parameters.format || 'json';\r\n        const reportData = await formAnalyticsService.exportAnalyticsReport(parameters.template_id, format);\r\n        \r\n        if (format === 'csv') {\r\n          return new Response(reportData, {\r\n            headers: {\r\n              'Content-Type': 'text/csv',\r\n              'Content-Disposition': `attachment; filename=\"form-analytics-${parameters.template_id}.csv\"`\r\n            }\r\n          });\r\n        }\r\n        \r\n        return new Response(reportData, {\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          }\r\n        });\r\n\r\n      default:\r\n        return Response.json({ \r\n          message: \"Invalid operation\",\r\n          supportedOperations: [\r\n            'form_analytics',\r\n            'submission_analytics', \r\n            'form_comparison',\r\n            'time_series',\r\n            'clinical_insights',\r\n            'export_report'\r\n          ]\r\n        }, { status: 400 });\r\n    }\r\n\r\n  } catch (error) {\r\n    return Response.json(\r\n      {\r\n        message: error instanceof Error ? error.message : \"Failed to process analytics request\",\r\n        success: false,\r\n      },\r\n      { status: 500 },\r\n    );\r\n  }\r\n};\r\n\r\nexport const GET = withPerformanceMonitoring(getHandler, 'analytics-forms:get');\r\nexport const POST = withPerformanceMonitoring(postHandler, 'analytics-forms:process');"],"names":[],"mappings":"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"}