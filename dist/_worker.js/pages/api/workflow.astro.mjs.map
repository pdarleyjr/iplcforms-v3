{"version":3,"file":"workflow.astro.mjs","sources":["../../../../src/pages/api/workflow.ts"],"sourcesContent":["import { authenticate, authorize } from \"@/lib/middleware/rbac-middleware\";\r\nimport { PERMISSIONS } from \"@/lib/utils/rbac\";\r\nimport { CustomerWorkflowSchema, validateRequest, ApiResponseSchema } from \"@/lib/schemas/api-validation\";\r\nimport type { APIRoute, APIContext } from \"astro\";\r\nimport { withPerformanceMonitoring } from \"@/lib/utils/performance-wrapper\";\r\n\r\nconst postHandler: APIRoute = async (context: APIContext) => {\r\n  const { CUSTOMER_WORKFLOW } = (context.locals as any).runtime.env;\r\n  \r\n  // Authenticate request\r\n  const authResult = await authenticate(context);\r\n  if (authResult instanceof Response) return authResult;\r\n\r\n  // Authorize request - workflow creation requires MANAGE permission\r\n  const authzMiddleware = authorize(PERMISSIONS.MANAGE, 'workflows');\r\n  const authzResult = await authzMiddleware(authResult);\r\n  if (authzResult instanceof Response) return authzResult;\r\n\r\n  try {\r\n    // Parse request body\r\n    const body = await context.request.json() as Record<string, any>;\r\n    \r\n    // Add customer_id from URL params\r\n    const customer_id = context.params?.id ? parseInt(context.params.id) : body.customer_id;\r\n    const requestData = { ...body, customer_id };\r\n    \r\n    // Validate request data with Zod\r\n    const validation = validateRequest(CustomerWorkflowSchema, requestData);\r\n    if (!validation.success) {\r\n      return Response.json(\r\n        {\r\n          success: false,\r\n          message: \"Validation failed\",\r\n          errors: validation.errors,\r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const { customer_id: validatedCustomerId, workflow_type, parameters } = validation.data;\r\n\r\n    // Create workflow instance with enhanced parameters\r\n    const workflowInstance = await CUSTOMER_WORKFLOW.create({\r\n      params: {\r\n        customer_id: validatedCustomerId,\r\n        workflow_type,\r\n        parameters: {\r\n          ...parameters,\r\n          timestamp: new Date().toISOString(),\r\n          api_version: \"v3\",\r\n          initiated_by: \"api\",\r\n        },\r\n      },\r\n    });\r\n\r\n    // Enhanced workflow orchestration with conditional steps\r\n    const workflowSteps = await generateWorkflowSteps(workflow_type || 'onboarding', validatedCustomerId || 0, parameters);\r\n    \r\n    // Execute initial workflow steps\r\n    for (const step of workflowSteps.slice(0, 3)) { // Execute first 3 steps immediately\r\n      if (workflowInstance && typeof (workflowInstance as any).step === 'function') {\r\n        await (workflowInstance as any).step(step.name, async () => {\r\n          return await executeWorkflowStep(step, validatedCustomerId || 0, (context.locals as any).runtime.env);\r\n        });\r\n      }\r\n    }\r\n\r\n    // Schedule remaining steps for async execution\r\n    if (workflowSteps.length > 3) {\r\n      if (workflowInstance && typeof (workflowInstance as any).step === 'function') {\r\n        await (workflowInstance as any).step(\"schedule_remaining_steps\", async () => {\r\n          return {\r\n            scheduled_steps: workflowSteps.slice(3).map(step => ({\r\n              name: step.name,\r\n              scheduled_for: new Date(Date.now() + step.delay_ms).toISOString(),\r\n            })),\r\n          };\r\n        });\r\n      }\r\n    }\r\n\r\n    return Response.json(\r\n      {\r\n        success: true,\r\n        message: \"Workflow started successfully\",\r\n        data: {\r\n          workflow_id: workflowInstance.id,\r\n          customer_id: validatedCustomerId,\r\n          workflow_type,\r\n          steps_executed: workflowSteps.slice(0, 3).length,\r\n          steps_scheduled: Math.max(0, workflowSteps.length - 3),\r\n        },\r\n      },\r\n      { status: 202 }\r\n    );\r\n\r\n  } catch (error) {\r\n    console.error(\"Workflow error:\", error);\r\n    return Response.json(\r\n      {\r\n        success: false,\r\n        message: \"Failed to start workflow\",\r\n        errors: [error instanceof Error ? error.message : \"Unknown error\"],\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n};\r\n\r\n// Enhanced workflow step generation with clinical context\r\nasync function generateWorkflowSteps(\r\n  workflowType: string, \r\n  customerId: number, \r\n  parameters?: Record<string, any>\r\n) {\r\n  const baseSteps = [\r\n    {\r\n      name: \"validate_customer\",\r\n      action: \"customer_validation\",\r\n      delay_ms: 0,\r\n      required: true,\r\n    },\r\n    {\r\n      name: \"initialize_session\",\r\n      action: \"session_creation\",\r\n      delay_ms: 1000,\r\n      required: true,\r\n    },\r\n    {\r\n      name: \"send_welcome_notification\",\r\n      action: \"notification\",\r\n      delay_ms: 2000,\r\n      required: false,\r\n    },\r\n  ];\r\n\r\n  // Workflow-specific steps\r\n  const workflowSpecificSteps = {\r\n    onboarding: [\r\n      {\r\n        name: \"create_patient_profile\",\r\n        action: \"profile_creation\",\r\n        delay_ms: 5000,\r\n        required: true,\r\n      },\r\n      {\r\n        name: \"assign_initial_assessments\",\r\n        action: \"assessment_assignment\",\r\n        delay_ms: 10000,\r\n        required: true,\r\n      },\r\n      {\r\n        name: \"schedule_intake_appointment\",\r\n        action: \"appointment_scheduling\",\r\n        delay_ms: 30000,\r\n        required: false,\r\n      },\r\n    ],\r\n    assessment: [\r\n      {\r\n        name: \"prepare_assessment_forms\",\r\n        action: \"form_preparation\",\r\n        delay_ms: 3000,\r\n        required: true,\r\n      },\r\n      {\r\n        name: \"send_assessment_invitation\",\r\n        action: \"assessment_invitation\",\r\n        delay_ms: 5000,\r\n        required: true,\r\n      },\r\n      {\r\n        name: \"monitor_completion_status\",\r\n        action: \"completion_monitoring\",\r\n        delay_ms: 60000,\r\n        required: false,\r\n      },\r\n    ],\r\n    treatment: [\r\n      {\r\n        name: \"review_clinical_data\",\r\n        action: \"clinical_review\",\r\n        delay_ms: 5000,\r\n        required: true,\r\n      },\r\n      {\r\n        name: \"generate_treatment_plan\",\r\n        action: \"treatment_planning\",\r\n        delay_ms: 15000,\r\n        required: true,\r\n      },\r\n      {\r\n        name: \"schedule_follow_up\",\r\n        action: \"follow_up_scheduling\",\r\n        delay_ms: 24 * 60 * 60 * 1000, // 24 hours\r\n        required: false,\r\n      },\r\n    ],\r\n    follow_up: [\r\n      {\r\n        name: \"prepare_follow_up_forms\",\r\n        action: \"form_preparation\",\r\n        delay_ms: 2000,\r\n        required: true,\r\n      },\r\n      {\r\n        name: \"analyze_progress_metrics\",\r\n        action: \"progress_analysis\",\r\n        delay_ms: 10000,\r\n        required: true,\r\n      },\r\n      {\r\n        name: \"update_treatment_plan\",\r\n        action: \"treatment_update\",\r\n        delay_ms: 20000,\r\n        required: false,\r\n      },\r\n    ],\r\n  };\r\n\r\n  return [\r\n    ...baseSteps,\r\n    ...(workflowSpecificSteps[workflowType as keyof typeof workflowSpecificSteps] || []),\r\n  ];\r\n}\r\n\r\n// Enhanced workflow step execution with error handling and retries\r\nasync function executeWorkflowStep(\r\n  step: any, \r\n  customerId: number, \r\n  env: any\r\n) {\r\n  const maxRetries = 3;\r\n  let attempt = 0;\r\n\r\n  while (attempt < maxRetries) {\r\n    try {\r\n      switch (step.action) {\r\n        case \"customer_validation\":\r\n          return await validateCustomerExists(customerId, env.DB);\r\n        \r\n        case \"session_creation\":\r\n          return await createWorkflowSession(customerId, env.DB);\r\n        \r\n        case \"notification\":\r\n          return await sendNotification(customerId, \"workflow_started\", env);\r\n        \r\n        case \"profile_creation\":\r\n          return await createPatientProfile(customerId, env.DB);\r\n        \r\n        case \"assessment_assignment\":\r\n          return await assignInitialAssessments(customerId, env.DB);\r\n        \r\n        case \"appointment_scheduling\":\r\n          return await scheduleAppointment(customerId, env);\r\n        \r\n        case \"form_preparation\":\r\n          return await prepareAssessmentForms(customerId, env.DB);\r\n        \r\n        case \"assessment_invitation\":\r\n          return await sendAssessmentInvitation(customerId, env);\r\n        \r\n        case \"completion_monitoring\":\r\n          return await monitorCompletionStatus(customerId, env.DB);\r\n        \r\n        case \"clinical_review\":\r\n          return await reviewClinicalData(customerId, env.DB);\r\n        \r\n        case \"treatment_planning\":\r\n          return await generateTreatmentPlan(customerId, env.DB);\r\n        \r\n        case \"follow_up_scheduling\":\r\n          return await scheduleFollowUp(customerId, env);\r\n        \r\n        case \"progress_analysis\":\r\n          return await analyzeProgressMetrics(customerId, env.DB);\r\n        \r\n        case \"treatment_update\":\r\n          return await updateTreatmentPlan(customerId, env.DB);\r\n        \r\n        default:\r\n          return { success: true, message: `Executed ${step.name}`, data: {} };\r\n      }\r\n    } catch (error) {\r\n      attempt++;\r\n      if (attempt >= maxRetries) {\r\n        return {\r\n          success: false,\r\n          error: error instanceof Error ? error.message : \"Unknown error\",\r\n          attempts: attempt,\r\n        };\r\n      }\r\n      // Exponential backoff\r\n      await new Promise(resolve => setTimeout(resolve, Math.pow(2, attempt) * 1000));\r\n    }\r\n  }\r\n}\r\n\r\n// Workflow step implementations\r\nasync function validateCustomerExists(customerId: number, db: any) {\r\n  const result = await db.prepare(\"SELECT id FROM customers WHERE id = ?\").bind(customerId).first();\r\n  return {\r\n    success: !!result,\r\n    message: result ? \"Customer validated\" : \"Customer not found\",\r\n    data: { customer_id: customerId, exists: !!result },\r\n  };\r\n}\r\n\r\nasync function createWorkflowSession(customerId: number, db: any) {\r\n  const sessionId = `wf_${customerId}_${Date.now()}`;\r\n  // In a real implementation, you might store this in a sessions table\r\n  return {\r\n    success: true,\r\n    message: \"Workflow session created\",\r\n    data: { session_id: sessionId, customer_id: customerId },\r\n  };\r\n}\r\n\r\nasync function sendNotification(customerId: number, type: string, env: any) {\r\n  // Implementation would integrate with notification service\r\n  return {\r\n    success: true,\r\n    message: \"Notification sent\",\r\n    data: { customer_id: customerId, notification_type: type },\r\n  };\r\n}\r\n\r\nasync function createPatientProfile(customerId: number, db: any) {\r\n  // Create or update patient profile with clinical context\r\n  return {\r\n    success: true,\r\n    message: \"Patient profile created\",\r\n    data: { customer_id: customerId, profile_created: true },\r\n  };\r\n}\r\n\r\nasync function assignInitialAssessments(customerId: number, db: any) {\r\n  // Assign relevant form templates based on clinical context\r\n  return {\r\n    success: true,\r\n    message: \"Initial assessments assigned\",\r\n    data: { customer_id: customerId, assessments_assigned: 3 },\r\n  };\r\n}\r\n\r\nasync function scheduleAppointment(customerId: number, env: any) {\r\n  // Integration with scheduling system\r\n  return {\r\n    success: true,\r\n    message: \"Appointment scheduled\",\r\n    data: { customer_id: customerId, appointment_scheduled: true },\r\n  };\r\n}\r\n\r\nasync function prepareAssessmentForms(customerId: number, db: any) {\r\n  // Prepare personalized assessment forms\r\n  return {\r\n    success: true,\r\n    message: \"Assessment forms prepared\",\r\n    data: { customer_id: customerId, forms_prepared: true },\r\n  };\r\n}\r\n\r\nasync function sendAssessmentInvitation(customerId: number, env: any) {\r\n  // Send assessment invitation via email/SMS\r\n  return {\r\n    success: true,\r\n    message: \"Assessment invitation sent\",\r\n    data: { customer_id: customerId, invitation_sent: true },\r\n  };\r\n}\r\n\r\nasync function monitorCompletionStatus(customerId: number, db: any) {\r\n  // Monitor assessment completion status\r\n  return {\r\n    success: true,\r\n    message: \"Completion monitoring initiated\",\r\n    data: { customer_id: customerId, monitoring_active: true },\r\n  };\r\n}\r\n\r\nasync function reviewClinicalData(customerId: number, db: any) {\r\n  // Review clinical data for treatment planning\r\n  return {\r\n    success: true,\r\n    message: \"Clinical data reviewed\",\r\n    data: { customer_id: customerId, data_reviewed: true },\r\n  };\r\n}\r\n\r\nasync function generateTreatmentPlan(customerId: number, db: any) {\r\n  // Generate personalized treatment plan\r\n  return {\r\n    success: true,\r\n    message: \"Treatment plan generated\",\r\n    data: { customer_id: customerId, treatment_plan_created: true },\r\n  };\r\n}\r\n\r\nasync function scheduleFollowUp(customerId: number, env: any) {\r\n  // Schedule follow-up appointments/assessments\r\n  return {\r\n    success: true,\r\n    message: \"Follow-up scheduled\",\r\n    data: { customer_id: customerId, follow_up_scheduled: true },\r\n  };\r\n}\r\n\r\nasync function analyzeProgressMetrics(customerId: number, db: any) {\r\n  // Analyze patient progress metrics\r\n  return {\r\n    success: true,\r\n    message: \"Progress metrics analyzed\",\r\n    data: { customer_id: customerId, metrics_analyzed: true },\r\n  };\r\n}\r\n\r\nasync function updateTreatmentPlan(customerId: number, db: any) {\r\n  // Update treatment plan based on progress\r\n  return {\r\n    success: true,\r\n    message: \"Treatment plan updated\",\r\n    data: { customer_id: customerId, treatment_plan_updated: true },\r\n  };\r\n}\r\n\r\nexport const POST = withPerformanceMonitoring(postHandler, 'workflow:create');"],"names":[],"mappings":"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"}