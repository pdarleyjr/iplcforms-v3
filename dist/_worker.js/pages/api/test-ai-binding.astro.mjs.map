{"version":3,"file":"test-ai-binding.astro.mjs","sources":["../../../../src/pages/api/test-ai-binding.ts"],"sourcesContent":["import type { APIRoute } from 'astro';\r\nimport type { AIEnv } from '../../lib/ai/types';\r\n\r\nexport const GET: APIRoute = async ({ locals }) => {\r\n  const env = (locals as any).runtime.env as unknown as AIEnv;\r\n  \r\n  try {\r\n    const results = {\r\n      timestamp: new Date().toISOString(),\r\n      bindings: {\r\n        // Check if IPLC_AI service binding exists\r\n        hasIPLC_AI: !!(env as any).IPLC_AI,\r\n        IPLC_AI_type: typeof (env as any).IPLC_AI,\r\n        IPLC_AI_hasFetch: typeof (env as any).IPLC_AI?.fetch === 'function',\r\n        \r\n        // Check local bindings\r\n        hasAI: !!env.AI,\r\n        hasDOC_INDEX: !!env.DOC_INDEX,\r\n        hasCHAT_HISTORY: !!env.CHAT_HISTORY,\r\n        hasAI_GATE: !!env.AI_GATE,\r\n        \r\n        // List all env keys\r\n        envKeys: Object.keys(env || {})\r\n      },\r\n      serviceTest: null as any\r\n    };\r\n    \r\n    // Test IPLC_AI service binding if available\r\n    if ((env as any).IPLC_AI && typeof (env as any).IPLC_AI.fetch === 'function') {\r\n      try {\r\n        const testResponse = await (env as any).IPLC_AI.fetch('https://iplc-ai.worker/health', {\r\n          method: 'GET',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          }\r\n        });\r\n        \r\n        results.serviceTest = {\r\n          success: true,\r\n          status: testResponse.status,\r\n          statusText: testResponse.statusText,\r\n          headers: Object.fromEntries(testResponse.headers.entries()),\r\n          body: await testResponse.text()\r\n        };\r\n      } catch (error) {\r\n        results.serviceTest = {\r\n          success: false,\r\n          error: error instanceof Error ? error.message : 'Unknown error'\r\n        };\r\n      }\r\n    } else {\r\n      results.serviceTest = {\r\n        success: false,\r\n        error: 'IPLC_AI service binding not available'\r\n      };\r\n    }\r\n    \r\n    return new Response(JSON.stringify(results, null, 2), {\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Test AI binding error:', error);\r\n    return new Response(JSON.stringify({\r\n      error: 'Failed to test AI binding',\r\n      details: error instanceof Error ? error.message : 'Unknown error'\r\n    }, null, 2), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n};"],"names":[],"mappings":";;;AAGO,MAAM,GAAA,GAAgB,OAAO,EAAE,MAAA,EAAO,KAAM;AACjD,EAAA,MAAM,GAAA,GAAO,OAAe,OAAA,CAAQ,GAAA;AAEpC,EAAA,IAAI;AACF,IAAA,MAAM,OAAA,GAAU;AAAA,MACd,SAAA,EAAA,iBAAW,IAAI,IAAA,EAAK,EAAE,WAAA,EAAY;AAAA,MAClC,QAAA,EAAU;AAAA;AAAA,QAER,UAAA,EAAY,CAAC,CAAE,GAAA,CAAY,OAAA;AAAA,QAC3B,YAAA,EAAc,OAAQ,GAAA,CAAY,OAAA;AAAA,QAClC,gBAAA,EAAkB,OAAQ,GAAA,CAAY,OAAA,EAAS,KAAA,KAAU,UAAA;AAAA;AAAA,QAGzD,KAAA,EAAO,CAAC,CAAC,GAAA,CAAI,EAAA;AAAA,QACb,YAAA,EAAc,CAAC,CAAC,GAAA,CAAI,SAAA;AAAA,QACpB,eAAA,EAAiB,CAAC,CAAC,GAAA,CAAI,YAAA;AAAA,QACvB,UAAA,EAAY,CAAC,CAAC,GAAA,CAAI,OAAA;AAAA;AAAA,QAGlB,OAAA,EAAS,MAAA,CAAO,IAAA,CAAK,GAAA,IAAO,EAAE;AAAA,OAChC;AAAA,MACA,WAAA,EAAa;AAAA,KACf;AAGA,IAAA,IAAK,IAAY,OAAA,IAAW,OAAQ,GAAA,CAAY,OAAA,CAAQ,UAAU,UAAA,EAAY;AAC5E,MAAA,IAAI;AACF,QAAA,MAAM,YAAA,GAAe,MAAO,GAAA,CAAY,OAAA,CAAQ,MAAM,+BAAA,EAAiC;AAAA,UACrF,MAAA,EAAQ,KAAA;AAAA,UACR,OAAA,EAAS;AAAA,YACP,cAAA,EAAgB;AAAA;AAClB,SACD,CAAA;AAED,QAAA,OAAA,CAAQ,WAAA,GAAc;AAAA,UACpB,OAAA,EAAS,IAAA;AAAA,UACT,QAAQ,YAAA,CAAa,MAAA;AAAA,UACrB,YAAY,YAAA,CAAa,UAAA;AAAA,UACzB,SAAS,MAAA,CAAO,WAAA,CAAY,YAAA,CAAa,OAAA,CAAQ,SAAS,CAAA;AAAA,UAC1D,IAAA,EAAM,MAAM,YAAA,CAAa,IAAA;AAAK,SAChC;AAAA,MACF,SAAS,KAAA,EAAO;AACd,QAAA,OAAA,CAAQ,WAAA,GAAc;AAAA,UACpB,OAAA,EAAS,KAAA;AAAA,UACT,KAAA,EAAO,KAAA,YAAiB,KAAA,GAAQ,KAAA,CAAM,OAAA,GAAU;AAAA,SAClD;AAAA,MACF;AAAA,IACF,CAAA,MAAO;AACL,MAAA,OAAA,CAAQ,WAAA,GAAc;AAAA,QACpB,OAAA,EAAS,KAAA;AAAA,QACT,KAAA,EAAO;AAAA,OACT;AAAA,IACF;AAEA,IAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,UAAU,OAAA,EAAS,IAAA,EAAM,CAAC,CAAA,EAAG;AAAA,MACpD,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,KAC/C,CAAA;AAAA,EAEH,SAAS,KAAA,EAAO;AACd,IAAA,OAAA,CAAQ,KAAA,CAAM,0BAA0B,KAAK,CAAA;AAC7C,IAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,MACjC,KAAA,EAAO,2BAAA;AAAA,MACP,OAAA,EAAS,KAAA,YAAiB,KAAA,GAAQ,KAAA,CAAM,OAAA,GAAU;AAAA,KACpD,EAAG,IAAA,EAAM,CAAC,CAAA,EAAG;AAAA,MACX,MAAA,EAAQ,GAAA;AAAA,MACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,KAC/C,CAAA;AAAA,EACH;AACF,CAAA;;;;;;;;;;;"}