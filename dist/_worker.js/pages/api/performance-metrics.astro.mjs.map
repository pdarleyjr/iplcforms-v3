{"version":3,"file":"performance-metrics.astro.mjs","sources":["../../../../src/pages/api/performance-metrics.ts"],"sourcesContent":["import type { APIRoute, APIContext } from 'astro';\r\nimport { WorkersPerformanceManager } from '../../lib/utils/workers-performance';\r\nimport { authenticate, authorize } from '../../lib/middleware/rbac-middleware';\r\nimport { PERMISSIONS } from '../../lib/utils/rbac';\r\n\r\nexport const GET: APIRoute = async (context: APIContext) => {\r\n  try {\r\n    // Authenticate request\r\n    const authResult = await authenticate(context);\r\n    if (authResult instanceof Response) return authResult;\r\n\r\n    // Authorize request - only admin role can view performance metrics\r\n    const authzMiddleware = authorize(PERMISSIONS.READ, 'performance_metrics');\r\n    const authzResult = await authzMiddleware(authResult);\r\n    if (authzResult instanceof Response) return authzResult;\r\n\r\n    // Get metrics from performance manager\r\n    const performanceManager = WorkersPerformanceManager.getInstance();\r\n    const metrics = performanceManager.getAllMetrics();\r\n\r\n    // Convert Map to array for JSON serialization\r\n    const metricsArray = Array.from(metrics.values());\r\n\r\n    return new Response(JSON.stringify({\r\n      success: true,\r\n      metrics: metricsArray,\r\n      count: metricsArray.length\r\n    }), {\r\n      status: 200,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Cache-Control': 'no-cache, no-store, must-revalidate'\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('Error fetching performance metrics:', error);\r\n    return new Response(JSON.stringify({\r\n      success: false,\r\n      error: 'Failed to fetch performance metrics'\r\n    }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n};\r\n\r\nexport const POST: APIRoute = async (context: APIContext) => {\r\n  try {\r\n    // Authenticate request\r\n    const authResult = await authenticate(context);\r\n    if (authResult instanceof Response) return authResult;\r\n\r\n    // Authorize request - only admin role can manage performance metrics\r\n    const authzMiddleware = authorize(PERMISSIONS.MANAGE, 'performance_metrics');\r\n    const authzResult = await authzMiddleware(authResult);\r\n    if (authzResult instanceof Response) return authzResult;\r\n\r\n    const body = await context.request.json() as { action: string };\r\n    const { action } = body;\r\n\r\n    const performanceManager = WorkersPerformanceManager.getInstance();\r\n\r\n    switch (action) {\r\n      case 'clear':\r\n        // Clear all metrics\r\n        performanceManager.clearMetrics();\r\n        return new Response(JSON.stringify({\r\n          success: true,\r\n          message: 'Performance metrics cleared'\r\n        }), {\r\n          status: 200,\r\n          headers: { 'Content-Type': 'application/json' }\r\n        });\r\n\r\n      case 'export':\r\n        // Export metrics to KV storage if available\r\n        if ((context.locals as any).runtime?.env?.METRICS_KV) {\r\n          const metrics = performanceManager.getAllMetrics();\r\n          const timestamp = new Date().toISOString();\r\n          // Type assertion for KV namespace\r\n          const kv = (context.locals as any).runtime.env.METRICS_KV as any;\r\n          await kv.put(\r\n            `metrics-export-${timestamp}`,\r\n            JSON.stringify(Array.from(metrics.entries())),\r\n            { expirationTtl: 86400 * 7 } // Keep for 7 days\r\n          );\r\n          return new Response(JSON.stringify({\r\n            success: true,\r\n            message: 'Metrics exported to KV storage',\r\n            key: `metrics-export-${timestamp}`\r\n          }), {\r\n            status: 200,\r\n            headers: { 'Content-Type': 'application/json' }\r\n          });\r\n        } else {\r\n          return new Response(JSON.stringify({\r\n            success: false,\r\n            error: 'KV storage not available'\r\n          }), {\r\n            status: 501,\r\n            headers: { 'Content-Type': 'application/json' }\r\n          });\r\n        }\r\n\r\n      default:\r\n        return new Response(JSON.stringify({\r\n          success: false,\r\n          error: 'Invalid action'\r\n        }), {\r\n          status: 400,\r\n          headers: { 'Content-Type': 'application/json' }\r\n        });\r\n    }\r\n  } catch (error) {\r\n    console.error('Error processing performance metrics action:', error);\r\n    return new Response(JSON.stringify({\r\n      success: false,\r\n      error: 'Failed to process action'\r\n    }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n};"],"names":[],"mappings":"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"}