{"version":3,"file":"form-summary.astro.mjs","sources":["../../../../src/pages/api/form-summary.ts"],"sourcesContent":["import type { APIRoute } from 'astro';\r\nimport { z } from 'zod';\r\nimport { checkRateLimit } from '../../lib/ai/rateLimit';\r\nimport type { AIEnv } from '../../lib/ai/types';\r\n\r\nconst SummaryRequestSchema = z.object({\r\n  formId: z.string(),\r\n  formData: z.object({\r\n    name: z.string(),\r\n    description: z.string().optional(),\r\n    components: z.array(z.any()),\r\n    responses: z.record(z.string(), z.any()).optional()\r\n  })\r\n});\r\n\r\n// Generate AI summary for form\r\nexport const POST: APIRoute = async ({ request, locals }) => {\r\n  const env = (locals as any).runtime.env;\r\n  \r\n  try {\r\n    const body = await request.json();\r\n    const validation = SummaryRequestSchema.safeParse(body);\r\n    \r\n    if (!validation.success) {\r\n      return new Response(JSON.stringify({\r\n        error: 'Invalid request data',\r\n        details: validation.error.issues\r\n      }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    const { formId, formData } = validation.data;\r\n    \r\n    // Check if any components were provided\r\n    if (!formData.components || formData.components.length === 0) {\r\n      return new Response(JSON.stringify({\r\n        error: 'No form components selected',\r\n        message: 'Please select at least one form component to generate a summary'\r\n      }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    // Create AI environment object\r\n    const aiEnv: AIEnv = {\r\n      AI: env.AI,\r\n      DOC_INDEX: env.DOC_INDEX,\r\n      DOC_METADATA: env.DOC_METADATA,\r\n      CHAT_HISTORY: env.CHAT_HISTORY || env.FORMS_KV, // Use FORMS_KV if CHAT_HISTORY not available\r\n      AI_GATE: env.AIGate\r\n    };\r\n    \r\n    // Check rate limit\r\n    const clientIp = request.headers.get('cf-connecting-ip') || 'unknown';\r\n    const clientId = `form-summary:${clientIp}`;\r\n    const rateLimitResult = await checkRateLimit(clientId, aiEnv);\r\n    \r\n    if (!rateLimitResult.allowed) {\r\n      const retryAfter = Math.ceil((rateLimitResult.resetAt - Date.now()) / 1000);\r\n      return new Response(JSON.stringify({\r\n        error: 'Rate limit exceeded',\r\n        retryAfter: retryAfter\r\n      }), {\r\n        status: 429,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Retry-After': retryAfter.toString()\r\n        }\r\n      });\r\n    }\r\n    \r\n    // Prepare content for summarization\r\n    const contentToSummarize = `Form Analysis Request\r\n\r\nForm Name: ${formData.name}\r\n${formData.description ? `Form Description: ${formData.description}` : ''}\r\n\r\nForm Components:\r\n${formData.components.map((comp: any, index: number) => {\r\n  return `${index + 1}. Field Type: ${comp.type}\r\n   Label: ${comp.label || 'Unlabeled'}\r\n   ${comp.props?.required ? '(Required)' : '(Optional)'}\r\n   ${comp.props?.placeholder ? `Placeholder: ${comp.props.placeholder}` : ''}\r\n   ${comp.props?.helpText ? `Help Text: ${comp.props.helpText}` : ''}`;\r\n}).join('\\n\\n')}\r\n\r\nPlease provide a structured summary that includes:\r\n- Overview of the form's purpose\r\n- Total number of fields and breakdown by type\r\n- Required vs optional fields\r\n- Key features or special components\r\n- Any clinical or domain-specific elements (if applicable)\r\n- Accessibility considerations\r\n- Suggestions for improvement (if any)\r\n\r\nFormat the summary using markdown with clear sections.`;\r\n    \r\n    // Use IPLC_AI service binding\r\n    const iplcAI = (env as any).IPLC_AI;\r\n    if (!iplcAI || typeof iplcAI.fetch !== 'function') {\r\n      return new Response(JSON.stringify({\r\n        error: 'AI service not available',\r\n        details: 'IPLC_AI service binding is not configured'\r\n      }), {\r\n        status: 503,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    // Call the iplc-ai worker's /summary endpoint\r\n    const summaryResponse = await iplcAI.fetch('https://iplc-ai.worker/summary', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        content: contentToSummarize,\r\n        maxWords: 500\r\n      })\r\n    });\r\n    \r\n    if (!summaryResponse.ok) {\r\n      const error = await summaryResponse.text();\r\n      console.error('IPLC_AI summary error:', error);\r\n      throw new Error(`AI service error: ${error}`);\r\n    }\r\n    \r\n    const { summary } = await summaryResponse.json();\r\n    \r\n    if (!summary) {\r\n      throw new Error('Failed to generate summary');\r\n    }\r\n    \r\n    // Store summary in database\r\n    const now = new Date().toISOString();\r\n    await env.DB.prepare(\r\n      'UPDATE form_templates SET summary = ?, updated_at = ? WHERE id = ?'\r\n    ).bind(summary, now, formId).run();\r\n    \r\n    return new Response(JSON.stringify({\r\n      success: true,\r\n      summary,\r\n      generatedAt: now\r\n    }), {\r\n      status: 200,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Error generating form summary:', error);\r\n    return new Response(JSON.stringify({\r\n      error: 'Failed to generate form summary',\r\n      details: error instanceof Error ? error.message : 'Unknown error'\r\n    }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n};\r\n\r\n// Get form summary\r\nexport const GET: APIRoute = async ({ request, locals }) => {\r\n  const env = (locals as any).runtime.env;\r\n  \r\n  try {\r\n    const url = new URL(request.url);\r\n    const formId = url.searchParams.get('formId');\r\n    \r\n    if (!formId) {\r\n      return new Response(JSON.stringify({\r\n        error: 'formId parameter is required'\r\n      }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    const result = await env.DB.prepare(\r\n      'SELECT summary, updated_at FROM form_templates WHERE id = ?'\r\n    ).bind(formId).first();\r\n    \r\n    if (!result || !result.summary) {\r\n      return new Response(JSON.stringify({\r\n        summary: null,\r\n        message: 'No summary available'\r\n      }), {\r\n        status: 200,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    return new Response(JSON.stringify({\r\n      summary: result.summary,\r\n      updatedAt: result.updated_at\r\n    }), {\r\n      status: 200,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Error fetching form summary:', error);\r\n    return new Response(JSON.stringify({\r\n      error: 'Failed to fetch form summary',\r\n      details: error instanceof Error ? error.message : 'Unknown error'\r\n    }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n};"],"names":["z.object","z.string","z.array","z.any","z.record"],"mappings":"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"}