{"version":3,"file":"pdf-annotations.astro2.mjs","sources":["../../../../src/pages/api/pdf-annotations.ts"],"sourcesContent":["import type { APIRoute } from 'astro';\r\n\r\nexport const GET: APIRoute = async ({ request, locals }) => {\r\n  try {\r\n    const url = new URL(request.url);\r\n    const pdfUrl = url.searchParams.get('pdfUrl');\r\n    \r\n    if (!pdfUrl) {\r\n      return new Response(JSON.stringify({ error: 'PDF URL is required' }), {\r\n        status: 400,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n    }\r\n\r\n    // Get the D1 database from locals\r\n    const db = locals.runtime.env.DB;\r\n    \r\n    // Check if we have a pdf_annotations table, if not create it\r\n    try {\r\n      await db.prepare(`\r\n        CREATE TABLE IF NOT EXISTS pdf_annotations (\r\n          id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n          pdf_url TEXT NOT NULL,\r\n          user_id TEXT,\r\n          annotations TEXT NOT NULL,\r\n          created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\r\n          updated_at DATETIME DEFAULT CURRENT_TIMESTAMP\r\n        )\r\n      `).run();\r\n    } catch (error) {\r\n      console.error('Error creating table:', error);\r\n    }\r\n\r\n    // Fetch annotations for the PDF\r\n    const result = await db.prepare(`\r\n      SELECT * FROM pdf_annotations \r\n      WHERE pdf_url = ? \r\n      ORDER BY updated_at DESC \r\n      LIMIT 1\r\n    `).bind(pdfUrl).first();\r\n\r\n    if (result) {\r\n      return new Response(JSON.stringify({\r\n        annotations: JSON.parse(result.annotations as string),\r\n        updatedAt: result.updated_at,\r\n      }), {\r\n        status: 200,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n    }\r\n\r\n    return new Response(JSON.stringify({ annotations: [] }), {\r\n      status: 200,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n  } catch (error) {\r\n    console.error('Error fetching annotations:', error);\r\n    return new Response(JSON.stringify({ error: 'Failed to fetch annotations' }), {\r\n      status: 500,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n  }\r\n};\r\n\r\nexport const POST: APIRoute = async ({ request, locals }) => {\r\n  try {\r\n    const body = await request.json() as { pdfUrl: string; annotations: any[] };\r\n    const { pdfUrl, annotations } = body;\r\n\r\n    if (!pdfUrl || !annotations) {\r\n      return new Response(JSON.stringify({ error: 'PDF URL and annotations are required' }), {\r\n        status: 400,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n    }\r\n\r\n    // Get the D1 database from locals\r\n    const db = locals.runtime.env.DB;\r\n\r\n    // Check if we have a pdf_annotations table, if not create it\r\n    try {\r\n      await db.prepare(`\r\n        CREATE TABLE IF NOT EXISTS pdf_annotations (\r\n          id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n          pdf_url TEXT NOT NULL,\r\n          user_id TEXT,\r\n          annotations TEXT NOT NULL,\r\n          created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\r\n          updated_at DATETIME DEFAULT CURRENT_TIMESTAMP\r\n        )\r\n      `).run();\r\n    } catch (error) {\r\n      console.error('Error creating table:', error);\r\n    }\r\n\r\n    // Check if annotations already exist for this PDF\r\n    const existing = await db.prepare(`\r\n      SELECT id FROM pdf_annotations \r\n      WHERE pdf_url = ? \r\n      LIMIT 1\r\n    `).bind(pdfUrl).first();\r\n\r\n    if (existing) {\r\n      // Update existing annotations\r\n      await db.prepare(`\r\n        UPDATE pdf_annotations \r\n        SET annotations = ?, updated_at = CURRENT_TIMESTAMP \r\n        WHERE pdf_url = ?\r\n      `).bind(JSON.stringify(annotations), pdfUrl).run();\r\n    } else {\r\n      // Insert new annotations\r\n      await db.prepare(`\r\n        INSERT INTO pdf_annotations (pdf_url, annotations) \r\n        VALUES (?, ?)\r\n      `).bind(pdfUrl, JSON.stringify(annotations)).run();\r\n    }\r\n\r\n    return new Response(JSON.stringify({ \r\n      success: true,\r\n      message: 'Annotations saved successfully' \r\n    }), {\r\n      status: 200,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n  } catch (error) {\r\n    console.error('Error saving annotations:', error);\r\n    return new Response(JSON.stringify({ error: 'Failed to save annotations' }), {\r\n      status: 500,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n  }\r\n};\r\n\r\nexport const DELETE: APIRoute = async ({ request, locals }) => {\r\n  try {\r\n    const url = new URL(request.url);\r\n    const pdfUrl = url.searchParams.get('pdfUrl');\r\n    \r\n    if (!pdfUrl) {\r\n      return new Response(JSON.stringify({ error: 'PDF URL is required' }), {\r\n        status: 400,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n    }\r\n\r\n    // Get the D1 database from locals\r\n    const db = locals.runtime.env.DB;\r\n\r\n    // Delete annotations for the PDF\r\n    await db.prepare(`\r\n      DELETE FROM pdf_annotations \r\n      WHERE pdf_url = ?\r\n    `).bind(pdfUrl).run();\r\n\r\n    return new Response(JSON.stringify({ \r\n      success: true,\r\n      message: 'Annotations deleted successfully' \r\n    }), {\r\n      status: 200,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n  } catch (error) {\r\n    console.error('Error deleting annotations:', error);\r\n    return new Response(JSON.stringify({ error: 'Failed to delete annotations' }), {\r\n      status: 500,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n  }\r\n};"],"names":[],"mappings":"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"}