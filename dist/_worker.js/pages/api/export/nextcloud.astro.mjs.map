{"version":3,"file":"nextcloud.astro.mjs","sources":["../../../../../src/pages/api/export/nextcloud.ts"],"sourcesContent":["import type { APIRoute } from 'astro';\r\n\r\nexport const POST: APIRoute = async ({ request, locals }) => {\r\n  try {\r\n    const runtime = locals.runtime as any;\r\n    const env = runtime.env;\r\n    \r\n    // Get Nextcloud configuration\r\n    const configStr = await env.CACHE_KV.get('integration:nextcloud:config');\r\n    const password = await env.CACHE_KV.get('integration:nextcloud:password');\r\n    \r\n    if (!configStr || !password) {\r\n      return new Response(JSON.stringify({ \r\n        error: 'Nextcloud integration not configured' \r\n      }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    const config = JSON.parse(configStr);\r\n    \r\n    // Get export data from request\r\n    const body = await request.json() as any;\r\n    \r\n    if (!body || typeof body !== 'object') {\r\n      return new Response(JSON.stringify({\r\n        error: 'Invalid request body'\r\n      }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    const { formTitle, submissionId, data, format = 'json' } = body;\r\n    \r\n    if (!formTitle || !submissionId || !data) {\r\n      return new Response(JSON.stringify({\r\n        error: 'Missing required export data'\r\n      }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    // Prepare the export content\r\n    let content: string;\r\n    let filename: string;\r\n    let contentType: string;\r\n    \r\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\r\n    \r\n    if (format === 'csv') {\r\n      // Convert to CSV format\r\n      const headers = Object.keys(data);\r\n      const values = headers.map(key => {\r\n        const value = data[key];\r\n        // Escape CSV values\r\n        if (typeof value === 'string' && (value.includes(',') || value.includes('\"') || value.includes('\\n'))) {\r\n          return `\"${value.replace(/\"/g, '\"\"')}\"`;\r\n        }\r\n        return value;\r\n      });\r\n      \r\n      content = headers.join(',') + '\\n' + values.join(',');\r\n      filename = `${formTitle.replace(/[^a-z0-9]/gi, '_')}_${submissionId}_${timestamp}.csv`;\r\n      contentType = 'text/csv';\r\n    } else {\r\n      // JSON format (default)\r\n      const exportData = {\r\n        formTitle,\r\n        submissionId,\r\n        submittedAt: new Date().toISOString(),\r\n        data\r\n      };\r\n      \r\n      content = JSON.stringify(exportData, null, 2);\r\n      filename = `${formTitle.replace(/[^a-z0-9]/gi, '_')}_${submissionId}_${timestamp}.json`;\r\n      contentType = 'application/json';\r\n    }\r\n    \r\n    // Construct WebDAV URL\r\n    const webdavUrl = `${config.url}/remote.php/dav/files/${config.username}${config.path}/${filename}`;\r\n    \r\n    // Create directories if needed (MKCOL request)\r\n    const dirPath = config.path.split('/').filter((p: string) => p);\r\n    let currentPath = '';\r\n    \r\n    for (const dir of dirPath) {\r\n      currentPath += `/${dir}`;\r\n      const mkcolUrl = `${config.url}/remote.php/dav/files/${config.username}${currentPath}/`;\r\n      \r\n      await fetch(mkcolUrl, {\r\n        method: 'MKCOL',\r\n        headers: {\r\n          'Authorization': `Basic ${btoa(`${config.username}:${password}`)}`\r\n        }\r\n      }).catch(() => {\r\n        // Directory might already exist, ignore error\r\n      });\r\n    }\r\n    \r\n    // Upload file via WebDAV PUT\r\n    const uploadResponse = await fetch(webdavUrl, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Authorization': `Basic ${btoa(`${config.username}:${password}`)}`,\r\n        'Content-Type': contentType,\r\n        'Content-Length': new Blob([content]).size.toString()\r\n      },\r\n      body: content\r\n    });\r\n    \r\n    if (!uploadResponse.ok && uploadResponse.status !== 201 && uploadResponse.status !== 204) {\r\n      const errorText = await uploadResponse.text();\r\n      throw new Error(`Upload failed: ${uploadResponse.status} - ${errorText}`);\r\n    }\r\n    \r\n    // Generate shareable link (optional, depends on Nextcloud settings)\r\n    const shareUrl = `${config.url}/ocs/v2.php/apps/files_sharing/api/v1/shares`;\r\n    const shareResponse = await fetch(shareUrl, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Authorization': `Basic ${btoa(`${config.username}:${password}`)}`,\r\n        'OCS-APIRequest': 'true',\r\n        'Content-Type': 'application/x-www-form-urlencoded'\r\n      },\r\n      body: new URLSearchParams({\r\n        path: `${config.path}/${filename}`,\r\n        shareType: '3', // Public link\r\n        permissions: '1' // Read only\r\n      })\r\n    });\r\n    \r\n    let shareLink = null;\r\n    if (shareResponse.ok) {\r\n      const shareData = await shareResponse.text();\r\n      // Parse share link from response (simplified - in production you'd parse XML properly)\r\n      const urlMatch = shareData.match(/<url>([^<]+)<\\/url>/);\r\n      if (urlMatch) {\r\n        shareLink = urlMatch[1];\r\n      }\r\n    }\r\n    \r\n    return new Response(JSON.stringify({ \r\n      success: true,\r\n      filename,\r\n      path: `${config.path}/${filename}`,\r\n      shareLink,\r\n      message: 'Form data exported to Nextcloud successfully!'\r\n    }), {\r\n      status: 200,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Error exporting to Nextcloud:', error);\r\n    return new Response(JSON.stringify({ \r\n      error: error instanceof Error ? error.message : 'Failed to export to Nextcloud' \r\n    }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n};\r\n\r\n// Helper function to export form submission to Nextcloud\r\nexport async function exportToNextcloud(env: any, formTitle: string, submissionId: string, data: any) {\r\n  const configStr = await env.CACHE_KV.get('integration:nextcloud:config');\r\n  if (!configStr) {\r\n    return null; // Integration not configured\r\n  }\r\n  \r\n  const exportData = {\r\n    formTitle,\r\n    submissionId,\r\n    data,\r\n    format: 'json'\r\n  };\r\n  \r\n  // Call the export endpoint internally\r\n  const response = await fetch('/api/export/nextcloud', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify(exportData)\r\n  });\r\n  \r\n  if (!response.ok) {\r\n    console.error('Failed to export to Nextcloud:', await response.text());\r\n    return null;\r\n  }\r\n  \r\n  return await response.json();\r\n}"],"names":[],"mappings":"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"}