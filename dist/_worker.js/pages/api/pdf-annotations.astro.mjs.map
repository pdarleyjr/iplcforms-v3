{"version":3,"file":"pdf-annotations.astro.mjs","sources":["../../../../src/pages/api/pdf-annotations/index.ts"],"sourcesContent":["import type { APIRoute } from 'astro';\r\nimport { getD1Manager } from '../../../lib/services/d1-connection-manager';\r\n\r\nexport const GET: APIRoute = async ({ request, locals }) => {\r\n  try {\r\n    // @ts-ignore - Cloudflare runtime types\r\n    const db = (locals as any).runtime?.env?.DB;\r\n    if (!db) {\r\n      return new Response(JSON.stringify({ error: 'Database not available' }), {\r\n        status: 503,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    const d1Manager = getD1Manager(db);\r\n    \r\n    // Get query parameters\r\n    const url = new URL(request.url);\r\n    const pdfId = url.searchParams.get('pdf_id');\r\n    \r\n    let query = 'SELECT * FROM pdf_annotations';\r\n    const params: any[] = [];\r\n    \r\n    if (pdfId) {\r\n      query += ' WHERE pdf_id = ?';\r\n      params.push(pdfId);\r\n    }\r\n    \r\n    query += ' ORDER BY created_at DESC';\r\n    \r\n    const stmt = d1Manager.prepare(query);\r\n    const result = await stmt.bind(...params).all();\r\n    \r\n    if (!result.success) {\r\n      return new Response(JSON.stringify({ error: 'Failed to fetch annotations' }), {\r\n        status: 500,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    // Parse JSON data for each annotation\r\n    const annotations = result.results.map((row: any) => ({\r\n      ...row,\r\n      data: row.data ? d1Manager.parseJSON(row.data) : null\r\n    }));\r\n    \r\n    return new Response(JSON.stringify({ annotations }), {\r\n      status: 200,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  } catch (error) {\r\n    console.error('Error fetching annotations:', error);\r\n    return new Response(JSON.stringify({ error: 'Internal server error' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n};\r\n\r\nexport const POST: APIRoute = async ({ request, locals }) => {\r\n  try {\r\n    // @ts-ignore - Cloudflare runtime types\r\n    const db = (locals as any).runtime?.env?.DB;\r\n    if (!db) {\r\n      return new Response(JSON.stringify({ error: 'Database not available' }), {\r\n        status: 503,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    const d1Manager = getD1Manager(db);\r\n    \r\n    const body = await request.json() as { pdf_id?: string; annotations?: any[] };\r\n    const { pdf_id, annotations } = body;\r\n    \r\n    if (!pdf_id || !annotations) {\r\n      return new Response(JSON.stringify({ error: 'Missing required fields' }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    // Generate unique ID\r\n    const id = `pdf-ann-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\r\n    \r\n    // Insert new annotation record\r\n    const stmt = d1Manager.prepare(`\r\n      INSERT INTO pdf_annotations (id, pdf_id, data, created_at)\r\n      VALUES (?, ?, ?, datetime('now'))\r\n    `);\r\n    \r\n    const result = await stmt.bind(\r\n      id,\r\n      pdf_id,\r\n      JSON.stringify(annotations)\r\n    ).run();\r\n    \r\n    if (!result.success) {\r\n      return new Response(JSON.stringify({ error: 'Failed to save annotations' }), {\r\n        status: 500,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    return new Response(JSON.stringify({ \r\n      success: true, \r\n      id,\r\n      message: 'Annotations saved successfully' \r\n    }), {\r\n      status: 201,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  } catch (error) {\r\n    console.error('Error saving annotations:', error);\r\n    return new Response(JSON.stringify({ error: 'Internal server error' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n};\r\n\r\nexport const DELETE: APIRoute = async ({ request, locals }) => {\r\n  try {\r\n    // @ts-ignore - Cloudflare runtime types\r\n    const db = (locals as any).runtime?.env?.DB;\r\n    if (!db) {\r\n      return new Response(JSON.stringify({ error: 'Database not available' }), {\r\n        status: 503,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    const d1Manager = getD1Manager(db);\r\n    \r\n    const url = new URL(request.url);\r\n    const id = url.searchParams.get('id');\r\n    const pdfId = url.searchParams.get('pdf_id');\r\n    \r\n    if (!id && !pdfId) {\r\n      return new Response(JSON.stringify({ error: 'Missing id or pdf_id parameter' }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    let query = 'DELETE FROM pdf_annotations WHERE ';\r\n    const params: any[] = [];\r\n    \r\n    if (id) {\r\n      query += 'id = ?';\r\n      params.push(id);\r\n    } else if (pdfId) {\r\n      query += 'pdf_id = ?';\r\n      params.push(pdfId);\r\n    }\r\n    \r\n    const stmt = d1Manager.prepare(query);\r\n    const result = await stmt.bind(...params).run();\r\n    \r\n    if (!result.success) {\r\n      return new Response(JSON.stringify({ error: 'Failed to delete annotations' }), {\r\n        status: 500,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    return new Response(JSON.stringify({ \r\n      success: true,\r\n      deleted: result.meta.changes,\r\n      message: 'Annotations deleted successfully' \r\n    }), {\r\n      status: 200,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  } catch (error) {\r\n    console.error('Error deleting annotations:', error);\r\n    return new Response(JSON.stringify({ error: 'Internal server error' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n};"],"names":[],"mappings":"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"}