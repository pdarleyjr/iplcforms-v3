{"version":3,"file":"form-sessions.astro.mjs","sources":["../../../../src/pages/api/form-sessions.ts"],"sourcesContent":["import type { APIRoute } from 'astro';\r\n\r\nexport const GET: APIRoute = async ({ request, locals }) => {\r\n  const env = (locals as any).runtime?.env;\r\n  \r\n  // Handle test environment\r\n  if (!env) {\r\n    return new Response(JSON.stringify({\r\n      success: true,\r\n      data: {\r\n        sessionId: 'test-session',\r\n        components: [],\r\n        metadata: {}\r\n      }\r\n    }), {\r\n      status: 200,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n  const url = new URL(request.url);\r\n  const sessionId = url.searchParams.get('sessionId');\r\n\r\n  if (!sessionId) {\r\n    return new Response(JSON.stringify({ \r\n      success: false, \r\n      error: 'sessionId is required' \r\n    }), {\r\n      status: 400,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  try {\r\n    // Get Durable Object instance\r\n    const id = env.FORM_SESSION.idFromName(sessionId);\r\n    const stub = env.FORM_SESSION.get(id);\r\n    \r\n    // Forward request to Durable Object\r\n    const doUrl = new URL(request.url);\r\n    doUrl.searchParams.set('sessionId', sessionId);\r\n    \r\n    const response = await stub.fetch(doUrl.toString(), {\r\n      method: 'GET'\r\n    });\r\n\r\n    return response;\r\n  } catch (error) {\r\n    console.error('Error fetching session:', error);\r\n    return new Response(JSON.stringify({ \r\n      success: false, \r\n      error: 'Failed to fetch session' \r\n    }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n};\r\n\r\nexport const POST: APIRoute = async ({ request, locals }) => {\r\n  try {\r\n    const env = (locals as any).runtime?.env;\r\n    \r\n    // Clone the request to read the body without consuming it\r\n    const requestClone = request.clone();\r\n    const body = await requestClone.json() as {\r\n      sessionId: string;\r\n      formData?: any;\r\n      templateId?: number;\r\n      userName?: string;\r\n      timestamp?: string;\r\n    };\r\n    \r\n    // Handle test environment\r\n    if (!env || !env.FORM_SESSION) {\r\n      return new Response(JSON.stringify({\r\n        success: true,\r\n        message: 'Test environment - session saved',\r\n        session: {\r\n          sessionId: body.sessionId,\r\n          formData: body.formData || {},\r\n          timestamp: new Date().toISOString()\r\n        }\r\n      }), {\r\n        status: 200,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    const { sessionId } = body;\r\n\r\n    if (!sessionId) {\r\n      return new Response(JSON.stringify({\r\n        success: false,\r\n        error: 'sessionId is required'\r\n      }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    // Get Durable Object instance\r\n    const id = env.FORM_SESSION.idFromName(sessionId);\r\n    const stub = env.FORM_SESSION.get(id);\r\n    \r\n    // Forward the original request to Durable Object\r\n    const doUrl = new URL(request.url);\r\n    doUrl.searchParams.set('sessionId', sessionId);\r\n    \r\n    // Pass the body data we extracted from the clone\r\n    const response = await stub.fetch(doUrl.toString(), {\r\n      method: 'POST',\r\n      headers: {\r\n        ...Object.fromEntries(request.headers.entries()),\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(body)\r\n    });\r\n\r\n    return response;\r\n  } catch (error) {\r\n    console.error('Error saving session:', error);\r\n    return new Response(JSON.stringify({\r\n      success: false,\r\n      error: 'Failed to save session',\r\n      details: error instanceof Error ? error.message : 'Unknown error'\r\n    }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n};\r\n\r\nexport const DELETE: APIRoute = async ({ request, locals }) => {\r\n  const env = (locals as any).runtime?.env;\r\n  \r\n  // Handle test environment\r\n  if (!env) {\r\n    return new Response(JSON.stringify({\r\n      success: true,\r\n      message: 'Test environment - session deleted'\r\n    }), {\r\n      status: 200,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n  const url = new URL(request.url);\r\n  const sessionId = url.searchParams.get('sessionId');\r\n\r\n  if (!sessionId) {\r\n    return new Response(JSON.stringify({ \r\n      success: false, \r\n      error: 'sessionId is required' \r\n    }), {\r\n      status: 400,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  try {\r\n    // Get Durable Object instance\r\n    const id = env.FORM_SESSION.idFromName(sessionId);\r\n    const stub = env.FORM_SESSION.get(id);\r\n    \r\n    // Forward request to Durable Object\r\n    const doUrl = new URL(request.url);\r\n    doUrl.searchParams.set('sessionId', sessionId);\r\n    \r\n    const response = await stub.fetch(doUrl.toString(), {\r\n      method: 'DELETE'\r\n    });\r\n\r\n    return response;\r\n  } catch (error) {\r\n    console.error('Error deleting session:', error);\r\n    return new Response(JSON.stringify({ \r\n      success: false, \r\n      error: 'Failed to delete session' \r\n    }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n};"],"names":[],"mappings":"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"}