{"version":3,"file":"conversations.astro.mjs","sources":["../../../../../src/pages/api/chat/conversations.ts"],"sourcesContent":["import type { APIRoute } from 'astro';\r\n\r\ninterface Conversation {\r\n  id: string;\r\n  title: string;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n  lastMessage?: string;\r\n  messageCount: number;\r\n}\r\n\r\nexport const GET: APIRoute = async ({ locals }) => {\r\n  const env = (locals as any).runtime.env;\r\n  \r\n  try {\r\n    // List all conversations for the user\r\n    const { keys } = await env.CHAT_HISTORY.list({\r\n      prefix: 'conversation:',\r\n      limit: 1000\r\n    });\r\n    \r\n    // Fetch all conversation metadata\r\n    const conversations: Conversation[] = [];\r\n    for (const key of keys) {\r\n      const conversationData = await env.CHAT_HISTORY.get(key.name);\r\n      if (conversationData) {\r\n        try {\r\n          const conversation = JSON.parse(conversationData);\r\n          conversations.push(conversation);\r\n        } catch (parseError) {\r\n          console.error(`Failed to parse conversation ${key.name}:`, parseError);\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Sort by updated date, newest first\r\n    conversations.sort((a, b) => \r\n      new Date(b.updatedAt || b.createdAt).getTime() - \r\n      new Date(a.updatedAt || a.createdAt).getTime()\r\n    );\r\n    \r\n    return new Response(JSON.stringify({\r\n      conversations,\r\n      total: conversations.length\r\n    }), {\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Failed to list conversations:', error);\r\n    \r\n    // Return empty array if no conversations exist yet\r\n    if (error instanceof Error && error.message.includes('not found')) {\r\n      return new Response(JSON.stringify({\r\n        conversations: [],\r\n        total: 0\r\n      }), {\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    return new Response(JSON.stringify({ \r\n      error: 'Failed to list conversations',\r\n      details: error instanceof Error ? error.message : 'Unknown error'\r\n    }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n};\r\n\r\nexport const POST: APIRoute = async ({ request, locals }) => {\r\n  const env = (locals as any).runtime.env;\r\n  \r\n  try {\r\n    const data = await request.json() as { title?: string };\r\n    const { title } = data;\r\n    \r\n    // Generate a unique conversation ID\r\n    const conversationId = `conv_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n    \r\n    const conversation: Conversation = {\r\n      id: conversationId,\r\n      title: title || 'New Conversation',\r\n      createdAt: new Date().toISOString(),\r\n      updatedAt: new Date().toISOString(),\r\n      messageCount: 0\r\n    };\r\n    \r\n    // Store the conversation\r\n    await env.CHAT_HISTORY.put(\r\n      `conversation:${conversationId}`,\r\n      JSON.stringify(conversation)\r\n    );\r\n    \r\n    return new Response(JSON.stringify(conversation), {\r\n      status: 201,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Failed to create conversation:', error);\r\n    return new Response(JSON.stringify({ \r\n      error: 'Failed to create conversation',\r\n      details: error instanceof Error ? error.message : 'Unknown error'\r\n    }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n};\r\n\r\nexport const DELETE: APIRoute = async ({ url, locals }) => {\r\n  const env = (locals as any).runtime.env;\r\n  const conversationId = url.pathname.split('/').pop();\r\n  \r\n  if (!conversationId) {\r\n    return new Response(JSON.stringify({ \r\n      error: 'Conversation ID is required' \r\n    }), {\r\n      status: 400,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n  \r\n  try {\r\n    // Delete the conversation\r\n    await env.CHAT_HISTORY.delete(`conversation:${conversationId}`);\r\n    \r\n    // Also delete all messages in this conversation\r\n    const { keys } = await env.CHAT_HISTORY.list({\r\n      prefix: `message:${conversationId}:`,\r\n      limit: 1000\r\n    });\r\n    \r\n    // Delete all messages\r\n    for (const key of keys) {\r\n      await env.CHAT_HISTORY.delete(key.name);\r\n    }\r\n    \r\n    return new Response(JSON.stringify({ \r\n      message: 'Conversation deleted successfully' \r\n    }), {\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Failed to delete conversation:', error);\r\n    return new Response(JSON.stringify({ \r\n      error: 'Failed to delete conversation',\r\n      details: error instanceof Error ? error.message : 'Unknown error'\r\n    }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n};"],"names":[],"mappings":";;;AAWO,MAAM,GAAA,GAAgB,OAAO,EAAE,MAAA,EAAO,KAAM;AACjD,EAAA,MAAM,GAAA,GAAO,OAAe,OAAA,CAAQ,GAAA;AAEpC,EAAA,IAAI;AAEF,IAAA,MAAM,EAAE,IAAA,EAAK,GAAI,MAAM,GAAA,CAAI,aAAa,IAAA,CAAK;AAAA,MAC3C,MAAA,EAAQ,eAAA;AAAA,MACR,KAAA,EAAO;AAAA,KACR,CAAA;AAGD,IAAA,MAAM,gBAAgC,EAAC;AACvC,IAAA,KAAA,MAAW,OAAO,IAAA,EAAM;AACtB,MAAA,MAAM,mBAAmB,MAAM,GAAA,CAAI,YAAA,CAAa,GAAA,CAAI,IAAI,IAAI,CAAA;AAC5D,MAAA,IAAI,gBAAA,EAAkB;AACpB,QAAA,IAAI;AACF,UAAA,MAAM,YAAA,GAAe,IAAA,CAAK,KAAA,CAAM,gBAAgB,CAAA;AAChD,UAAA,aAAA,CAAc,KAAK,YAAY,CAAA;AAAA,QACjC,SAAS,UAAA,EAAY;AACnB,UAAA,OAAA,CAAQ,KAAA,CAAM,CAAA,6BAAA,EAAgC,GAAA,CAAI,IAAI,KAAK,UAAU,CAAA;AAAA,QACvE;AAAA,MACF;AAAA,IACF;AAGA,IAAA,aAAA,CAAc,IAAA;AAAA,MAAK,CAAC,CAAA,EAAG,CAAA,KACrB,IAAI,IAAA,CAAK,CAAA,CAAE,aAAa,CAAA,CAAE,SAAS,EAAE,OAAA,EAAQ,GAC7C,IAAI,IAAA,CAAK,CAAA,CAAE,aAAa,CAAA,CAAE,SAAS,EAAE,OAAA;AAAQ,KAC/C;AAEA,IAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,MACjC,aAAA;AAAA,MACA,OAAO,aAAA,CAAc;AAAA,KACtB,CAAA,EAAG;AAAA,MACF,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,KAC/C,CAAA;AAAA,EAEH,SAAS,KAAA,EAAO;AACd,IAAA,OAAA,CAAQ,KAAA,CAAM,iCAAiC,KAAK,CAAA;AAGpD,IAAA,IAAI,iBAAiB,KAAA,IAAS,KAAA,CAAM,OAAA,CAAQ,QAAA,CAAS,WAAW,CAAA,EAAG;AACjE,MAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,QACjC,eAAe,EAAC;AAAA,QAChB,KAAA,EAAO;AAAA,OACR,CAAA,EAAG;AAAA,QACF,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,OAC/C,CAAA;AAAA,IACH;AAEA,IAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,MACjC,KAAA,EAAO,8BAAA;AAAA,MACP,OAAA,EAAS,KAAA,YAAiB,KAAA,GAAQ,KAAA,CAAM,OAAA,GAAU;AAAA,KACnD,CAAA,EAAG;AAAA,MACF,MAAA,EAAQ,GAAA;AAAA,MACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,KAC/C,CAAA;AAAA,EACH;AACF,CAAA;AAEO,MAAM,IAAA,GAAiB,OAAO,EAAE,OAAA,EAAS,QAAO,KAAM;AAC3D,EAAA,MAAM,GAAA,GAAO,OAAe,OAAA,CAAQ,GAAA;AAEpC,EAAA,IAAI;AACF,IAAA,MAAM,IAAA,GAAO,MAAM,OAAA,CAAQ,IAAA,EAAK;AAChC,IAAA,MAAM,EAAE,OAAM,GAAI,IAAA;AAGlB,IAAA,MAAM,cAAA,GAAiB,CAAA,KAAA,EAAQ,IAAA,CAAK,GAAA,EAAK,CAAA,CAAA,EAAI,IAAA,CAAK,MAAA,EAAO,CAAE,SAAS,EAAE,CAAA,CAAE,MAAA,CAAO,CAAA,EAAG,CAAC,CAAC,CAAA,CAAA;AAEpF,IAAA,MAAM,YAAA,GAA6B;AAAA,MACjC,EAAA,EAAI,cAAA;AAAA,MACJ,OAAO,KAAA,IAAS,kBAAA;AAAA,MAChB,SAAA,EAAA,iBAAW,IAAI,IAAA,EAAK,EAAE,WAAA,EAAY;AAAA,MAClC,SAAA,EAAA,iBAAW,IAAI,IAAA,EAAK,EAAE,WAAA,EAAY;AAAA,MAClC,YAAA,EAAc;AAAA,KAChB;AAGA,IAAA,MAAM,IAAI,YAAA,CAAa,GAAA;AAAA,MACrB,gBAAgB,cAAc,CAAA,CAAA;AAAA,MAC9B,IAAA,CAAK,UAAU,YAAY;AAAA,KAC7B;AAEA,IAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU,YAAY,CAAA,EAAG;AAAA,MAChD,MAAA,EAAQ,GAAA;AAAA,MACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,KAC/C,CAAA;AAAA,EAEH,SAAS,KAAA,EAAO;AACd,IAAA,OAAA,CAAQ,KAAA,CAAM,kCAAkC,KAAK,CAAA;AACrD,IAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,MACjC,KAAA,EAAO,+BAAA;AAAA,MACP,OAAA,EAAS,KAAA,YAAiB,KAAA,GAAQ,KAAA,CAAM,OAAA,GAAU;AAAA,KACnD,CAAA,EAAG;AAAA,MACF,MAAA,EAAQ,GAAA;AAAA,MACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,KAC/C,CAAA;AAAA,EACH;AACF,CAAA;AAEO,MAAM,MAAA,GAAmB,OAAO,EAAE,GAAA,EAAK,QAAO,KAAM;AACzD,EAAA,MAAM,GAAA,GAAO,OAAe,OAAA,CAAQ,GAAA;AACpC,EAAA,MAAM,iBAAiB,GAAA,CAAI,QAAA,CAAS,KAAA,CAAM,GAAG,EAAE,GAAA,EAAI;AAEnD,EAAA,IAAI,CAAC,cAAA,EAAgB;AACnB,IAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,MACjC,KAAA,EAAO;AAAA,KACR,CAAA,EAAG;AAAA,MACF,MAAA,EAAQ,GAAA;AAAA,MACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,KAC/C,CAAA;AAAA,EACH;AAEA,EAAA,IAAI;AAEF,IAAA,MAAM,GAAA,CAAI,YAAA,CAAa,MAAA,CAAO,CAAA,aAAA,EAAgB,cAAc,CAAA,CAAE,CAAA;AAG9D,IAAA,MAAM,EAAE,IAAA,EAAK,GAAI,MAAM,GAAA,CAAI,aAAa,IAAA,CAAK;AAAA,MAC3C,MAAA,EAAQ,WAAW,cAAc,CAAA,CAAA,CAAA;AAAA,MACjC,KAAA,EAAO;AAAA,KACR,CAAA;AAGD,IAAA,KAAA,MAAW,OAAO,IAAA,EAAM;AACtB,MAAA,MAAM,GAAA,CAAI,YAAA,CAAa,MAAA,CAAO,GAAA,CAAI,IAAI,CAAA;AAAA,IACxC;AAEA,IAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,MACjC,OAAA,EAAS;AAAA,KACV,CAAA,EAAG;AAAA,MACF,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,KAC/C,CAAA;AAAA,EAEH,SAAS,KAAA,EAAO;AACd,IAAA,OAAA,CAAQ,KAAA,CAAM,kCAAkC,KAAK,CAAA;AACrD,IAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,MACjC,KAAA,EAAO,+BAAA;AAAA,MACP,OAAA,EAAS,KAAA,YAAiB,KAAA,GAAQ,KAAA,CAAM,OAAA,GAAU;AAAA,KACnD,CAAA,EAAG;AAAA,MACF,MAAA,EAAQ,GAAA;AAAA,MACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,KAC/C,CAAA;AAAA,EACH;AACF,CAAA;;;;;;;;;;;;;"}