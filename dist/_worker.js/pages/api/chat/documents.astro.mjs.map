{"version":3,"file":"documents.astro.mjs","sources":["../../../../../src/pages/api/chat/documents.ts"],"sourcesContent":["import type { APIRoute } from 'astro';\r\n\r\nexport const GET: APIRoute = async ({ url, locals }) => {\r\n  const env = locals.runtime.env;\r\n  const conversationId = url.searchParams.get('conversationId');\r\n  \r\n  try {\r\n    // List all documents, optionally filtered by conversation\r\n    const prefix = conversationId ? `doc:` : 'doc:';\r\n    const { keys } = await env.CHAT_HISTORY.list({\r\n      prefix,\r\n      limit: 1000\r\n    });\r\n    \r\n    // Fetch all document metadata\r\n    const documents = [];\r\n    for (const key of keys) {\r\n      const docData = await env.CHAT_HISTORY.get(key.name);\r\n      if (docData) {\r\n        const doc = JSON.parse(docData);\r\n        // Filter by conversationId if specified\r\n        if (!conversationId || doc.conversationId === conversationId) {\r\n          documents.push(doc);\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Sort by upload date, newest first\r\n    documents.sort((a, b) => \r\n      new Date(b.uploadedAt).getTime() - new Date(a.uploadedAt).getTime()\r\n    );\r\n    \r\n    return new Response(JSON.stringify({\r\n      documents,\r\n      total: documents.length\r\n    }), {\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Failed to list documents:', error);\r\n    return new Response(JSON.stringify({ \r\n      error: 'Failed to list documents',\r\n      details: error instanceof Error ? error.message : 'Unknown error'\r\n    }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n};"],"names":[],"mappings":";;;AAEO,MAAM,GAAA,GAAgB,OAAO,EAAE,GAAA,EAAK,QAAO,KAAM;AACtD,EAAA,MAAM,GAAA,GAAM,OAAO,OAAA,CAAQ,GAAA;AAC3B,EAAA,MAAM,cAAA,GAAiB,GAAA,CAAI,YAAA,CAAa,GAAA,CAAI,gBAAgB,CAAA;AAE5D,EAAA,IAAI;AAEF,IAAA,MAAM,MAAA,GAAS,iBAAiB,CAAA,IAAA,CAAA,GAAS,MAAA;AACzC,IAAA,MAAM,EAAE,IAAA,EAAK,GAAI,MAAM,GAAA,CAAI,aAAa,IAAA,CAAK;AAAA,MAC3C,MAAA;AAAA,MACA,KAAA,EAAO;AAAA,KACR,CAAA;AAGD,IAAA,MAAM,YAAY,EAAC;AACnB,IAAA,KAAA,MAAW,OAAO,IAAA,EAAM;AACtB,MAAA,MAAM,UAAU,MAAM,GAAA,CAAI,YAAA,CAAa,GAAA,CAAI,IAAI,IAAI,CAAA;AACnD,MAAA,IAAI,OAAA,EAAS;AACX,QAAA,MAAM,GAAA,GAAM,IAAA,CAAK,KAAA,CAAM,OAAO,CAAA;AAE9B,QAAA,IAAI,CAAC,cAAA,IAAkB,GAAA,CAAI,cAAA,KAAmB,cAAA,EAAgB;AAC5D,UAAA,SAAA,CAAU,KAAK,GAAG,CAAA;AAAA,QACpB;AAAA,MACF;AAAA,IACF;AAGA,IAAA,SAAA,CAAU,IAAA;AAAA,MAAK,CAAC,CAAA,EAAG,CAAA,KACjB,IAAI,KAAK,CAAA,CAAE,UAAU,CAAA,CAAE,OAAA,KAAY,IAAI,IAAA,CAAK,CAAA,CAAE,UAAU,EAAE,OAAA;AAAQ,KACpE;AAEA,IAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,MACjC,SAAA;AAAA,MACA,OAAO,SAAA,CAAU;AAAA,KAClB,CAAA,EAAG;AAAA,MACF,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,KAC/C,CAAA;AAAA,EAEH,SAAS,KAAA,EAAO;AACd,IAAA,OAAA,CAAQ,KAAA,CAAM,6BAA6B,KAAK,CAAA;AAChD,IAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,MACjC,KAAA,EAAO,0BAAA;AAAA,MACP,OAAA,EAAS,KAAA,YAAiB,KAAA,GAAQ,KAAA,CAAM,OAAA,GAAU;AAAA,KACnD,CAAA,EAAG;AAAA,MACF,MAAA,EAAQ,GAAA;AAAA,MACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,KAC/C,CAAA;AAAA,EACH;AACF,CAAA;;;;;;;;;;;"}