{"version":3,"file":"query.astro.mjs","sources":["../../../../../src/pages/api/chat/query.ts"],"sourcesContent":["import type { APIRoute } from 'astro';\r\nimport { nanoid } from 'nanoid';\r\nimport { checkRateLimit } from '../../../lib/ai';\r\nimport type { AIEnv, ChatMessage } from '../../../lib/ai';\r\n\r\nimport { withRBAC } from '@/lib/middleware/rbac-middleware';\r\nexport const POST: APIRoute = withRBAC(['clinician','admin'], async ({ request, locals }) => {\r\n  const env = (locals as any).runtime.env as unknown as AIEnv;\r\n  \r\n  try {\r\n    const body = await request.json() as any;\r\n    \r\n    if (!body || typeof body !== 'object') {\r\n      return new Response(JSON.stringify({ error: 'Invalid request body' }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    const { message, conversationId, documentIds } = body;\r\n    \r\n    if (!message || typeof message !== 'string') {\r\n      return new Response(JSON.stringify({ error: 'No message provided' }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    // Create or use existing conversation\r\n    const convId = conversationId || nanoid();\r\n    \r\n    // Check rate limit\r\n    const clientId = request.headers.get('CF-Connecting-IP') || 'anonymous';\r\n    const rateLimitInfo = await checkRateLimit(clientId, env);\r\n    \r\n    if (!rateLimitInfo.allowed) {\r\n      return new Response(JSON.stringify({\r\n        error: 'Rate limit exceeded',\r\n        retryAfter: (rateLimitInfo as any).retryAfter || 60\r\n      }), {\r\n        status: 429,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'X-RateLimit-Limit': '60',\r\n          'X-RateLimit-Remaining': rateLimitInfo.remaining.toString(),\r\n          'X-RateLimit-Reset': rateLimitInfo.resetAt.toString()\r\n        }\r\n      });\r\n    }\r\n\r\n    // Store user message locally\r\n    const userMessageId = `${convId}:${nanoid()}`;\r\n    const userMessageData = {\r\n      id: userMessageId,\r\n      conversationId: convId,\r\n      role: 'user',\r\n      content: message,\r\n      timestamp: new Date().toISOString()\r\n    };\r\n    await env.CHAT_HISTORY.put(\r\n      `msg:${userMessageId}`,\r\n      JSON.stringify(userMessageData)\r\n    );\r\n\r\n    // Update conversation metadata\r\n    await env.CHAT_HISTORY.put(\r\n      `conv:${convId}`,\r\n      JSON.stringify({\r\n        id: convId,\r\n        title: message.substring(0, 50) + (message.length > 50 ? '...' : ''),\r\n        lastMessage: message.substring(0, 100) + (message.length > 100 ? '...' : ''),\r\n        timestamp: new Date().toISOString()\r\n      })\r\n    );\r\n\r\n    // Get conversation history\r\n    const history: ChatMessage[] = [];\r\n    const historyKeys = await env.CHAT_HISTORY.list({\r\n      prefix: `msg:${convId}:`,\r\n      limit: 10\r\n    });\r\n    \r\n    for (const key of historyKeys.keys) {\r\n      const msgData = await env.CHAT_HISTORY.get(key.name);\r\n      if (msgData) {\r\n        const msg = JSON.parse(msgData);\r\n        history.push({\r\n          role: msg.role as 'user' | 'assistant',\r\n          content: msg.content\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Use IPLC_AI service binding\r\n    const iplcAI = (env as any).IPLC_AI;\r\n    if (!iplcAI || typeof iplcAI.fetch !== 'function') {\r\n      return new Response(JSON.stringify({\r\n        error: 'AI service not available',\r\n        details: 'IPLC_AI service binding is not configured'\r\n      }), {\r\n        status: 503,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    // Call the iplc-ai worker's /rag endpoint\r\n    const ragResponse = await iplcAI.fetch('https://iplc-ai.worker/rag', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        question: message,\r\n        history: history,\r\n        sessionId: convId,\r\n        documentIds: documentIds\r\n      })\r\n    });\r\n    \r\n    if (!ragResponse.ok) {\r\n      const error = await ragResponse.text();\r\n      console.error('IPLC_AI service error:', error);\r\n      return new Response(JSON.stringify({\r\n        error: 'AI service error',\r\n        details: error\r\n      }), {\r\n        status: ragResponse.status,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    // Store AI response in history\r\n    const assistantMessageId = `${convId}:${nanoid()}`;\r\n    const responseClone = ragResponse.clone();\r\n    const responseText = await responseClone.text();\r\n    \r\n    // Extract the actual message from SSE stream if needed\r\n    let assistantContent = responseText;\r\n    if (responseText.includes('data: ')) {\r\n      const lines = responseText.split('\\n');\r\n      assistantContent = lines\r\n        .filter((line: string) => line.startsWith('data: '))\r\n        .map((line: string) => line.substring(6))\r\n        .filter((data: string) => data !== '[DONE]')\r\n        .join('');\r\n    }\r\n    \r\n    const assistantMessageData = {\r\n      id: assistantMessageId,\r\n      conversationId: convId,\r\n      role: 'assistant',\r\n      content: assistantContent,\r\n      timestamp: new Date().toISOString()\r\n    };\r\n    await env.CHAT_HISTORY.put(\r\n      `msg:${assistantMessageId}`,\r\n      JSON.stringify(assistantMessageData)\r\n    );\r\n    \r\n    // Return the streaming response from iplc-ai\r\n    return new Response(ragResponse.body, {\r\n      headers: {\r\n        'Content-Type': 'text/event-stream',\r\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\r\n        'Connection': 'keep-alive',\r\n        'X-Accel-Buffering': 'no',\r\n        'Transfer-Encoding': 'chunked',\r\n        'X-RateLimit-Limit': '60',\r\n        'X-RateLimit-Remaining': rateLimitInfo.remaining.toString(),\r\n        'X-RateLimit-Reset': rateLimitInfo.resetAt.toString()\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Query error:', error instanceof Error ? error.message : 'Unknown error');\r\n    if (error instanceof Error) {\r\n      console.error('Error stack:', error.stack);\r\n    }\r\n    return new Response(JSON.stringify({\r\n      error: 'Failed to process query',\r\n      details: error instanceof Error ? error.message : 'Unknown error'\r\n    }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n});"],"names":[],"mappings":"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"}