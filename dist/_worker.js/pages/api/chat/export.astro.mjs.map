{"version":3,"file":"export.astro.mjs","sources":["../../../../../src/pages/api/chat/export.ts"],"sourcesContent":["import type { APIRoute } from 'astro';\n\nexport const runtime = 'edge';\n\ninterface ExportRequest {\n  conversationId: string;\n  format: 'markdown' | 'json';\n}\n\ninterface Message {\n  role: 'user' | 'assistant';\n  content: string;\n  timestamp: string;\n  citations?: Array<{\n    id: number;\n    documentName: string;\n    text: string;\n    score: number;\n  }>;\n}\n\nexport const POST: APIRoute = async ({ request, locals }) => {\n  try {\n    const { env } = locals.runtime;\n    const body = await request.json() as ExportRequest;\n    \n    if (!body.conversationId) {\n      return new Response(JSON.stringify({ \n        error: 'Conversation ID is required' \n      }), { \n        status: 400,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n    \n    // Retrieve conversation history from KV\n    const historyData = await env.KV.get(`chat:history:${body.conversationId}`);\n    \n    if (!historyData) {\n      return new Response(JSON.stringify({ \n        error: 'Conversation not found' \n      }), { \n        status: 404,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n    \n    const messages: Message[] = JSON.parse(historyData);\n    \n    if (body.format === 'json') {\n      // Return raw JSON format\n      return new Response(JSON.stringify({\n        conversationId: body.conversationId,\n        exportedAt: new Date().toISOString(),\n        messages\n      }), {\n        status: 200,\n        headers: {\n          'Content-Type': 'application/json',\n          'Content-Disposition': `attachment; filename=\"conversation-${body.conversationId}.json\"`\n        }\n      });\n    }\n    \n    // Generate Markdown format\n    let markdown = `# AI Chat Conversation\\n\\n`;\n    markdown += `**Exported:** ${new Date().toLocaleString()}\\n`;\n    markdown += `**Conversation ID:** ${body.conversationId}\\n\\n`;\n    markdown += `---\\n\\n`;\n    \n    // Process each message\n    messages.forEach((message, index) => {\n      const timestamp = new Date(message.timestamp).toLocaleTimeString();\n      \n      if (message.role === 'user') {\n        markdown += `## ðŸ‘¤ User (${timestamp})\\n\\n`;\n        markdown += `${message.content}\\n\\n`;\n      } else {\n        markdown += `## ðŸ¤– AI Assistant (${timestamp})\\n\\n`;\n        \n        // Replace citation markers with markdown footnotes\n        let content = message.content;\n        const footnotes: string[] = [];\n        \n        if (message.citations && message.citations.length > 0) {\n          content = content.replace(/\\^\\[(\\d+)\\]/g, (match, num) => {\n            const citation = message.citations?.find(c => c.id === parseInt(num));\n            if (citation) {\n              footnotes.push(`[^${num}]: From \"${citation.documentName}\" - ${citation.text.substring(0, 200)}...`);\n              return `[^${num}]`;\n            }\n            return match;\n          });\n        }\n        \n        markdown += `${content}\\n\\n`;\n        \n        // Add footnotes if any\n        if (footnotes.length > 0) {\n          markdown += `### Sources\\n\\n`;\n          footnotes.forEach(footnote => {\n            markdown += `${footnote}\\n\\n`;\n          });\n        }\n      }\n      \n      // Add separator between Q&A pairs\n      if (index < messages.length - 1) {\n        markdown += `---\\n\\n`;\n      }\n    });\n    \n    // Return markdown file\n    return new Response(markdown, {\n      status: 200,\n      headers: {\n        'Content-Type': 'text/markdown; charset=utf-8',\n        'Content-Disposition': `attachment; filename=\"conversation-${body.conversationId}.md\"`\n      }\n    });\n    \n  } catch (error) {\n    console.error('Error exporting conversation:', error);\n    return new Response(JSON.stringify({ \n      error: 'Failed to export conversation' \n    }), { \n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n};\n\n// GET endpoint to retrieve available export formats\nexport const GET: APIRoute = async () => {\n  return new Response(JSON.stringify({\n    formats: [\n      {\n        id: 'markdown',\n        name: 'Markdown',\n        extension: '.md',\n        mimeType: 'text/markdown'\n      },\n      {\n        id: 'json',\n        name: 'JSON',\n        extension: '.json',\n        mimeType: 'application/json'\n      }\n    ]\n  }), {\n    status: 200,\n    headers: { 'Content-Type': 'application/json' }\n  });\n};"],"names":[],"mappings":";;;AAEO,MAAM,OAAA,GAAU,MAAA;AAmBhB,MAAM,IAAA,GAAiB,OAAO,EAAE,OAAA,EAAS,QAAO,KAAM;AAC3D,EAAA,IAAI;AACF,IAAA,MAAM,EAAE,GAAA,EAAI,GAAI,MAAA,CAAO,OAAA;AACvB,IAAA,MAAM,IAAA,GAAO,MAAM,OAAA,CAAQ,IAAA,EAAK;AAEhC,IAAA,IAAI,CAAC,KAAK,cAAA,EAAgB;AACxB,MAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,QACjC,KAAA,EAAO;AAAA,OACR,CAAA,EAAG;AAAA,QACF,MAAA,EAAQ,GAAA;AAAA,QACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,OAC/C,CAAA;AAAA,IACH;AAGA,IAAA,MAAM,WAAA,GAAc,MAAM,GAAA,CAAI,EAAA,CAAG,IAAI,CAAA,aAAA,EAAgB,IAAA,CAAK,cAAc,CAAA,CAAE,CAAA;AAE1E,IAAA,IAAI,CAAC,WAAA,EAAa;AAChB,MAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,QACjC,KAAA,EAAO;AAAA,OACR,CAAA,EAAG;AAAA,QACF,MAAA,EAAQ,GAAA;AAAA,QACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,OAC/C,CAAA;AAAA,IACH;AAEA,IAAA,MAAM,QAAA,GAAsB,IAAA,CAAK,KAAA,CAAM,WAAW,CAAA;AAElD,IAAA,IAAI,IAAA,CAAK,WAAW,MAAA,EAAQ;AAE1B,MAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,QACjC,gBAAgB,IAAA,CAAK,cAAA;AAAA,QACrB,UAAA,EAAA,iBAAY,IAAI,IAAA,EAAK,EAAE,WAAA,EAAY;AAAA,QACnC;AAAA,OACD,CAAA,EAAG;AAAA,QACF,MAAA,EAAQ,GAAA;AAAA,QACR,OAAA,EAAS;AAAA,UACP,cAAA,EAAgB,kBAAA;AAAA,UAChB,qBAAA,EAAuB,CAAA,mCAAA,EAAsC,IAAA,CAAK,cAAc,CAAA,MAAA;AAAA;AAClF,OACD,CAAA;AAAA,IACH;AAGA,IAAA,IAAI,QAAA,GAAW,CAAA;;AAAA,CAAA;AACf,IAAA,QAAA,IAAY,CAAA,cAAA,EAAA,iBAAiB,IAAI,IAAA,EAAK,EAAE,gBAAgB;AAAA,CAAA;AACxD,IAAA,QAAA,IAAY,CAAA,qBAAA,EAAwB,KAAK,cAAc;;AAAA,CAAA;AACvD,IAAA,QAAA,IAAY,CAAA;;AAAA,CAAA;AAGZ,IAAA,QAAA,CAAS,OAAA,CAAQ,CAAC,OAAA,EAAS,KAAA,KAAU;AACnC,MAAA,MAAM,YAAY,IAAI,IAAA,CAAK,OAAA,CAAQ,SAAS,EAAE,kBAAA,EAAmB;AAEjE,MAAA,IAAI,OAAA,CAAQ,SAAS,MAAA,EAAQ;AAC3B,QAAA,QAAA,IAAY,eAAe,SAAS,CAAA;;AAAA,CAAA;AACpC,QAAA,QAAA,IAAY,CAAA,EAAG,QAAQ,OAAO;;AAAA,CAAA;AAAA,MAChC,CAAA,MAAO;AACL,QAAA,QAAA,IAAY,uBAAuB,SAAS,CAAA;;AAAA,CAAA;AAG5C,QAAA,IAAI,UAAU,OAAA,CAAQ,OAAA;AACtB,QAAA,MAAM,YAAsB,EAAC;AAE7B,QAAA,IAAI,OAAA,CAAQ,SAAA,IAAa,OAAA,CAAQ,SAAA,CAAU,SAAS,CAAA,EAAG;AACrD,UAAA,OAAA,GAAU,OAAA,CAAQ,OAAA,CAAQ,cAAA,EAAgB,CAAC,OAAO,GAAA,KAAQ;AACxD,YAAA,MAAM,QAAA,GAAW,QAAQ,SAAA,EAAW,IAAA,CAAK,OAAK,CAAA,CAAE,EAAA,KAAO,QAAA,CAAS,GAAG,CAAC,CAAA;AACpE,YAAA,IAAI,QAAA,EAAU;AACZ,cAAA,SAAA,CAAU,IAAA,CAAK,CAAA,EAAA,EAAK,GAAG,CAAA,SAAA,EAAY,QAAA,CAAS,YAAY,CAAA,IAAA,EAAO,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU,CAAA,EAAG,GAAG,CAAC,CAAA,GAAA,CAAK,CAAA;AACnG,cAAA,OAAO,KAAK,GAAG,CAAA,CAAA,CAAA;AAAA,YACjB;AACA,YAAA,OAAO,KAAA;AAAA,UACT,CAAC,CAAA;AAAA,QACH;AAEA,QAAA,QAAA,IAAY,GAAG,OAAO;;AAAA,CAAA;AAGtB,QAAA,IAAI,SAAA,CAAU,SAAS,CAAA,EAAG;AACxB,UAAA,QAAA,IAAY,CAAA;;AAAA,CAAA;AACZ,UAAA,SAAA,CAAU,QAAQ,CAAA,QAAA,KAAY;AAC5B,YAAA,QAAA,IAAY,GAAG,QAAQ;;AAAA,CAAA;AAAA,UACzB,CAAC,CAAA;AAAA,QACH;AAAA,MACF;AAGA,MAAA,IAAI,KAAA,GAAQ,QAAA,CAAS,MAAA,GAAS,CAAA,EAAG;AAC/B,QAAA,QAAA,IAAY,CAAA;;AAAA,CAAA;AAAA,MACd;AAAA,IACF,CAAC,CAAA;AAGD,IAAA,OAAO,IAAI,SAAS,QAAA,EAAU;AAAA,MAC5B,MAAA,EAAQ,GAAA;AAAA,MACR,OAAA,EAAS;AAAA,QACP,cAAA,EAAgB,8BAAA;AAAA,QAChB,qBAAA,EAAuB,CAAA,mCAAA,EAAsC,IAAA,CAAK,cAAc,CAAA,IAAA;AAAA;AAClF,KACD,CAAA;AAAA,EAEH,SAAS,KAAA,EAAO;AACd,IAAA,OAAA,CAAQ,KAAA,CAAM,iCAAiC,KAAK,CAAA;AACpD,IAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,MACjC,KAAA,EAAO;AAAA,KACR,CAAA,EAAG;AAAA,MACF,MAAA,EAAQ,GAAA;AAAA,MACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,KAC/C,CAAA;AAAA,EACH;AACF,CAAA;AAGO,MAAM,MAAgB,YAAY;AACvC,EAAA,OAAO,IAAI,QAAA,CAAS,IAAA,CAAK,SAAA,CAAU;AAAA,IACjC,OAAA,EAAS;AAAA,MACP;AAAA,QACE,EAAA,EAAI,UAAA;AAAA,QACJ,IAAA,EAAM,UAAA;AAAA,QACN,SAAA,EAAW,KAAA;AAAA,QACX,QAAA,EAAU;AAAA,OACZ;AAAA,MACA;AAAA,QACE,EAAA,EAAI,MAAA;AAAA,QACJ,IAAA,EAAM,MAAA;AAAA,QACN,SAAA,EAAW,OAAA;AAAA,QACX,QAAA,EAAU;AAAA;AACZ;AACF,GACD,CAAA,EAAG;AAAA,IACF,MAAA,EAAQ,GAAA;AAAA,IACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA;AAAmB,GAC/C,CAAA;AACH,CAAA;;;;;;;;;;;;;"}