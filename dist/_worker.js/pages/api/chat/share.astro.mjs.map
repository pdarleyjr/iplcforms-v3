{"version":3,"file":"share.astro.mjs","sources":["../../../../../src/pages/api/chat/share.ts"],"sourcesContent":["import type { APIRoute } from 'astro';\n\nexport const runtime = 'edge';\n\ninterface ShareRequest {\n  question: string;\n  answer: string;\n  citations?: Array<{\n    id: number;\n    documentName: string;\n    text: string;\n    score: number;\n  }>;\n}\n\nexport const POST: APIRoute = async ({ request, locals }) => {\n  try {\n    const { env } = locals.runtime;\n    const body = await request.json() as ShareRequest;\n    \n    // Validate request\n    if (!body.question || !body.answer) {\n      return new Response(JSON.stringify({ \n        error: 'Question and answer are required' \n      }), { \n        status: 400,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n    \n    // Generate unique ID for the snippet\n    const snippetId = crypto.randomUUID();\n    \n    // Prepare snippet data\n    const snippet = {\n      id: snippetId,\n      question: body.question,\n      answer: body.answer,\n      citations: body.citations || [],\n      createdAt: new Date().toISOString(),\n      expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString() // 30 days\n    };\n    \n    // Store in KV with expiration\n    await env.KV.put(\n      `chat:snippet:${snippetId}`,\n      JSON.stringify(snippet),\n      {\n        expirationTtl: 30 * 24 * 60 * 60 // 30 days in seconds\n      }\n    );\n    \n    // Generate shareable URL\n    const origin = new URL(request.url).origin;\n    const shareUrl = `${origin}/chat/shared/${snippetId}`;\n    \n    return new Response(JSON.stringify({ \n      success: true,\n      snippetId,\n      shareUrl,\n      expiresAt: snippet.expiresAt\n    }), {\n      status: 200,\n      headers: { 'Content-Type': 'application/json' }\n    });\n    \n  } catch (error) {\n    console.error('Error creating shared snippet:', error);\n    return new Response(JSON.stringify({ \n      error: 'Failed to create shared snippet' \n    }), { \n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n};\n\nexport const GET: APIRoute = async ({ url, locals }) => {\n  try {\n    const { env } = locals.runtime;\n    const snippetId = url.searchParams.get('id');\n    \n    if (!snippetId) {\n      return new Response(JSON.stringify({ \n        error: 'Snippet ID is required' \n      }), { \n        status: 400,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n    \n    // Retrieve snippet from KV\n    const snippetData = await env.KV.get(`chat:snippet:${snippetId}`);\n    \n    if (!snippetData) {\n      return new Response(JSON.stringify({ \n        error: 'Snippet not found or has expired' \n      }), { \n        status: 404,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n    \n    const snippet = JSON.parse(snippetData);\n    \n    return new Response(JSON.stringify({ \n      success: true,\n      snippet\n    }), {\n      status: 200,\n      headers: { 'Content-Type': 'application/json' }\n    });\n    \n  } catch (error) {\n    console.error('Error retrieving shared snippet:', error);\n    return new Response(JSON.stringify({ \n      error: 'Failed to retrieve shared snippet' \n    }), { \n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n};"],"names":[],"mappings":"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"}