{"version":3,"file":"_id_.astro.mjs","sources":["../../../../../../src/pages/api/chat/documents/[id].ts"],"sourcesContent":["import type { APIRoute } from 'astro';\r\nimport type { AIEnv } from '../../../../lib/ai';\r\n\r\nexport const GET: APIRoute = async ({ params, locals }) => {\r\n  const env = (locals as any).runtime.env as unknown as AIEnv;\r\n  const documentId = params.id;\r\n  \r\n  if (!documentId) {\r\n    return new Response(JSON.stringify({ error: 'Document ID required' }), {\r\n      status: 400,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n  \r\n  try {\r\n    // Use IPLC_AI service binding\r\n    const iplcAI = (env as any).IPLC_AI;\r\n    if (!iplcAI || typeof iplcAI.fetch !== 'function') {\r\n      return new Response(JSON.stringify({\r\n        error: 'AI service not available',\r\n        details: 'IPLC_AI service binding is not configured'\r\n      }), {\r\n        status: 503,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    // Get document metadata from iplc-ai worker\r\n    const getResponse = await iplcAI.fetch(`https://iplc-ai.worker/documents/${documentId}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      }\r\n    });\r\n    \r\n    if (!getResponse.ok) {\r\n      if (getResponse.status === 404) {\r\n        return new Response(JSON.stringify({ error: 'Document not found' }), {\r\n          status: 404,\r\n          headers: { 'Content-Type': 'application/json' }\r\n        });\r\n      }\r\n      const error = await getResponse.text();\r\n      throw new Error(error);\r\n    }\r\n    \r\n    const document = await getResponse.json();\r\n\r\n    return new Response(JSON.stringify(document), {\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Failed to get document:', error);\r\n    return new Response(JSON.stringify({\r\n      error: 'Failed to get document',\r\n      details: error instanceof Error ? error.message : 'Unknown error'\r\n    }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n};\r\n\r\nexport const DELETE: APIRoute = async ({ params, locals }) => {\r\n  const env = (locals as any).runtime.env as unknown as AIEnv;\r\n  const documentId = params.id;\r\n  \r\n  if (!documentId) {\r\n    return new Response(JSON.stringify({ error: 'Document ID required' }), {\r\n      status: 400,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n  \r\n  try {\r\n    // Use IPLC_AI service binding\r\n    const iplcAI = (env as any).IPLC_AI;\r\n    if (!iplcAI || typeof iplcAI.fetch !== 'function') {\r\n      return new Response(JSON.stringify({\r\n        error: 'AI service not available',\r\n        details: 'IPLC_AI service binding is not configured'\r\n      }), {\r\n        status: 503,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    // Delete document via iplc-ai worker\r\n    const deleteResponse = await iplcAI.fetch(`https://iplc-ai.worker/documents/${documentId}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      }\r\n    });\r\n    \r\n    if (!deleteResponse.ok) {\r\n      if (deleteResponse.status === 404) {\r\n        return new Response(JSON.stringify({ error: 'Document not found' }), {\r\n          status: 404,\r\n          headers: { 'Content-Type': 'application/json' }\r\n        });\r\n      }\r\n      const error = await deleteResponse.text();\r\n      throw new Error(error);\r\n    }\r\n    \r\n    // Also delete from CHAT_HISTORY if it exists there\r\n    await env.CHAT_HISTORY.delete(`doc:${documentId}`);\r\n    \r\n    return new Response(JSON.stringify({\r\n      success: true,\r\n      message: 'Document and metadata deleted successfully'\r\n    }), {\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Failed to delete document:', error);\r\n    return new Response(JSON.stringify({\r\n      error: 'Failed to delete document',\r\n      details: error instanceof Error ? error.message : 'Unknown error'\r\n    }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n};"],"names":[],"mappings":"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"}