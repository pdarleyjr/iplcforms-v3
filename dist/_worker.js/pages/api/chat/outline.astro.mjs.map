{"version":3,"file":"outline.astro.mjs","sources":["../../../../../src/lib/utils/ai-retry.ts","../../../../../src/pages/api/chat/outline.ts"],"sourcesContent":["// AI service retry utilities for Cloudflare Workers AI\n// Handles exponential backoff, rate limiting, and error categorization\n\n// AI service configuration\nexport const AI_MAX_RETRIES = 3;\nexport const AI_INITIAL_RETRY_DELAY = 1000; // 1 second\nexport const AI_MAX_RETRY_DELAY = 16000; // 16 seconds\nexport const AI_RATE_LIMIT_WINDOW = 60000; // 1 minute window\nexport const AI_RATE_LIMIT_MAX_REQUESTS = 20; // Free tier: 20 requests per minute\nexport const AI_MAX_CONCURRENT_REQUESTS = 2; // Free tier: 2 concurrent GPU jobs\n\n// Rate limiter for AI requests\nexport class RateLimiter {\n  private requests: number[] = [];\n  \n  constructor(private windowMs: number, private maxRequests: number) {}\n  \n  async checkLimit(): Promise<boolean> {\n    const now = Date.now();\n    // Remove requests outside the window\n    this.requests = this.requests.filter(time => now - time < this.windowMs);\n    \n    if (this.requests.length >= this.maxRequests) {\n      return false;\n    }\n    \n    this.requests.push(now);\n    return true;\n  }\n  \n  getTimeUntilNextRequest(): number {\n    if (this.requests.length === 0) return 0;\n    \n    const oldestRequest = this.requests[0];\n    const timeUntilOldestExpires = this.windowMs - (Date.now() - oldestRequest);\n    \n    return Math.max(0, timeUntilOldestExpires);\n  }\n}\n\n// Concurrent request tracking\nexport class ConcurrencyLimiter {\n  private activeRequests = 0;\n  private queue: Array<() => void> = [];\n  \n  constructor(private maxConcurrent: number) {}\n  \n  async acquire(): Promise<void> {\n    if (this.activeRequests < this.maxConcurrent) {\n      this.activeRequests++;\n      return;\n    }\n    \n    // Wait in queue\n    return new Promise<void>((resolve) => {\n      this.queue.push(resolve);\n    });\n  }\n  \n  release(): void {\n    this.activeRequests--;\n    \n    // Process next in queue if any\n    if (this.queue.length > 0) {\n      const next = this.queue.shift();\n      if (next) {\n        this.activeRequests++;\n        next();\n      }\n    }\n  }\n  \n  getActiveCount(): number {\n    return this.activeRequests;\n  }\n  \n  getQueueLength(): number {\n    return this.queue.length;\n  }\n}\n\n// Shared rate limiter instance\nexport const aiRateLimiter = new RateLimiter(AI_RATE_LIMIT_WINDOW, AI_RATE_LIMIT_MAX_REQUESTS);\n\n// Shared concurrency limiter instance\nexport const aiConcurrencyLimiter = new ConcurrencyLimiter(AI_MAX_CONCURRENT_REQUESTS);\n\n// Exponential retry wrapper for AI calls\nexport async function callAIWithRetry(\n  env: any,\n  model: string,\n  params: any,\n  maxRetries: number = AI_MAX_RETRIES\n): Promise<any> {\n  let lastError: Error | null = null;\n  let retryDelay = AI_INITIAL_RETRY_DELAY;\n  \n  // Check if we're at concurrency limit\n  const activeCount = aiConcurrencyLimiter.getActiveCount();\n  const queueLength = aiConcurrencyLimiter.getQueueLength();\n  \n  if (activeCount >= AI_MAX_CONCURRENT_REQUESTS && queueLength > 0) {\n    console.log(`Concurrency limit reached: ${activeCount} active requests, ${queueLength} queued`);\n  }\n  \n  // Acquire concurrency slot\n  await aiConcurrencyLimiter.acquire();\n  \n  try {\n    for (let attempt = 0; attempt <= maxRetries; attempt++) {\n      try {\n        // Check rate limit\n        const canProceed = await aiRateLimiter.checkLimit();\n        if (!canProceed) {\n          const waitTime = aiRateLimiter.getTimeUntilNextRequest();\n          console.log(`Rate limit reached (20 req/min), waiting ${waitTime}ms before retry`);\n          \n          // If we're hitting rate limits, it might be due to free tier restrictions\n          if (waitTime > 30000) {\n            throw new Error('Rate limit exceeded. Free tier allows 20 requests per minute. Please wait before trying again.');\n          }\n          \n          await new Promise(resolve => setTimeout(resolve, waitTime));\n          // Recheck after waiting\n          await aiRateLimiter.checkLimit();\n        }\n      \n      // Make the AI call using the native AI binding\n      let response;\n      \n      if (env.AI) {\n        // Use native AI binding\n        response = await env.AI.run(model, params);\n      } else {\n        // More detailed error for missing AI binding\n        console.error('AI Binding Configuration Error:', {\n          AI: !!env.AI,\n          availableBindings: Object.keys(env).filter(key => !key.startsWith('__'))\n        });\n        \n        const bindingError = new Error('workers-ai-failed: AI service binding not configured');\n        bindingError.cause = {\n          code: 5016,\n          message: 'No AI binding available. Please ensure AI binding is configured in wrangler.toml and deployed.'\n        };\n        throw bindingError;\n      }\n      \n      // Success! Return the response\n      return response;\n      \n    } catch (error: any) {\n      lastError = error;\n      \n      // Log detailed error information\n      console.error(`AI call attempt ${attempt + 1} failed:`, {\n        message: error.message,\n        status: error.status,\n        statusText: error.statusText,\n        cause: error.cause,\n        stack: error.stack\n      });\n      \n      // Check if it's a retryable error\n      const isRetryable = isRetryableError(error);\n      \n      if (!isRetryable || attempt === maxRetries) {\n        // Not retryable or out of retries\n        throw error;\n      }\n      \n      // Calculate retry delay with exponential backoff and jitter\n      const jitter = Math.random() * 0.3 * retryDelay; // 30% jitter\n      const totalDelay = Math.min(retryDelay + jitter, AI_MAX_RETRY_DELAY);\n      \n      console.log(`Retrying AI call in ${totalDelay}ms (attempt ${attempt + 1}/${maxRetries})`);\n      await new Promise(resolve => setTimeout(resolve, totalDelay));\n      \n      // Double the delay for next attempt\n      retryDelay *= 2;\n    }\n  }\n  \n    // Should never reach here, but just in case\n    throw lastError || new Error('AI call failed after all retries');\n  } finally {\n    // Always release concurrency slot\n    aiConcurrencyLimiter.release();\n  }\n}\n\n// Check if error is retryable\nexport function isRetryableError(error: any): boolean {\n  // Check for specific error codes and messages\n  const errorMessage = error.message?.toLowerCase() || '';\n  const errorStatus = error.status || 0;\n  const errorCode = error.cause?.code;\n  \n  // Retryable conditions:\n  // - 429 (Rate limit)\n  // - 503 (Service unavailable)\n  // - 3040 (Capacity exceeded)\n  // - Temporary unavailability messages\n  \n  // Check HTTP status codes\n  if (errorStatus === 429 || errorStatus === 503) {\n    return true;\n  }\n  \n  // Check for capacity error code 3040\n  if (errorCode === 3040) {\n    return true;\n  }\n  \n  // Check error messages for retryable patterns\n  if (errorMessage.includes('3040') ||\n      errorMessage.includes('capacity') ||\n      errorMessage.includes('temporarily unavailable') ||\n      errorMessage.includes('timeout') ||\n      errorMessage.includes('try again') ||\n      errorMessage.includes('service unavailable')) {\n    return true;\n  }\n  \n  // Non-retryable error codes\n  if (errorCode === 3036 || // Account limited (quota)\n      errorCode === 5016 || // Binding not allowed (config issue)\n      errorCode === 3041) { // Model not allowed (permission)\n    return false;\n  }\n  \n  return false;\n}\n\n// Get error type for better error messages\nexport function getErrorType(error: any): string {\n  const errorMessage = error.message?.toLowerCase() || '';\n  const errorCode = error.cause?.code || error.status || 0;\n  \n  // Check error codes first\n  switch (errorCode) {\n    case 3040:\n      return 'capacity';\n    case 3036:\n      return 'quota';\n    case 5016:\n    case 3041:\n      return 'permission';\n    case 429:\n      return 'rate_limit';\n    case 503:\n      return 'unavailable';\n  }\n  \n  // Check error messages\n  if (errorMessage.includes('capacity') || errorMessage.includes('3040')) {\n    return 'capacity';\n  }\n  \n  if (errorMessage.includes('rate') || errorMessage.includes('429') || errorMessage.includes('too many')) {\n    return 'rate_limit';\n  }\n  \n  if (errorMessage.includes('quota') || errorMessage.includes('limit') || errorMessage.includes('3036')) {\n    return 'quota';\n  }\n  \n  if (errorMessage.includes('permission') || errorMessage.includes('denied') || errorMessage.includes('unauthorized')) {\n    return 'permission';\n  }\n  \n  if (errorMessage.includes('unavailable') || errorMessage.includes('503')) {\n    return 'unavailable';\n  }\n  \n  if (errorMessage.includes('workers-ai-failed') || errorMessage.includes('binding not configured')) {\n    return 'configuration';\n  }\n  \n  return 'unknown';\n}\n\n// Format AI error for user-friendly messages\nexport function formatAIError(error: any): { message: string; details: string } {\n  const errorType = getErrorType(error);\n  const errorCode = error.cause?.code || error.status || 'unknown';\n  let message = 'AI service error';\n  let details = error.message || 'Unknown error';\n  \n  switch (errorType) {\n    case 'capacity':\n      message = 'AI service is at capacity. Please try again in a few moments.';\n      break;\n    case 'rate_limit':\n      message = 'Rate limit exceeded. Please wait a moment before trying again.';\n      break;\n    case 'quota':\n      message = 'Daily quota limit reached. Please try again tomorrow.';\n      break;\n    case 'permission':\n      message = 'AI service access denied. Please check your account permissions.';\n      break;\n    case 'unavailable':\n      message = 'AI service is temporarily unavailable';\n      break;\n    case 'configuration':\n      message = 'AI service is not properly configured. Please contact support.';\n      break;\n    default:\n      message = 'AI service error occurred';\n  }\n  \n  // Add error code to details\n  details = `Error code: ${errorCode} - ${details}`;\n  \n  return { message, details };\n}","import type { APIRoute } from 'astro';\r\nimport { nanoid } from 'nanoid';\r\nimport { callAIWithRetry, formatAIError } from '../../../lib/utils/ai-retry';\r\n\r\nimport { withRBAC } from '@/lib/middleware/rbac-middleware';\r\nexport const POST: APIRoute = withRBAC(['clinician','admin'], async ({ request, locals }) => {\r\n  const env = locals.runtime.env;\r\n  \r\n  try {\r\n    const body = await request.json() as any;\r\n    \r\n    if (!body || typeof body !== 'object') {\r\n      return new Response(JSON.stringify({ error: 'Invalid request body' }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    const { conversationId, documentIds } = body;\r\n    \r\n    if (!conversationId || !documentIds || !Array.isArray(documentIds) || documentIds.length === 0) {\r\n      return new Response(JSON.stringify({ error: 'Missing required parameters' }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    // Retrieve all chunks for the specified documents\r\n    const allChunks: string[] = [];\r\n    \r\n    for (const docId of documentIds) {\r\n      const docMetadata = await env.CHAT_HISTORY.get(`doc:${docId}`);\r\n      if (docMetadata) {\r\n        const doc = JSON.parse(docMetadata);\r\n        \r\n        // Retrieve all chunks for this document\r\n        for (let i = 0; i < doc.chunks; i++) {\r\n          const chunkData = await env.CHAT_HISTORY.get(`chunk:${docId}-${i}`);\r\n          if (chunkData) {\r\n            const chunk = JSON.parse(chunkData);\r\n            allChunks.push(chunk.text);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (allChunks.length === 0) {\r\n      return new Response(JSON.stringify({ error: 'No document content found' }), {\r\n        status: 404,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    // Combine chunks into a single context (limit to first 10 chunks for performance)\r\n    const context = allChunks.slice(0, 10).join('\\n\\n');\r\n\r\n    // Generate outline using AI\r\n    const prompt = `You are an expert at analyzing documents and creating comprehensive outlines.\r\n\r\nDocument Content:\r\n${context}\r\n\r\nPlease create a detailed outline of the key topics, main ideas, and important concepts from these documents. Format it as:\r\n\r\n1. Main Topic\r\n   - Key point\r\n   - Supporting detail\r\n2. Another Main Topic\r\n   - Key point\r\n   - etc.\r\n\r\nAlso include a brief executive summary at the beginning.`;\r\n\r\n    let aiResponse;\r\n    try {\r\n      aiResponse = await callAIWithRetry(\r\n        env,\r\n        '@cf/meta/llama-2-7b-chat-int8',\r\n        {\r\n          messages: [\r\n            {\r\n              role: 'system',\r\n              content: 'You are an expert document analyzer. Create clear, hierarchical outlines that capture the essence of documents.'\r\n            },\r\n            {\r\n              role: 'user',\r\n              content: prompt\r\n            }\r\n          ],\r\n          max_tokens: 1500\r\n        }\r\n      );\r\n    } catch (aiError: any) {\r\n      console.error('AI service error:', aiError);\r\n      const { message, details } = formatAIError(aiError);\r\n      throw new Error(`${message} - ${details}`);\r\n    }\r\n\r\n    const outlineId = nanoid();\r\n    const outline = {\r\n      id: outlineId,\r\n      conversationId,\r\n      documentIds,\r\n      content: aiResponse.response,\r\n      createdAt: new Date().toISOString()\r\n    };\r\n\r\n    // Store outline in KV\r\n    await env.CHAT_HISTORY.put(\r\n      `outline:${outlineId}`,\r\n      JSON.stringify(outline)\r\n    );\r\n\r\n    // Store reference in conversation\r\n    await env.CHAT_HISTORY.put(\r\n      `conv:${conversationId}:outline`,\r\n      outlineId\r\n    );\r\n\r\n    return new Response(JSON.stringify({\r\n      success: true,\r\n      outline\r\n    }), {\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Outline generation error:', error);\r\n    return new Response(JSON.stringify({ \r\n      error: 'Failed to generate outline',\r\n      details: error instanceof Error ? error.message : 'Unknown error'\r\n    }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n});\r\n\r\nexport const GET: APIRoute = withRBAC(['clinician','admin'], async ({ url, locals }) => {\r\n  const env = locals.runtime.env;\r\n  const conversationId = url.searchParams.get('conversationId');\r\n  \r\n  if (!conversationId) {\r\n    return new Response(JSON.stringify({ error: 'Missing conversationId' }), {\r\n      status: 400,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  try {\r\n    const outlineId = await env.CHAT_HISTORY.get(`conv:${conversationId}:outline`);\r\n    \r\n    if (!outlineId) {\r\n      return new Response(JSON.stringify({ error: 'No outline found' }), {\r\n        status: 404,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    const outlineData = await env.CHAT_HISTORY.get(`outline:${outlineId}`);\r\n    \r\n    if (!outlineData) {\r\n      return new Response(JSON.stringify({ error: 'Outline data not found' }), {\r\n        status: 404,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    return new Response(outlineData, {\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Outline retrieval error:', error);\r\n    return new Response(JSON.stringify({ \r\n      error: 'Failed to retrieve outline',\r\n      details: error instanceof Error ? error.message : 'Unknown error'\r\n    }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n});"],"names":[],"mappings":"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"}