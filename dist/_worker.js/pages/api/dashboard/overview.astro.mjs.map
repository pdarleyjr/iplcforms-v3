{"version":3,"file":"overview.astro.mjs","sources":["../../../../../src/pages/api/dashboard/overview.ts"],"sourcesContent":["import type { APIRoute, APIContext } from 'astro';\r\nimport { FormTemplateService } from '@/lib/services/form_template';\r\nimport { FormSubmissionService } from '@/lib/services/form_submission';\r\nimport { getD1Manager } from '@/lib/services/d1-connection-manager';\r\n\r\ninterface DashboardStats {\r\n  activePatients: number;\r\n  formsCreated: number;\r\n  completionRate: string;\r\n}\r\n\r\ninterface CloudflareRuntime {\r\n  env: {\r\n    DB: any;\r\n    [key: string]: any;\r\n  };\r\n}\r\n\r\nexport const GET: APIRoute = async ({ locals }: APIContext) => {\r\n  try {\r\n    // Research-backed runtime access pattern\r\n    const runtime = locals.runtime as CloudflareRuntime;\r\n    const env = runtime?.env;\r\n    \r\n    if (!env?.DB) {\r\n      return new Response(JSON.stringify({\r\n        error: 'Database not available',\r\n        details: 'D1 database binding not found in runtime environment'\r\n      }), {\r\n        status: 500,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    // Initialize services with D1ConnectionManager for optimized caching\r\n    const connectionManager = getD1Manager(env.DB);\r\n    const templateService = new FormTemplateService(env.DB);\r\n    const submissionService = new FormSubmissionService(env.DB);\r\n\r\n    // Execute dashboard stats with research-backed caching\r\n    const stats = await connectionManager.executeWithCache(\r\n      'landing_page_dashboard_stats',\r\n      async (): Promise<DashboardStats> => {\r\n        // Get total active forms (representing active patients)\r\n        const activeTemplates = await templateService.getAll({ status: true } as any);\r\n        const activePatients = activeTemplates.length;\r\n\r\n        // Get total forms created (all templates)\r\n        const allTemplates = await templateService.getAll({});\r\n        const formsCreated = allTemplates.length;\r\n\r\n        // Get submission statistics for completion rate\r\n        const submissionStats = await submissionService.getSubmissionStats();\r\n        const totalSubmissions = (submissionStats as any).total || 0;\r\n        const completedSubmissions = (submissionStats as any).byStatus?.submitted || 0;\r\n        const reviewedSubmissions = (submissionStats as any).byStatus?.reviewed || 0;\r\n\r\n        // Calculate completion rate (submitted + reviewed vs total)\r\n        const completedCount = completedSubmissions + reviewedSubmissions;\r\n        let completionRate = '0.0';\r\n        \r\n        if (totalSubmissions > 0) {\r\n          const rate = (completedCount / totalSubmissions) * 100;\r\n          completionRate = rate.toFixed(1);\r\n        }\r\n\r\n        return {\r\n          activePatients,\r\n          formsCreated,\r\n          completionRate: completionRate + '%'\r\n        };\r\n      },\r\n      5 * 60 * 1000 // 5 minutes cache TTL as recommended by research\r\n    );\r\n\r\n    // Research-backed response with proper headers\r\n    return new Response(JSON.stringify(stats), {\r\n      status: 200,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Cache-Control': 'public, max-age=300, stale-while-revalidate=60',\r\n        'X-Powered-By': 'Cloudflare D1'\r\n        // CORS headers are now handled by middleware\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Dashboard overview API error:', error);\r\n    \r\n    // Research-backed structured error response\r\n    const errorResponse = {\r\n      error: 'Internal server error',\r\n      message: 'Failed to retrieve dashboard statistics',\r\n      timestamp: new Date().toISOString(),\r\n      ...(process.env.NODE_ENV === 'development' && {\r\n        details: error instanceof Error ? error.message : String(error)\r\n      })\r\n    };\r\n\r\n    return new Response(JSON.stringify(errorResponse), {\r\n      status: 500,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Cache-Control': 'no-cache'\r\n      }\r\n    });\r\n  }\r\n};"],"names":[],"mappings":"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"}