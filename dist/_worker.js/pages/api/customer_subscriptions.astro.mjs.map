{"version":3,"file":"customer_subscriptions.astro.mjs","sources":["../../../../src/lib/services/customer_subscription.ts","../../../../src/pages/api/customer_subscriptions.ts"],"sourcesContent":["import type { D1Database } from '@cloudflare/workers-types';\r\nimport { getD1Manager, type D1ConnectionManager } from './d1-connection-manager';\r\n\r\nexport const CUSTOMER_SUBSCRIPTION_QUERIES = {\r\n  BASE_SELECT: `\r\n    SELECT \r\n      customer_subscriptions.*,\r\n      customers.name as customer_name,\r\n      customers.email as customer_email,\r\n      subscriptions.name as subscription_name,\r\n      subscriptions.description as subscription_description,\r\n      subscriptions.price as subscription_price\r\n    FROM customer_subscriptions\r\n    LEFT JOIN customers \r\n      ON customer_subscriptions.customer_id = customers.id\r\n    LEFT JOIN subscriptions \r\n      ON customer_subscriptions.subscription_id = subscriptions.id\r\n  `,\r\n  INSERT_CUSTOMER_SUBSCRIPTION: `\r\n    INSERT INTO customer_subscriptions \r\n    (customer_id, subscription_id, status, subscription_ends_at) \r\n    VALUES (?, ?, ?, ?)\r\n  `,\r\n  UPDATE_STATUS: `\r\n    UPDATE customer_subscriptions \r\n    SET status = ? \r\n    WHERE id = ?\r\n  `,\r\n  UPDATE_SUBSCRIPTION_ENDS_AT: `\r\n    UPDATE customer_subscriptions \r\n    SET subscription_ends_at = ? \r\n    WHERE id = ?\r\n  `,\r\n  CHECK_EXISTING: `\r\n    SELECT id, status \r\n    FROM customer_subscriptions \r\n    WHERE customer_id = ? AND subscription_id = ?\r\n  `,\r\n  EXPIRE_SUBSCRIPTIONS: `\r\n    UPDATE customer_subscriptions \r\n    SET status = 'expired' \r\n    WHERE status = 'active' AND subscription_ends_at < ?\r\n  `,\r\n  GET_ACTIVE_COUNT_BY_SUBSCRIPTION: `\r\n    SELECT subscription_id, COUNT(*) as active_count\r\n    FROM customer_subscriptions\r\n    WHERE status = 'active'\r\n    GROUP BY subscription_id\r\n  `,\r\n  GET_CUSTOMER_SUBSCRIPTION_HISTORY: `\r\n    SELECT \r\n      customer_subscriptions.*,\r\n      subscriptions.name as subscription_name,\r\n      subscriptions.price as subscription_price\r\n    FROM customer_subscriptions\r\n    LEFT JOIN subscriptions ON customer_subscriptions.subscription_id = subscriptions.id\r\n    WHERE customer_id = ?\r\n    ORDER BY customer_subscriptions.created_at DESC\r\n  `\r\n};\r\n\r\nconst processCustomerSubscriptionResults = (rows: any[]) => {\r\n  const subscriptionsMap = new Map();\r\n\r\n  rows.forEach((row) => {\r\n    if (!subscriptionsMap.has(row.id)) {\r\n      const customerSubscription = {\r\n        id: row.id,\r\n        status: row.status,\r\n        subscription_ends_at: row.subscription_ends_at,\r\n        created_at: row.created_at,\r\n        updated_at: row.updated_at,\r\n        customer: {\r\n          id: row.customer_id,\r\n          name: row.customer_name,\r\n          email: row.customer_email,\r\n        },\r\n        subscription: {\r\n          id: row.subscription_id,\r\n          name: row.subscription_name,\r\n          description: row.subscription_description,\r\n          price: row.subscription_price,\r\n        },\r\n      };\r\n\r\n      subscriptionsMap.set(row.id, customerSubscription);\r\n    }\r\n  });\r\n\r\n  return Array.from(subscriptionsMap.values());\r\n};\r\n\r\nexport class CustomerSubscriptionService {\r\n  private d1Manager: D1ConnectionManager;\r\n\r\n  constructor(DB: D1Database) {\r\n    this.d1Manager = getD1Manager(DB);\r\n  }\r\n\r\n  async getById(id: string | number) {\r\n    const cacheKey = `customer_subscription:${id}`;\r\n    \r\n    return this.d1Manager.executeWithCache(\r\n      cacheKey,\r\n      async () => {\r\n        const query = `${CUSTOMER_SUBSCRIPTION_QUERIES.BASE_SELECT} WHERE customer_subscriptions.id = ?`;\r\n        const stmt = this.d1Manager.prepare(query);\r\n        const response = await stmt.bind(id).all();\r\n\r\n        if (response.success && response.results.length > 0) {\r\n          const [customerSubscription] = processCustomerSubscriptionResults(\r\n            response.results,\r\n          );\r\n          return customerSubscription;\r\n        }\r\n        return null;\r\n      },\r\n      300 // 5-minute cache for individual subscriptions\r\n    );\r\n  }\r\n\r\n  async getByCustomerId(customerId: string | number) {\r\n    const cacheKey = `customer_subscriptions:customer:${customerId}`;\r\n    \r\n    return this.d1Manager.executeWithCache(\r\n      cacheKey,\r\n      async () => {\r\n        const query = `${CUSTOMER_SUBSCRIPTION_QUERIES.BASE_SELECT} WHERE customer_subscriptions.customer_id = ?`;\r\n        const stmt = this.d1Manager.prepare(query);\r\n        const response = await stmt.bind(customerId).all();\r\n\r\n        if (response.success) {\r\n          return processCustomerSubscriptionResults(response.results);\r\n        }\r\n        return [];\r\n      },\r\n      120 // 2-minute cache for customer's subscriptions\r\n    );\r\n  }\r\n\r\n  async getAll() {\r\n    const cacheKey = 'customer_subscriptions:all';\r\n    \r\n    return this.d1Manager.executeWithCache(\r\n      cacheKey,\r\n      async () => {\r\n        const query = `${CUSTOMER_SUBSCRIPTION_QUERIES.BASE_SELECT} ORDER BY customer_subscriptions.id ASC`;\r\n        const stmt = this.d1Manager.prepare(query);\r\n        const response = await stmt.all();\r\n\r\n        if (response.success) {\r\n          return processCustomerSubscriptionResults(response.results);\r\n        }\r\n        return [];\r\n      },\r\n      120 // 2-minute cache for all subscriptions list\r\n    );\r\n  }\r\n\r\n  async create(customerSubscriptionData: {\r\n    customer_id: number;\r\n    subscription_id: number;\r\n    status?: string;\r\n    subscription_ends_at?: number;\r\n  }) {\r\n    const {\r\n      customer_id,\r\n      subscription_id,\r\n      status = \"active\",\r\n      subscription_ends_at = Date.now() + 60 * 60 * 24 * 30 * 1000, // 30 days from now by default (in milliseconds)\r\n    } = customerSubscriptionData;\r\n\r\n    // Check if subscription already exists\r\n    const existingStmt = this.d1Manager.prepare(CUSTOMER_SUBSCRIPTION_QUERIES.CHECK_EXISTING);\r\n    const existingResponse = await existingStmt.bind(customer_id, subscription_id).all();\r\n    \r\n    if (existingResponse.success && existingResponse.results.length > 0) {\r\n      const existing = existingResponse.results[0] as any;\r\n      throw new Error(`Customer already has this subscription (ID: ${existing.id}, Status: ${existing.status})`);\r\n    }\r\n\r\n    const stmt = this.d1Manager.prepare(\r\n      CUSTOMER_SUBSCRIPTION_QUERIES.INSERT_CUSTOMER_SUBSCRIPTION,\r\n    );\r\n    const response = await stmt\r\n      .bind(customer_id, subscription_id, status, subscription_ends_at)\r\n      .run();\r\n\r\n    if (!response.success) {\r\n      throw new Error(\"Failed to create customer subscription\");\r\n    }\r\n\r\n    // Clear relevant caches\r\n    this.clearCustomerSubscriptionCaches(customer_id);\r\n\r\n    return {\r\n      success: true,\r\n      customerSubscriptionId: response.meta.last_row_id,\r\n    };\r\n  }\r\n\r\n  async updateStatus(id: string | number, status: string) {\r\n    // Get the subscription to find customer_id for cache clearing\r\n    const subscription = await this.getById(id);\r\n    \r\n    const stmt = this.d1Manager.prepare(\r\n      CUSTOMER_SUBSCRIPTION_QUERIES.UPDATE_STATUS,\r\n    );\r\n    const response = await stmt\r\n      .bind(status, id)\r\n      .run();\r\n\r\n    if (!response.success) {\r\n      throw new Error(\"Failed to update customer subscription status\");\r\n    }\r\n\r\n    // Clear relevant caches\r\n    if (subscription) {\r\n      this.clearCustomerSubscriptionCaches(subscription.customer.id, id);\r\n    }\r\n\r\n    return { success: true };\r\n  }\r\n\r\n  async updateSubscriptionEndsAt(id: string | number, subscriptionEndsAt: number) {\r\n    // Get the subscription to find customer_id for cache clearing\r\n    const subscription = await this.getById(id);\r\n    \r\n    const stmt = this.d1Manager.prepare(\r\n      CUSTOMER_SUBSCRIPTION_QUERIES.UPDATE_SUBSCRIPTION_ENDS_AT,\r\n    );\r\n    const response = await stmt\r\n      .bind(subscriptionEndsAt, id)\r\n      .run();\r\n\r\n    if (!response.success) {\r\n      throw new Error(\"Failed to update subscription end date\");\r\n    }\r\n\r\n    // Clear relevant caches\r\n    if (subscription) {\r\n      this.clearCustomerSubscriptionCaches(subscription.customer.id, id);\r\n    }\r\n\r\n    return { success: true };\r\n  }\r\n\r\n  // Additional helper methods\r\n\r\n  async getActiveCountBySubscription() {\r\n    const cacheKey = 'customer_subscriptions:active_counts';\r\n    \r\n    return this.d1Manager.executeWithCache(\r\n      cacheKey,\r\n      async () => {\r\n        const stmt = this.d1Manager.prepare(CUSTOMER_SUBSCRIPTION_QUERIES.GET_ACTIVE_COUNT_BY_SUBSCRIPTION);\r\n        const response = await stmt.all();\r\n\r\n        if (response.success) {\r\n          const countsMap = new Map<number, number>();\r\n          response.results.forEach((row: any) => {\r\n            countsMap.set(row.subscription_id, row.active_count);\r\n          });\r\n          return countsMap;\r\n        }\r\n        return new Map();\r\n      },\r\n      300 // 5-minute cache for analytics data\r\n    );\r\n  }\r\n\r\n  async getCustomerSubscriptionHistory(customerId: string | number) {\r\n    const cacheKey = `customer_subscription_history:${customerId}`;\r\n    \r\n    return this.d1Manager.executeWithCache(\r\n      cacheKey,\r\n      async () => {\r\n        const stmt = this.d1Manager.prepare(CUSTOMER_SUBSCRIPTION_QUERIES.GET_CUSTOMER_SUBSCRIPTION_HISTORY);\r\n        const response = await stmt.bind(customerId).all();\r\n\r\n        if (response.success) {\r\n          return response.results.map((row: any) => ({\r\n            id: row.id,\r\n            subscription_id: row.subscription_id,\r\n            subscription_name: row.subscription_name,\r\n            subscription_price: row.subscription_price,\r\n            status: row.status,\r\n            subscription_ends_at: row.subscription_ends_at,\r\n            created_at: row.created_at,\r\n            updated_at: row.updated_at,\r\n          }));\r\n        }\r\n        return [];\r\n      },\r\n      120 // 2-minute cache for history data\r\n    );\r\n  }\r\n\r\n  async expireOldSubscriptions() {\r\n    const now = Date.now();\r\n    const stmt = this.d1Manager.prepare(CUSTOMER_SUBSCRIPTION_QUERIES.EXPIRE_SUBSCRIPTIONS);\r\n    const response = await stmt.bind(now).run();\r\n\r\n    if (!response.success) {\r\n      throw new Error(\"Failed to expire old subscriptions\");\r\n    }\r\n\r\n    // Clear all caches since this affects multiple subscriptions\r\n    this.d1Manager.clearSpecificCaches(['customer_subscription']);\r\n\r\n    return {\r\n      success: true,\r\n      expiredCount: response.meta.changes || 0,\r\n    };\r\n  }\r\n\r\n  // Cache invalidation helpers\r\n\r\n  private clearCustomerSubscriptionCaches(customerId?: number, subscriptionId?: number | string) {\r\n    const patterns = ['customer_subscriptions:all', 'customer_subscriptions:active_counts'];\r\n    \r\n    if (customerId) {\r\n      patterns.push(`customer_subscriptions:customer:${customerId}`);\r\n      patterns.push(`customer_subscription_history:${customerId}`);\r\n    }\r\n    \r\n    if (subscriptionId) {\r\n      patterns.push(`customer_subscription:${subscriptionId}`);\r\n    }\r\n    \r\n    this.d1Manager.clearSpecificCaches(patterns);\r\n  }\r\n\r\n  // Bulk operations\r\n\r\n  async bulkCreate(subscriptions: Array<{\r\n    customer_id: number;\r\n    subscription_id: number;\r\n    status?: string;\r\n    subscription_ends_at?: number;\r\n  }>) {\r\n    const results = await Promise.all(\r\n      subscriptions.map(sub => this.create(sub).catch(err => ({ \r\n        success: false, \r\n        error: err.message,\r\n        customer_id: sub.customer_id,\r\n        subscription_id: sub.subscription_id \r\n      })))\r\n    );\r\n\r\n    const successful = results.filter(r => r.success).length;\r\n    const failed = results.filter(r => !r.success);\r\n\r\n    return {\r\n      success: true,\r\n      created: successful,\r\n      failed: failed,\r\n      total: subscriptions.length,\r\n    };\r\n  }\r\n\r\n  async bulkUpdateStatus(updates: Array<{ id: number | string; status: string }>) {\r\n    const results = await Promise.all(\r\n      updates.map(update => this.updateStatus(update.id, update.status).catch(err => ({ \r\n        success: false, \r\n        error: err.message,\r\n        id: update.id \r\n      })))\r\n    );\r\n\r\n    const successful = results.filter(r => r.success).length;\r\n    const failed = results.filter(r => !r.success);\r\n\r\n    return {\r\n      success: true,\r\n      updated: successful,\r\n      failed: failed,\r\n      total: updates.length,\r\n    };\r\n  }\r\n}\r\n","import { CustomerSubscriptionService } from \"@/lib/services/customer_subscription\";\r\nimport { authenticate, authorize } from \"@/lib/middleware/rbac-middleware\";\r\nimport { PERMISSIONS } from \"@/lib/utils/rbac\";\r\nimport {\r\n  CreateCustomerSubscriptionRequest,\r\n  PaginationSchema,\r\n  validateRequest,\r\n  validateQueryParams\r\n} from \"@/lib/schemas/api-validation\";\r\nimport { withPerformanceMonitoring } from \"@/lib/utils/performance-wrapper\";\r\nimport type { APIContext, APIRoute } from \"astro\";\r\n\r\nconst getHandler: APIRoute = async (context: APIContext) => {\r\n  const { DB } = (context.locals as any).runtime.env;\r\n\r\n  // Authenticate request\r\n  const authResult = await authenticate(context);\r\n  if (authResult instanceof Response) return authResult;\r\n\r\n  // Authorize request\r\n  const authzMiddleware = authorize(PERMISSIONS.READ, 'customer_subscriptions');\r\n  const authzResult = await authzMiddleware(authResult);\r\n  if (authzResult instanceof Response) return authzResult;\r\n\r\n  // Validate query parameters\r\n  const url = new URL(context.request.url);\r\n  const queryValidation = validateQueryParams(url, PaginationSchema.partial());\r\n  if (!queryValidation.success) {\r\n    return Response.json(\r\n      {\r\n        message: \"Invalid query parameters\",\r\n        errors: queryValidation.errors\r\n      },\r\n      { status: 400 }\r\n    );\r\n  }\r\n\r\n  try {\r\n    const customerSubscriptionService = new CustomerSubscriptionService(DB);\r\n    const customerSubscriptions = await customerSubscriptionService.getAll();\r\n\r\n    return Response.json({\r\n      customer_subscriptions: customerSubscriptions,\r\n    });\r\n  } catch (error) {\r\n    console.error('Error loading customer subscriptions:', error);\r\n    return Response.json(\r\n      { message: \"Couldn't load customer subscriptions\" },\r\n      { status: 500 },\r\n    );\r\n  }\r\n}\r\n\r\nconst postHandler: APIRoute = async (context: APIContext) => {\r\n  const { DB } = (context.locals as any).runtime.env;\r\n\r\n  // Authenticate request\r\n  const authResult = await authenticate(context);\r\n  if (authResult instanceof Response) return authResult;\r\n\r\n  // Authorize request\r\n  const authzMiddleware = authorize(PERMISSIONS.CREATE, 'customer_subscriptions');\r\n  const authzResult = await authzMiddleware(authResult);\r\n  if (authzResult instanceof Response) return authzResult;\r\n\r\n  try {\r\n    // Parse and validate request body with Zod\r\n    const body = await context.request.json();\r\n    const bodyValidation = validateRequest(CreateCustomerSubscriptionRequest, body);\r\n    \r\n    if (!bodyValidation.success) {\r\n      return Response.json(\r\n        {\r\n          success: false,\r\n          message: \"Validation failed\",\r\n          errors: bodyValidation.errors,\r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const customerSubscriptionService = new CustomerSubscriptionService(DB);\r\n    // Transform validated data to match service interface\r\n    const serviceData = {\r\n      customer_id: bodyValidation.data.customer_id,\r\n      subscription_id: bodyValidation.data.subscription_id,\r\n      status: bodyValidation.data.status,\r\n      start_date: bodyValidation.data.subscription_starts_at,\r\n      end_date: bodyValidation.data.subscription_ends_at\r\n    };\r\n\r\n    const response = await customerSubscriptionService.create(serviceData);\r\n\r\n    if (response.success) {\r\n      return Response.json(\r\n        { message: \"Customer subscription created successfully\", success: true },\r\n        { status: 201 },\r\n      );\r\n    } else {\r\n      return Response.json(\r\n        { message: \"Couldn't create customer subscription\", success: false },\r\n        { status: 500 },\r\n      );\r\n    }\r\n  } catch (error) {\r\n    console.error('Error creating customer subscription:', error);\r\n    return Response.json(\r\n      { message: \"Couldn't create customer subscription\", success: false },\r\n      { status: 500 },\r\n    );\r\n  }\r\n}\r\n\r\nexport const GET = withPerformanceMonitoring(getHandler, 'customer-subscriptions:list');\r\nexport const POST = withPerformanceMonitoring(postHandler, 'customer-subscriptions:create');\r\n"],"names":[],"mappings":"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"}