{"version":3,"file":"slack_C2T7VPPC.mjs","sources":["../../../src/pages/api/integrations/slack.ts"],"sourcesContent":["import type { APIRoute } from 'astro';\r\n\r\nexport const POST: APIRoute = async ({ request, locals }) => {\r\n  try {\r\n    const runtime = locals.runtime as any;\r\n    const env = runtime.env;\r\n    \r\n    // Validate request\r\n    const data = await request.json() as any;\r\n    \r\n    if (!data || typeof data !== 'object') {\r\n      return new Response(JSON.stringify({ error: 'Invalid request body' }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    const { slackWebhook, slackChannel } = data;\r\n    \r\n    if (!slackWebhook) {\r\n      return new Response(JSON.stringify({ error: 'Webhook URL is required' }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    // Validate webhook URL format\r\n    if (!slackWebhook.startsWith('https://hooks.slack.com/services/')) {\r\n      return new Response(JSON.stringify({ error: 'Invalid Slack webhook URL' }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    // Store configuration\r\n    const config = {\r\n      channel: slackChannel || null,\r\n      configured: true,\r\n      updatedAt: new Date().toISOString()\r\n    };\r\n    \r\n    await env.CACHE_KV.put('integration:slack:config', JSON.stringify(config), {\r\n      expirationTtl: 365 * 24 * 60 * 60 // 1 year\r\n    });\r\n    \r\n    // Store webhook URL separately for security\r\n    await env.CACHE_KV.put('integration:slack:webhook', slackWebhook, {\r\n      expirationTtl: 365 * 24 * 60 * 60 // 1 year\r\n    });\r\n    \r\n    // Test the webhook\r\n    try {\r\n      const testPayload = {\r\n        text: 'âœ… IPLC Forms Slack integration configured successfully!',\r\n        channel: slackChannel || undefined\r\n      };\r\n      \r\n      const testResponse = await fetch(slackWebhook, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(testPayload)\r\n      });\r\n      \r\n      if (!testResponse.ok) {\r\n        const errorText = await testResponse.text();\r\n        throw new Error(`Webhook test failed: ${errorText}`);\r\n      }\r\n    } catch (error) {\r\n      return new Response(JSON.stringify({ \r\n        error: 'Failed to send test message. Please check your webhook URL.' \r\n      }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    return new Response(JSON.stringify({ \r\n      message: 'Slack configuration saved and test message sent!' \r\n    }), {\r\n      status: 200,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Error saving Slack configuration:', error);\r\n    return new Response(JSON.stringify({ \r\n      error: 'Failed to save configuration' \r\n    }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n};\r\n\r\n// Helper function to send Slack notification for form submission\r\nexport async function sendSlackNotification(env: any, formTitle: string, submissionId: string | number, formData: any) {\r\n  const webhookUrl = await env.get('integration:slack:webhook');\r\n  if (!webhookUrl) {\r\n    return null; // Integration not configured\r\n  }\r\n  \r\n  // Format the message\r\n  const message = {\r\n    text: `New form submission: ${formTitle}`,\r\n    blocks: [\r\n      {\r\n        type: 'header',\r\n        text: {\r\n          type: 'plain_text',\r\n          text: `ðŸ“‹ ${formTitle}`\r\n        }\r\n      },\r\n      {\r\n        type: 'section',\r\n        fields: [\r\n          {\r\n            type: 'mrkdwn',\r\n            text: `*Submission ID:*\\n${submissionId}`\r\n          },\r\n          {\r\n            type: 'mrkdwn',\r\n            text: `*Submitted:*\\n${new Date().toLocaleString()}`\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        type: 'section',\r\n        text: {\r\n          type: 'mrkdwn',\r\n          text: '*Form Data Summary:*'\r\n        }\r\n      },\r\n      {\r\n        type: 'section',\r\n        text: {\r\n          type: 'mrkdwn',\r\n          text: Object.entries(formData)\r\n            .slice(0, 10) // Limit to first 10 fields\r\n            .map(([key, value]) => `â€¢ *${key}:* ${value}`)\r\n            .join('\\n')\r\n        }\r\n      }\r\n    ]\r\n  };\r\n  \r\n  const response = await fetch(webhookUrl, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(message)\r\n  });\r\n  \r\n  if (!response.ok) {\r\n    throw new Error(`Slack notification failed: ${response.status}`);\r\n  }\r\n  \r\n  return { success: true };\r\n}\r\n\r\nexport const GET: APIRoute = async ({ locals }) => {\r\n  try {\r\n    const runtime = locals.runtime as any;\r\n    const env = runtime.env;\r\n    \r\n    const config = await env.CACHE_KV.get('integration:slack:config');\r\n    if (!config) {\r\n      return new Response(JSON.stringify({ configured: false }), {\r\n        status: 200,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    return new Response(config, {\r\n      status: 200,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Error fetching Slack configuration:', error);\r\n    return new Response(JSON.stringify({ configured: false }), {\r\n      status: 200,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n};"],"names":[],"mappings":"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"}