{"version":3,"file":"form_template_whHHz9qG.mjs","sources":["../../../src/lib/services/form_template.ts"],"sourcesContent":["import type { D1Database } from '@cloudflare/workers-types';\r\nimport { D1ConnectionManager } from './d1-connection-manager';\r\n\r\nexport const FORM_TEMPLATE_QUERIES = {\r\n  BASE_SELECT: `\r\n    SELECT\r\n      ft.*,\r\n      c.name as created_by_name,\r\n      c.email as created_by_email,\r\n      COUNT(fs.id) as submission_count\r\n    FROM form_templates ft\r\n    LEFT JOIN customers c ON ft.created_by = c.id\r\n    LEFT JOIN form_submissions fs ON ft.id = fs.template_id\r\n  `,\r\n  INSERT_TEMPLATE: `\r\n    INSERT INTO form_templates (\r\n      name, description, category, subcategory, clinical_context, schema, ui_schema,\r\n      scoring_config, permissions, metadata, tags, clinical_codes, target_audience,\r\n      estimated_completion_time, change_log, collaborators, usage_stats, status,\r\n      created_by, updated_by\r\n    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\r\n  `,\r\n  UPDATE_TEMPLATE: `\r\n    UPDATE form_templates\r\n    SET name = ?, description = ?, category = ?, subcategory = ?, clinical_context = ?,\r\n        schema = ?, ui_schema = ?, scoring_config = ?, permissions = ?, metadata = ?,\r\n        tags = ?, clinical_codes = ?, target_audience = ?, estimated_completion_time = ?,\r\n        change_log = ?, collaborators = ?, usage_stats = ?, status = ?, updated_by = ?,\r\n        updated_at = CURRENT_TIMESTAMP\r\n    WHERE id = ?\r\n  `,\r\n  DELETE_TEMPLATE: `UPDATE form_templates SET is_active = false WHERE id = ?`,\r\n  GET_BY_ID: `WHERE ft.id = ? AND ft.is_active = true GROUP BY ft.id`,\r\n  GET_BY_CATEGORY: `WHERE ft.category = ? AND ft.is_active = true GROUP BY ft.id`,\r\n  GET_BY_SUBCATEGORY: `WHERE ft.subcategory = ? AND ft.is_active = true GROUP BY ft.id`,\r\n  GET_BY_STATUS: `WHERE ft.is_published = ? AND ft.is_active = true GROUP BY ft.id`,\r\n  GET_BY_ORGANIZATION: `WHERE ft.created_by IN (SELECT id FROM customers WHERE organization_id = ?) AND ft.is_active = true GROUP BY ft.id`,\r\n  GET_VERSIONS: `WHERE ft.parent_template_id = ? OR ft.id = ? GROUP BY ft.id ORDER BY ft.version DESC`,\r\n  SEARCH: `WHERE (ft.name LIKE ? OR ft.description LIKE ? OR ft.clinical_context LIKE ?) AND ft.is_active = true GROUP BY ft.id`,\r\n  SEARCH_TAGS: `WHERE JSON_EXTRACT(ft.tags, '$') LIKE ? AND ft.is_active = true GROUP BY ft.id`,\r\n  FILTER_BY_TARGET_AUDIENCE: `WHERE JSON_EXTRACT(ft.target_audience, '$') LIKE ? AND ft.is_active = true GROUP BY ft.id`,\r\n  FILTER_BY_COMPLETION_TIME: `WHERE ft.estimated_completion_time <= ? AND ft.is_active = true GROUP BY ft.id`,\r\n  \r\n  // Analytics and aggregation queries\r\n  TEMPLATE_ANALYTICS: `\r\n    SELECT\r\n      ft.id,\r\n      ft.name,\r\n      ft.category,\r\n      COUNT(DISTINCT fs.id) as total_submissions,\r\n      COUNT(DISTINCT CASE WHEN fs.status = 'completed' THEN fs.id END) as completed_submissions,\r\n      AVG(fs.completion_time_seconds) as avg_completion_time,\r\n      AVG(fs.calculated_score) as avg_score,\r\n      COUNT(DISTINCT fs.customer_id) as unique_users\r\n    FROM form_templates ft\r\n    LEFT JOIN form_submissions fs ON ft.id = fs.template_id\r\n    WHERE ft.id = ?\r\n    GROUP BY ft.id, ft.name, ft.category\r\n  `,\r\n  \r\n  POPULAR_TEMPLATES: `\r\n    SELECT\r\n      ft.id,\r\n      ft.name,\r\n      ft.category,\r\n      COUNT(fs.id) as submission_count,\r\n      COUNT(DISTINCT fs.customer_id) as unique_users,\r\n      AVG(fs.calculated_score) as avg_score\r\n    FROM form_templates ft\r\n    LEFT JOIN form_submissions fs ON ft.id = fs.template_id\r\n    WHERE ft.is_active = true AND ft.is_published = true\r\n    GROUP BY ft.id, ft.name, ft.category\r\n    ORDER BY submission_count DESC, unique_users DESC\r\n    LIMIT ?\r\n  `,\r\n  \r\n  CATEGORY_STATS: `\r\n    SELECT\r\n      ft.category,\r\n      COUNT(DISTINCT ft.id) as template_count,\r\n      COUNT(fs.id) as total_submissions,\r\n      AVG(fs.calculated_score) as avg_score\r\n    FROM form_templates ft\r\n    LEFT JOIN form_submissions fs ON ft.id = fs.template_id\r\n    WHERE ft.is_active = true\r\n    GROUP BY ft.category\r\n    ORDER BY template_count DESC\r\n  `,\r\n\r\n  // Collection management queries\r\n  CREATE_COLLECTION: `\r\n    INSERT INTO form_template_collections (name, description, created_by, metadata)\r\n    VALUES (?, ?, ?, ?)\r\n  `,\r\n  UPDATE_COLLECTION: `\r\n    UPDATE form_template_collections\r\n    SET name = ?, description = ?, metadata = ?, updated_at = CURRENT_TIMESTAMP\r\n    WHERE id = ?\r\n  `,\r\n  DELETE_COLLECTION: `DELETE FROM form_template_collections WHERE id = ?`,\r\n  GET_COLLECTIONS: `\r\n    SELECT\r\n      ftc.*,\r\n      COUNT(ftci.template_id) as template_count\r\n    FROM form_template_collections ftc\r\n    LEFT JOIN form_template_collection_items ftci ON ftc.id = ftci.collection_id\r\n    GROUP BY ftc.id\r\n    ORDER BY ftc.updated_at DESC\r\n  `,\r\n  GET_COLLECTION_BY_ID: `\r\n    SELECT\r\n      ftc.*,\r\n      COUNT(ftci.template_id) as template_count\r\n    FROM form_template_collections ftc\r\n    LEFT JOIN form_template_collection_items ftci ON ftc.id = ftci.collection_id\r\n    WHERE ftc.id = ?\r\n    GROUP BY ftc.id\r\n  `,\r\n  ADD_TEMPLATE_TO_COLLECTION: `\r\n    INSERT INTO form_template_collection_items (collection_id, template_id, added_by)\r\n    VALUES (?, ?, ?)\r\n  `,\r\n  REMOVE_TEMPLATE_FROM_COLLECTION: `\r\n    DELETE FROM form_template_collection_items\r\n    WHERE collection_id = ? AND template_id = ?\r\n  `,\r\n  GET_COLLECTION_TEMPLATES: `\r\n    SELECT\r\n      ft.*,\r\n      c.name as created_by_name,\r\n      c.email as created_by_email,\r\n      ftci.added_at,\r\n      COUNT(fs.id) as submission_count\r\n    FROM form_template_collection_items ftci\r\n    JOIN form_templates ft ON ftci.template_id = ft.id\r\n    LEFT JOIN customers c ON ft.created_by = c.id\r\n    LEFT JOIN form_submissions fs ON ft.id = fs.template_id\r\n    WHERE ftci.collection_id = ? AND ft.is_active = true\r\n    GROUP BY ft.id\r\n    ORDER BY ftci.added_at DESC\r\n  `,\r\n\r\n  // Enhanced analytics queries\r\n  GET_FACETS: `\r\n    SELECT\r\n      'categories' as facet_type,\r\n      category as value,\r\n      COUNT(*) as count\r\n    FROM form_templates\r\n    WHERE is_active = true\r\n    GROUP BY category\r\n    UNION ALL\r\n    SELECT\r\n      'subcategories' as facet_type,\r\n      subcategory as value,\r\n      COUNT(*) as count\r\n    FROM form_templates\r\n    WHERE is_active = true AND subcategory IS NOT NULL\r\n    GROUP BY subcategory\r\n    UNION ALL\r\n    SELECT\r\n      'organizations' as facet_type,\r\n      CAST(c.organization_id as TEXT) as value,\r\n      COUNT(*) as count\r\n    FROM form_templates ft\r\n    JOIN customers c ON ft.created_by = c.id\r\n    WHERE ft.is_active = true AND c.organization_id IS NOT NULL\r\n    GROUP BY c.organization_id\r\n  `\r\n};\r\n\r\nconst processTemplateResults = (connectionManager: D1ConnectionManager) => {\r\n  return (rows: any[]) => {\r\n    return rows.map((row) => {\r\n      const template = { ...row };\r\n      \r\n      // Use optimized JSON parsing for existing fields\r\n      if (template.form_config) {\r\n        template.form_config = connectionManager.parseJSON(template.form_config);\r\n      }\r\n      if (template.metadata) {\r\n        template.metadata = connectionManager.parseJSON(template.metadata);\r\n      }\r\n\r\n      // Parse new JSON fields\r\n      if (template.schema) {\r\n        template.schema = connectionManager.parseJSON(template.schema);\r\n      }\r\n      if (template.ui_schema) {\r\n        template.ui_schema = connectionManager.parseJSON(template.ui_schema);\r\n      }\r\n      if (template.scoring_config) {\r\n        template.scoring_config = connectionManager.parseJSON(template.scoring_config);\r\n      }\r\n      if (template.permissions) {\r\n        template.permissions = connectionManager.parseJSON(template.permissions);\r\n      }\r\n      if (template.tags) {\r\n        template.tags = connectionManager.parseJSON(template.tags);\r\n      }\r\n      if (template.clinical_codes) {\r\n        template.clinical_codes = connectionManager.parseJSON(template.clinical_codes);\r\n      }\r\n      if (template.target_audience) {\r\n        template.target_audience = connectionManager.parseJSON(template.target_audience);\r\n      }\r\n      if (template.change_log) {\r\n        template.change_log = connectionManager.parseJSON(template.change_log);\r\n      }\r\n      if (template.collaborators) {\r\n        template.collaborators = connectionManager.parseJSON(template.collaborators);\r\n      }\r\n      if (template.usage_stats) {\r\n        template.usage_stats = connectionManager.parseJSON(template.usage_stats);\r\n      }\r\n\r\n      // Add creator info\r\n      if (template.created_by_name) {\r\n        template.created_by_info = {\r\n          name: template.created_by_name,\r\n          email: template.created_by_email,\r\n        };\r\n        delete template.created_by_name;\r\n        delete template.created_by_email;\r\n      }\r\n\r\n      return template;\r\n    });\r\n  };\r\n};\r\n\r\nexport class FormTemplateService {\r\n  private DB: D1Database;\r\n  private connectionManager: D1ConnectionManager;\r\n\r\n  constructor(DB: D1Database) {\r\n    this.DB = DB;\r\n    this.connectionManager = new D1ConnectionManager(DB);\r\n  }\r\n\r\n  async getById(id: number) {\r\n    const cacheKey = `template:${id}`;\r\n    \r\n    return this.connectionManager.executeWithCache(\r\n      cacheKey,\r\n      async () => {\r\n        const query = `${FORM_TEMPLATE_QUERIES.BASE_SELECT} ${FORM_TEMPLATE_QUERIES.GET_BY_ID}`;\r\n        const response = await this.connectionManager.prepare(query).bind(id).all();\r\n\r\n        if (response.success && response.results.length > 0) {\r\n          const [template] = processTemplateResults(this.connectionManager)(response.results);\r\n          return template;\r\n        }\r\n        return null;\r\n      },\r\n      5 * 60 // 5 minutes cache\r\n    );\r\n  }\r\n\r\n  async getAll(filters?: {\r\n    category?: string;\r\n    subcategory?: string;\r\n    status?: boolean;\r\n    search?: string;\r\n    tags?: string[];\r\n    organization?: number;\r\n    target_audience?: string;\r\n    max_completion_time?: number;\r\n    sort_by?: 'updated_at' | 'created_at' | 'name' | 'submission_count';\r\n    sort_order?: 'asc' | 'desc';\r\n    page?: number;\r\n    per_page?: number;\r\n  }) {\r\n    // Create cache key based on filters\r\n    const cacheKey = `templates:all:${JSON.stringify(filters || {})}`;\r\n    \r\n    return this.connectionManager.executeWithCache(\r\n      cacheKey,\r\n      async () => {\r\n        let query = FORM_TEMPLATE_QUERIES.BASE_SELECT;\r\n        let whereConditions: string[] = ['ft.is_active = true'];\r\n        let bindParams: any[] = [];\r\n\r\n        // Build WHERE conditions based on filters\r\n        if (filters?.category) {\r\n          whereConditions.push('ft.category = ?');\r\n          bindParams.push(filters.category);\r\n        }\r\n\r\n        if (filters?.subcategory) {\r\n          whereConditions.push('ft.subcategory = ?');\r\n          bindParams.push(filters.subcategory);\r\n        }\r\n\r\n        if (filters?.status !== undefined) {\r\n          whereConditions.push('ft.is_published = ?');\r\n          bindParams.push(filters.status);\r\n        }\r\n\r\n        if (filters?.search) {\r\n          whereConditions.push('(ft.name LIKE ? OR ft.description LIKE ? OR ft.clinical_context LIKE ?)');\r\n          bindParams.push(`%${filters.search}%`, `%${filters.search}%`, `%${filters.search}%`);\r\n        }\r\n\r\n        if (filters?.tags && filters.tags.length > 0) {\r\n          const tagConditions = filters.tags.map(() => 'JSON_EXTRACT(ft.tags, \"$\") LIKE ?').join(' OR ');\r\n          whereConditions.push(`(${tagConditions})`);\r\n          filters.tags.forEach(tag => {\r\n            bindParams.push(`%\"${tag}\"%`);\r\n          });\r\n        }\r\n\r\n        if (filters?.organization) {\r\n          whereConditions.push('ft.created_by IN (SELECT id FROM customers WHERE organization_id = ?)');\r\n          bindParams.push(filters.organization);\r\n        }\r\n\r\n        if (filters?.target_audience) {\r\n          whereConditions.push('JSON_EXTRACT(ft.target_audience, \"$\") LIKE ?');\r\n          bindParams.push(`%\"${filters.target_audience}\"%`);\r\n        }\r\n\r\n        if (filters?.max_completion_time) {\r\n          whereConditions.push('ft.estimated_completion_time <= ?');\r\n          bindParams.push(filters.max_completion_time);\r\n        }\r\n\r\n        // Add WHERE clause\r\n        query += ` WHERE ${whereConditions.join(' AND ')} GROUP BY ft.id`;\r\n\r\n        // Add sorting\r\n        const sortBy = filters?.sort_by || 'updated_at';\r\n        const sortOrder = filters?.sort_order || 'desc';\r\n        \r\n        if (sortBy === 'submission_count') {\r\n          query += ` ORDER BY submission_count ${sortOrder.toUpperCase()}`;\r\n        } else {\r\n          query += ` ORDER BY ft.${sortBy} ${sortOrder.toUpperCase()}`;\r\n        }\r\n\r\n        // Add pagination\r\n        if (filters?.page && filters?.per_page) {\r\n          const offset = (filters.page - 1) * filters.per_page;\r\n          query += ` LIMIT ? OFFSET ?`;\r\n          bindParams.push(filters.per_page, offset);\r\n        }\r\n\r\n        const response = await this.connectionManager.prepare(query).bind(...bindParams).all();\r\n\r\n        if (response.success) {\r\n          return processTemplateResults(this.connectionManager)(response.results);\r\n        }\r\n        return [];\r\n      },\r\n      2 * 60 // 2 minutes cache for lists\r\n    );\r\n  }\r\n\r\n  async getVersions(templateId: number) {\r\n    const cacheKey = `template:versions:${templateId}`;\r\n    \r\n    return this.connectionManager.executeWithCache(\r\n      cacheKey,\r\n      async () => {\r\n        const query = `${FORM_TEMPLATE_QUERIES.BASE_SELECT} ${FORM_TEMPLATE_QUERIES.GET_VERSIONS}`;\r\n        const response = await this.connectionManager.prepare(query).bind(templateId, templateId).all();\r\n\r\n        if (response.success) {\r\n          return processTemplateResults(this.connectionManager)(response.results);\r\n        }\r\n        return [];\r\n      },\r\n      2 * 60 // 2 minutes cache\r\n    );\r\n  }\r\n\r\n  async create(templateData: {\r\n    name: string;\r\n    description?: string;\r\n    category: string;\r\n    subcategory?: string;\r\n    clinical_context?: string;\r\n    schema?: object;\r\n    ui_schema?: object;\r\n    scoring_config?: object;\r\n    permissions?: object;\r\n    metadata?: object;\r\n    tags?: string[];\r\n    clinical_codes?: object;\r\n    target_audience?: string[];\r\n    estimated_completion_time?: number;\r\n    change_log?: object[];\r\n    collaborators?: object[];\r\n    usage_stats?: object;\r\n    status?: string;\r\n    created_by: number;\r\n    updated_by?: number;\r\n    // Legacy form_config support\r\n    form_config?: object;\r\n  }) {\r\n    const {\r\n      name,\r\n      description,\r\n      category,\r\n      subcategory,\r\n      clinical_context,\r\n      schema,\r\n      ui_schema,\r\n      scoring_config,\r\n      permissions,\r\n      metadata,\r\n      tags,\r\n      clinical_codes,\r\n      target_audience,\r\n      estimated_completion_time,\r\n      change_log,\r\n      collaborators,\r\n      usage_stats,\r\n      status,\r\n      created_by,\r\n      updated_by,\r\n      form_config, // Legacy support\r\n    } = templateData;\r\n\r\n    // Use form_config as schema if schema not provided (legacy support)\r\n    const finalSchema = schema || form_config;\r\n\r\n    const response = await this.connectionManager.prepare(FORM_TEMPLATE_QUERIES.INSERT_TEMPLATE)\r\n      .bind(\r\n        name,\r\n        description || null,\r\n        category,\r\n        subcategory || null,\r\n        clinical_context || null,\r\n        JSON.stringify(finalSchema || {}),\r\n        JSON.stringify(ui_schema || {}),\r\n        JSON.stringify(scoring_config || {}),\r\n        JSON.stringify(permissions || {}),\r\n        JSON.stringify(metadata || {}),\r\n        JSON.stringify(tags || []),\r\n        JSON.stringify(clinical_codes || {}),\r\n        JSON.stringify(target_audience || []),\r\n        estimated_completion_time || null,\r\n        JSON.stringify(change_log || []),\r\n        JSON.stringify(collaborators || []),\r\n        JSON.stringify(usage_stats || {}),\r\n        status || 'draft',\r\n        created_by,\r\n        updated_by || created_by\r\n      )\r\n      .run();\r\n\r\n    if (!response.success) {\r\n      throw new Error(\"Failed to create form template\");\r\n    }\r\n\r\n    const templateId = response.meta.last_row_id;\r\n    \r\n    // Clear relevant caches\r\n    this.connectionManager.clearSpecificCaches(['templates:all:', 'popular_templates', 'category_stats']);\r\n    \r\n    return { success: true, templateId };\r\n  }\r\n\r\n  async update(id: number, templateData: {\r\n    name?: string;\r\n    description?: string;\r\n    category?: string;\r\n    subcategory?: string;\r\n    clinical_context?: string;\r\n    schema?: object;\r\n    ui_schema?: object;\r\n    scoring_config?: object;\r\n    permissions?: object;\r\n    metadata?: object;\r\n    tags?: string[];\r\n    clinical_codes?: object;\r\n    target_audience?: string[];\r\n    estimated_completion_time?: number;\r\n    change_log?: object[];\r\n    collaborators?: object[];\r\n    usage_stats?: object;\r\n    status?: string;\r\n    updated_by?: number;\r\n    // Legacy form_config support\r\n    form_config?: object;\r\n  }) {\r\n    // First get the existing template\r\n    const existing = await this.getById(id);\r\n    if (!existing) {\r\n      throw new Error(\"Template not found\");\r\n    }\r\n\r\n    const {\r\n      name = existing.name,\r\n      description = existing.description,\r\n      category = existing.category,\r\n      subcategory = existing.subcategory,\r\n      clinical_context = existing.clinical_context,\r\n      schema = existing.schema,\r\n      ui_schema = existing.ui_schema,\r\n      scoring_config = existing.scoring_config,\r\n      permissions = existing.permissions,\r\n      metadata = existing.metadata,\r\n      tags = existing.tags,\r\n      clinical_codes = existing.clinical_codes,\r\n      target_audience = existing.target_audience,\r\n      estimated_completion_time = existing.estimated_completion_time,\r\n      change_log = existing.change_log,\r\n      collaborators = existing.collaborators,\r\n      usage_stats = existing.usage_stats,\r\n      status = existing.status,\r\n      updated_by,\r\n      form_config, // Legacy support\r\n    } = templateData;\r\n\r\n    // Use form_config as schema if provided (legacy support)\r\n    const finalSchema = form_config ? form_config : schema;\r\n\r\n    const response = await this.connectionManager.prepare(FORM_TEMPLATE_QUERIES.UPDATE_TEMPLATE)\r\n      .bind(\r\n        name,\r\n        description,\r\n        category,\r\n        subcategory,\r\n        clinical_context,\r\n        JSON.stringify(finalSchema),\r\n        JSON.stringify(ui_schema),\r\n        JSON.stringify(scoring_config),\r\n        JSON.stringify(permissions),\r\n        JSON.stringify(metadata),\r\n        JSON.stringify(tags),\r\n        JSON.stringify(clinical_codes),\r\n        JSON.stringify(target_audience),\r\n        estimated_completion_time,\r\n        JSON.stringify(change_log),\r\n        JSON.stringify(collaborators),\r\n        JSON.stringify(usage_stats),\r\n        status,\r\n        updated_by || existing.created_by,\r\n        id\r\n      )\r\n      .run();\r\n\r\n    if (!response.success) {\r\n      throw new Error(\"Failed to update form template\");\r\n    }\r\n\r\n    // Clear relevant caches\r\n    this.connectionManager.clearSpecificCaches([\r\n      `template:${id}`,\r\n      `template:versions:${id}`,\r\n      'templates:all:',\r\n      'popular_templates',\r\n      'category_stats'\r\n    ]);\r\n\r\n    return { success: true };\r\n  }\r\n\r\n  async delete(id: number) {\r\n    const response = await this.connectionManager.prepare(FORM_TEMPLATE_QUERIES.DELETE_TEMPLATE)\r\n      .bind(id)\r\n      .run();\r\n\r\n    if (!response.success) {\r\n      throw new Error(\"Failed to delete form template\");\r\n    }\r\n\r\n    // Clear relevant caches\r\n    this.connectionManager.clearSpecificCaches([\r\n      `template:${id}`,\r\n      `template:versions:${id}`,\r\n      'templates:all:',\r\n      'popular_templates',\r\n      'category_stats'\r\n    ]);\r\n\r\n    return { success: true };\r\n  }\r\n\r\n  async publish(id: number) {\r\n    const response = await this.connectionManager.prepare(`UPDATE form_templates SET is_published = true WHERE id = ?`)\r\n      .bind(id)\r\n      .run();\r\n\r\n    if (!response.success) {\r\n      throw new Error(\"Failed to publish template\");\r\n    }\r\n\r\n    // Clear relevant caches\r\n    this.connectionManager.clearSpecificCaches([\r\n      `template:${id}`,\r\n      'templates:all:',\r\n      'popular_templates'\r\n    ]);\r\n\r\n    return { success: true };\r\n  }\r\n\r\n  async unpublish(id: number) {\r\n    const response = await this.connectionManager.prepare(`UPDATE form_templates SET is_published = false WHERE id = ?`)\r\n      .bind(id)\r\n      .run();\r\n\r\n    if (!response.success) {\r\n      throw new Error(\"Failed to unpublish template\");\r\n    }\r\n\r\n    // Clear relevant caches\r\n    this.connectionManager.clearSpecificCaches([\r\n      `template:${id}`,\r\n      'templates:all:',\r\n      'popular_templates'\r\n    ]);\r\n\r\n    return { success: true };\r\n  }\r\n\r\n  async getAnalytics(id: number) {\r\n    const cacheKey = `template:analytics:${id}`;\r\n    \r\n    return this.connectionManager.executeWithCache(\r\n      cacheKey,\r\n      async () => {\r\n        // Get basic template stats\r\n        const template = await this.getById(id);\r\n        if (!template) {\r\n          return null;\r\n        }\r\n\r\n        // Use parallel queries for analytics\r\n        const [analyticsResult, trendResult] = await Promise.all([\r\n          // Analytics query\r\n          this.connectionManager.prepare(FORM_TEMPLATE_QUERIES.TEMPLATE_ANALYTICS).bind(id).first(),\r\n          // Trend query\r\n          this.connectionManager.prepare(`\r\n            SELECT\r\n              DATE(created_at) as date,\r\n              COUNT(*) as submissions,\r\n              COUNT(CASE WHEN status = 'completed' THEN 1 END) as completed,\r\n              AVG(calculated_score) as avg_score\r\n            FROM form_submissions\r\n            WHERE template_id = ?\r\n              AND created_at >= date('now', '-30 days')\r\n            GROUP BY DATE(created_at)\r\n            ORDER BY date DESC\r\n          `).bind(id).all()\r\n        ]);\r\n\r\n        return {\r\n          template_info: {\r\n            id: template.id,\r\n            name: template.name,\r\n            version: template.version,\r\n            is_published: template.is_published,\r\n            category: template.category,\r\n          },\r\n          statistics: analyticsResult || null,\r\n          trends: trendResult?.success ? trendResult.results : [],\r\n        };\r\n      },\r\n      10 * 60 // 10 minutes cache for analytics\r\n    );\r\n  }\r\n\r\n  async getPopularTemplates(limit: number = 10) {\r\n    const cacheKey = `popular_templates:${limit}`;\r\n    \r\n    return this.connectionManager.executeWithCache(\r\n      cacheKey,\r\n      async () => {\r\n        const response = await this.connectionManager.prepare(FORM_TEMPLATE_QUERIES.POPULAR_TEMPLATES)\r\n          .bind(limit)\r\n          .all();\r\n\r\n        if (response.success) {\r\n          return processTemplateResults(this.connectionManager)(response.results);\r\n        }\r\n        return [];\r\n      },\r\n      30 * 60 // 30 minutes cache for popular templates\r\n    );\r\n  }\r\n\r\n  async getCategoryStatistics() {\r\n    const cacheKey = 'category_stats';\r\n    \r\n    return this.connectionManager.executeWithCache(\r\n      cacheKey,\r\n      async () => {\r\n        const response = await this.connectionManager.prepare(FORM_TEMPLATE_QUERIES.CATEGORY_STATS).all();\r\n\r\n        if (response.success) {\r\n          return response.results;\r\n        }\r\n        return [];\r\n      },\r\n      30 * 60 // 30 minutes cache for category stats\r\n    );\r\n  }\r\n\r\n  async bulkCreate(templates: Array<{\r\n    name: string;\r\n    description?: string;\r\n    category: string;\r\n    form_config: object;\r\n    metadata?: object;\r\n    created_by: number;\r\n  }>) {\r\n    // Use batch operations for bulk creation\r\n    const statements = templates.map(template =>\r\n      this.connectionManager.prepare(FORM_TEMPLATE_QUERIES.INSERT_TEMPLATE)\r\n        .bind(\r\n          template.name,\r\n          template.description || null,\r\n          template.category,\r\n          JSON.stringify(template.form_config),\r\n          JSON.stringify(template.metadata || {}),\r\n          template.created_by\r\n        )\r\n    );\r\n\r\n    const results = await Promise.all(statements.map(stmt => stmt.run()));\r\n    \r\n    // Clear relevant caches\r\n    this.connectionManager.clearSpecificCaches(['templates:all:', 'popular_templates', 'category_stats']);\r\n    \r\n    return {\r\n      success: true,\r\n      created: results.filter(r => r.success).length,\r\n      failed: results.filter(r => !r.success).length,\r\n      results\r\n    };\r\n  }\r\n\r\n  async getTemplateUsageStats(templateId: number) {\r\n    const cacheKey = `template:usage:${templateId}`;\r\n    \r\n    return this.connectionManager.executeWithCache(\r\n      cacheKey,\r\n      async () => {\r\n        const [dailyStats, userStats, scoreDistribution] = await Promise.all([\r\n          // Daily usage stats\r\n          this.connectionManager.prepare(`\r\n            SELECT\r\n              DATE(created_at) as date,\r\n              COUNT(*) as submissions,\r\n              COUNT(DISTINCT customer_id) as unique_users\r\n            FROM form_submissions\r\n            WHERE template_id = ? AND created_at >= date('now', '-7 days')\r\n            GROUP BY DATE(created_at)\r\n            ORDER BY date DESC\r\n          `).bind(templateId).all(),\r\n          \r\n          // User engagement stats\r\n          this.connectionManager.prepare(`\r\n            SELECT\r\n              customer_id,\r\n              COUNT(*) as submission_count,\r\n              AVG(calculated_score) as avg_score,\r\n              MAX(created_at) as last_submission\r\n            FROM form_submissions\r\n            WHERE template_id = ?\r\n            GROUP BY customer_id\r\n            ORDER BY submission_count DESC\r\n            LIMIT 20\r\n          `).bind(templateId).all(),\r\n          \r\n          // Score distribution\r\n          this.connectionManager.prepare(`\r\n            SELECT\r\n              CASE\r\n                WHEN calculated_score < 50 THEN '0-49'\r\n                WHEN calculated_score < 70 THEN '50-69'\r\n                WHEN calculated_score < 85 THEN '70-84'\r\n                WHEN calculated_score < 95 THEN '85-94'\r\n                ELSE '95-100'\r\n              END as score_range,\r\n              COUNT(*) as count\r\n            FROM form_submissions\r\n            WHERE template_id = ? AND calculated_score IS NOT NULL\r\n            GROUP BY score_range\r\n            ORDER BY score_range\r\n          `).bind(templateId).all()\r\n        ]);\r\n\r\n        return {\r\n          daily_usage: dailyStats.success ? dailyStats.results : [],\r\n          top_users: userStats.success ? userStats.results : [],\r\n          score_distribution: scoreDistribution.success ? scoreDistribution.results : []\r\n        };\r\n      },\r\n      5 * 60 // 5 minutes cache\r\n    );\r\n  }\r\n\r\n  // Collection Management Methods\r\n  async createCollection(collectionData: {\r\n    name: string;\r\n    description?: string;\r\n    created_by: number;\r\n    metadata?: object;\r\n  }) {\r\n    const { name, description, created_by, metadata } = collectionData;\r\n\r\n    const response = await this.connectionManager.prepare(FORM_TEMPLATE_QUERIES.CREATE_COLLECTION)\r\n      .bind(name, description || null, created_by, JSON.stringify(metadata || {}))\r\n      .run();\r\n\r\n    if (!response.success) {\r\n      throw new Error(\"Failed to create collection\");\r\n    }\r\n\r\n    return { success: true, collectionId: response.meta.last_row_id };\r\n  }\r\n\r\n  async updateCollection(id: number, collectionData: {\r\n    name?: string;\r\n    description?: string;\r\n    metadata?: object;\r\n  }) {\r\n    const { name, description, metadata } = collectionData;\r\n\r\n    const response = await this.connectionManager.prepare(FORM_TEMPLATE_QUERIES.UPDATE_COLLECTION)\r\n      .bind(name, description, JSON.stringify(metadata), id)\r\n      .run();\r\n\r\n    if (!response.success) {\r\n      throw new Error(\"Failed to update collection\");\r\n    }\r\n\r\n    return { success: true };\r\n  }\r\n\r\n  async deleteCollection(id: number) {\r\n    const response = await this.connectionManager.prepare(FORM_TEMPLATE_QUERIES.DELETE_COLLECTION)\r\n      .bind(id)\r\n      .run();\r\n\r\n    if (!response.success) {\r\n      throw new Error(\"Failed to delete collection\");\r\n    }\r\n\r\n    return { success: true };\r\n  }\r\n\r\n  async getCollections() {\r\n    const cacheKey = 'template_collections';\r\n    \r\n    return this.connectionManager.executeWithCache(\r\n      cacheKey,\r\n      async () => {\r\n        const response = await this.connectionManager.prepare(FORM_TEMPLATE_QUERIES.GET_COLLECTIONS).all();\r\n\r\n        if (response.success) {\r\n          return response.results.map(collection => ({\r\n            ...collection,\r\n            metadata: typeof collection.metadata === 'string' ? this.connectionManager.parseJSON(collection.metadata) : (collection.metadata || {})\r\n          }));\r\n        }\r\n        return [];\r\n      },\r\n      10 * 60 // 10 minutes cache\r\n    );\r\n  }\r\n\r\n  async getCollectionById(id: number) {\r\n    const cacheKey = `collection:${id}`;\r\n    \r\n    return this.connectionManager.executeWithCache(\r\n      cacheKey,\r\n      async () => {\r\n        const response = await this.connectionManager.prepare(FORM_TEMPLATE_QUERIES.GET_COLLECTION_BY_ID)\r\n          .bind(id)\r\n          .first();\r\n\r\n        if (response) {\r\n          return {\r\n            ...response,\r\n            metadata: typeof response.metadata === 'string' ? this.connectionManager.parseJSON(response.metadata) : (response.metadata || {})\r\n          };\r\n        }\r\n        return null;\r\n      },\r\n      10 * 60 // 10 minutes cache\r\n    );\r\n  }\r\n\r\n  async addTemplateToCollection(collectionId: number, templateId: number, addedBy: number) {\r\n    const response = await this.connectionManager.prepare(FORM_TEMPLATE_QUERIES.ADD_TEMPLATE_TO_COLLECTION)\r\n      .bind(collectionId, templateId, addedBy)\r\n      .run();\r\n\r\n    if (!response.success) {\r\n      throw new Error(\"Failed to add template to collection\");\r\n    }\r\n\r\n    // Clear collection caches\r\n    this.connectionManager.clearSpecificCaches([\r\n      `collection:${collectionId}`,\r\n      'template_collections'\r\n    ]);\r\n\r\n    return { success: true };\r\n  }\r\n\r\n  async removeTemplateFromCollection(collectionId: number, templateId: number) {\r\n    const response = await this.connectionManager.prepare(FORM_TEMPLATE_QUERIES.REMOVE_TEMPLATE_FROM_COLLECTION)\r\n      .bind(collectionId, templateId)\r\n      .run();\r\n\r\n    if (!response.success) {\r\n      throw new Error(\"Failed to remove template from collection\");\r\n    }\r\n\r\n    // Clear collection caches\r\n    this.connectionManager.clearSpecificCaches([\r\n      `collection:${collectionId}`,\r\n      'template_collections'\r\n    ]);\r\n\r\n    return { success: true };\r\n  }\r\n\r\n  async getCollectionTemplates(collectionId: number) {\r\n    const cacheKey = `collection:${collectionId}:templates`;\r\n    \r\n    return this.connectionManager.executeWithCache(\r\n      cacheKey,\r\n      async () => {\r\n        const response = await this.connectionManager.prepare(FORM_TEMPLATE_QUERIES.GET_COLLECTION_TEMPLATES)\r\n          .bind(collectionId)\r\n          .all();\r\n\r\n        if (response.success) {\r\n          return processTemplateResults(this.connectionManager)(response.results);\r\n        }\r\n        return [];\r\n      },\r\n      5 * 60 // 5 minutes cache\r\n    );\r\n  }\r\n\r\n  // Enhanced Analytics and Faceted Search\r\n  async getFacets() {\r\n    const cacheKey = 'template_facets';\r\n    \r\n    return this.connectionManager.executeWithCache(\r\n      cacheKey,\r\n      async () => {\r\n        const response = await this.connectionManager.prepare(FORM_TEMPLATE_QUERIES.GET_FACETS).all();\r\n\r\n        if (response.success) {\r\n          const facets: Record<string, Array<{ value: string; count: number }>> = {\r\n            categories: [],\r\n            subcategories: [],\r\n            organizations: []\r\n          };\r\n\r\n          response.results.forEach((row: any) => {\r\n            if (row.facet_type && row.value && row.count > 0) {\r\n              facets[row.facet_type] = facets[row.facet_type] || [];\r\n              facets[row.facet_type].push({\r\n                value: row.value,\r\n                count: row.count\r\n              });\r\n            }\r\n          });\r\n\r\n          return facets;\r\n        }\r\n        return { categories: [], subcategories: [], organizations: [] };\r\n      },\r\n      15 * 60 // 15 minutes cache for facets\r\n    );\r\n  }\r\n\r\n  async getTemplateWithTotalCount(filters?: any) {\r\n    // Get both templates and total count for pagination\r\n    const templates = await this.getAll(filters);\r\n    \r\n    // Get total count without pagination\r\n    const countFilters = { ...filters };\r\n    delete countFilters.page;\r\n    delete countFilters.per_page;\r\n    \r\n    const allTemplates = await this.getAll(countFilters);\r\n    const totalCount = allTemplates.length;\r\n\r\n    return {\r\n      templates,\r\n      total_count: totalCount,\r\n      page: filters?.page || 1,\r\n      per_page: filters?.per_page || 20,\r\n      total_pages: Math.ceil(totalCount / (filters?.per_page || 20))\r\n    };\r\n  }\r\n\r\n  async updateUsageStats(templateId: number, statsUpdate: {\r\n    views?: number;\r\n    submissions?: number;\r\n    completions?: number;\r\n    avg_completion_time?: number;\r\n  }) {\r\n    const existing = await this.getById(templateId);\r\n    if (!existing) {\r\n      throw new Error(\"Template not found\");\r\n    }\r\n\r\n    const currentStats = existing.usage_stats || {};\r\n    const updatedStats = {\r\n      ...currentStats,\r\n      views: (currentStats.views || 0) + (statsUpdate.views || 0),\r\n      submissions: (currentStats.submissions || 0) + (statsUpdate.submissions || 0),\r\n      completions: (currentStats.completions || 0) + (statsUpdate.completions || 0),\r\n      avg_completion_time: statsUpdate.avg_completion_time || currentStats.avg_completion_time,\r\n      last_updated: new Date().toISOString()\r\n    };\r\n\r\n    const response = await this.connectionManager.prepare(`\r\n      UPDATE form_templates\r\n      SET usage_stats = ?, updated_at = CURRENT_TIMESTAMP\r\n      WHERE id = ?\r\n    `).bind(JSON.stringify(updatedStats), templateId).run();\r\n\r\n    if (!response.success) {\r\n      throw new Error(\"Failed to update usage stats\");\r\n    }\r\n\r\n    // Clear relevant caches\r\n    this.connectionManager.clearSpecificCaches([\r\n      `template:${templateId}`,\r\n      'templates:all:',\r\n      'popular_templates'\r\n    ]);\r\n\r\n    return { success: true };\r\n  }\r\n}"],"names":[],"mappings":"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"}