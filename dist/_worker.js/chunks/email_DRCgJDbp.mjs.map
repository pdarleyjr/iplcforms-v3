{"version":3,"file":"email_DRCgJDbp.mjs","sources":["../../../src/pages/api/integrations/email.ts"],"sourcesContent":["import type { APIRoute } from 'astro';\r\n\r\nexport const POST: APIRoute = async ({ request, locals }) => {\r\n  try {\r\n    const runtime = locals.runtime as any;\r\n    const env = runtime.env;\r\n    \r\n    // Validate request\r\n    const data = await request.json() as any;\r\n    \r\n    if (!data || typeof data !== 'object') {\r\n      return new Response(JSON.stringify({ error: 'Invalid request body' }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    const { emailTo, emailFrom, emailSubject } = data;\r\n    \r\n    if (!emailTo || !emailFrom || !emailSubject) {\r\n      return new Response(JSON.stringify({ error: 'All fields are required' }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    // Validate email formats\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    const recipients = emailTo.split(',').map((email: string) => email.trim());\r\n    \r\n    for (const email of recipients) {\r\n      if (!emailRegex.test(email)) {\r\n        return new Response(JSON.stringify({ error: `Invalid email address: ${email}` }), {\r\n          status: 400,\r\n          headers: { 'Content-Type': 'application/json' }\r\n        });\r\n      }\r\n    }\r\n    \r\n    if (!emailRegex.test(emailFrom)) {\r\n      return new Response(JSON.stringify({ error: 'Invalid from email address' }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    // Validate subject template\r\n    if (!emailSubject.trim()) {\r\n      return new Response(JSON.stringify({ error: 'Subject template cannot be empty' }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    // Store configuration\r\n    const config = {\r\n      recipients: recipients,\r\n      from: emailFrom,\r\n      subjectTemplate: emailSubject,\r\n      configured: true,\r\n      updatedAt: new Date().toISOString()\r\n    };\r\n    \r\n    await env.CACHE_KV.put('integration:email:config', JSON.stringify(config), {\r\n      expirationTtl: 365 * 24 * 60 * 60 // 1 year\r\n    });\r\n    \r\n    // Test email sending (optional - comment out if you don't want test emails)\r\n    try {\r\n      const testSubject = emailSubject\r\n        .replace('{formTitle}', 'Test Form')\r\n        .replace('{submissionId}', 'test-123');\r\n      \r\n      const testEmail = {\r\n        personalizations: [\r\n          {\r\n            to: recipients.map((email: string) => ({ email }))\r\n          }\r\n        ],\r\n        from: {\r\n          email: emailFrom,\r\n          name: 'IPLC Forms'\r\n        },\r\n        subject: testSubject,\r\n        content: [\r\n          {\r\n            type: 'text/html',\r\n            value: `\r\n              <h2>Email Integration Test</h2>\r\n              <p>This is a test email from IPLC Forms to verify your email configuration.</p>\r\n              <p>If you received this email, your integration is working correctly!</p>\r\n              <hr>\r\n              <p><small>Configuration saved at ${new Date().toLocaleString()}</small></p>\r\n            `\r\n          }\r\n        ]\r\n      };\r\n      \r\n      \r\n      // Note: In production, you would send this to MailChannels API\r\n      // For now, we'll just simulate success\r\n      console.log('Test email would be sent:', testEmail);\r\n      \r\n    } catch (error) {\r\n      console.error('Error sending test email:', error);\r\n      // Don't fail the configuration save if test email fails\r\n    }\r\n    \r\n    return new Response(JSON.stringify({ \r\n      message: 'Email configuration saved successfully!' \r\n    }), {\r\n      status: 200,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Error saving email configuration:', error);\r\n    return new Response(JSON.stringify({ \r\n      error: 'Failed to save configuration' \r\n    }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n};\r\n\r\nexport const GET: APIRoute = async ({ locals }) => {\r\n  try {\r\n    const runtime = locals.runtime as any;\r\n    const env = runtime.env;\r\n    \r\n    const config = await env.CACHE_KV.get('integration:email:config');\r\n    if (!config) {\r\n      return new Response(JSON.stringify({ configured: false }), {\r\n        status: 200,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    return new Response(config, {\r\n      status: 200,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Error fetching email configuration:', error);\r\n    return new Response(JSON.stringify({ configured: false }), {\r\n      status: 200,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n};\r\n\r\n// Helper function to send email notification for form submission\r\nexport async function sendEmail(env: any, formTitle: string, submissionId: string | number, formData: any) {\r\n  const configStr = await env.CACHE_KV.get('integration:email:config');\r\n  if (!configStr) {\r\n    return null; // Integration not configured\r\n  }\r\n  \r\n  const config = JSON.parse(configStr);\r\n  \r\n  // Replace placeholders in subject\r\n  const subject = config.subjectTemplate\r\n    .replace('{formTitle}', formTitle)\r\n    .replace('{submissionId}', submissionId.toString());\r\n  \r\n  // Format the email body\r\n  const htmlContent = `\r\n    <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\r\n      <h2 style=\"color: #333;\">ðŸ“‹ ${formTitle}</h2>\r\n      <p style=\"color: #666;\">A new form submission has been received.</p>\r\n      \r\n      <div style=\"background-color: #f5f5f5; padding: 20px; border-radius: 8px; margin: 20px 0;\">\r\n        <p><strong>Submission ID:</strong> ${submissionId}</p>\r\n        <p><strong>Submitted:</strong> ${new Date().toLocaleString()}</p>\r\n      </div>\r\n      \r\n      <h3 style=\"color: #333;\">Form Data:</h3>\r\n      <table style=\"width: 100%; border-collapse: collapse;\">\r\n        ${Object.entries(formData)\r\n          .map(([key, value]) => `\r\n            <tr style=\"border-bottom: 1px solid #eee;\">\r\n              <td style=\"padding: 10px; font-weight: bold;\">${key}:</td>\r\n              <td style=\"padding: 10px;\">${value}</td>\r\n            </tr>\r\n          `).join('')}\r\n      </table>\r\n      \r\n      <p style=\"color: #999; font-size: 12px; margin-top: 30px;\">\r\n        This email was sent from IPLC Forms v3\r\n      </p>\r\n    </div>\r\n  `;\r\n  \r\n  // Send email using MailChannels\r\n  const emailPayload = {\r\n    personalizations: [\r\n      {\r\n        to: config.recipients.map((email: string) => ({ email: email.trim() }))\r\n      }\r\n    ],\r\n    from: {\r\n      email: config.from,\r\n      name: 'IPLC Forms'\r\n    },\r\n    subject: subject,\r\n    content: [\r\n      {\r\n        type: 'text/html',\r\n        value: htmlContent\r\n      }\r\n    ]\r\n  };\r\n  \r\n  // For Cloudflare Workers with MailChannels\r\n  const response = await fetch('https://api.mailchannels.net/tx/v1/send', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(emailPayload)\r\n  });\r\n  \r\n  if (!response.ok) {\r\n    throw new Error(`Email notification failed: ${response.status}`);\r\n  }\r\n  \r\n  return { success: true };\r\n}"],"names":[],"mappings":"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"}