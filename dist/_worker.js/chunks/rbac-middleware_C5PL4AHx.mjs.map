{"version":3,"file":"rbac-middleware_C5PL4AHx.mjs","sources":["../../../src/lib/middleware/rbac-middleware.ts"],"sourcesContent":["import { RBACManager } from '../utils/rbac';\r\nimport type { APIContext } from 'astro';\r\nimport type { D1Database } from '@cloudflare/workers-types';\r\n\r\nexport interface AuthenticatedContext extends APIContext {\r\n  locals: APIContext['locals'] & {\r\n    customerId: string;\r\n    customerRole: string;\r\n    rbac: RBACManager;\r\n  };\r\n}\r\n\r\n/**\r\n * Authentication middleware to verify customer ID and set up RBAC\r\n */\r\nexport async function authenticate(\r\n  context: APIContext\r\n): Promise<AuthenticatedContext | Response> {\r\n  const { request, locals } = context;\r\n  const env = (locals as any)?.runtime?.env;\r\n  \r\n  if (!env) {\r\n    return new Response(\r\n      JSON.stringify({ error: 'Runtime environment not available' }),\r\n      {\r\n        status: 500,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      }\r\n    );\r\n  }\r\n  \r\n  // Check for customer ID in headers\r\n  const customerId = request.headers.get('X-Customer-ID');\r\n  \r\n  if (!customerId) {\r\n    return new Response(\r\n      JSON.stringify({ error: 'Authentication required' }),\r\n      {\r\n        status: 401,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      }\r\n    );\r\n  }\r\n\r\n  // Initialize RBAC manager\r\n  const rbac = new RBACManager(env.DB as D1Database);\r\n  \r\n  // Get user role\r\n  const customerRole = await rbac.getUserRole(customerId);\r\n  \r\n  if (!customerRole) {\r\n    return new Response(\r\n      JSON.stringify({ error: 'User not found or no role assigned' }),\r\n      {\r\n        status: 403,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      }\r\n    );\r\n  }\r\n\r\n  // Extend context with authentication data\r\n  const authenticatedContext = context as AuthenticatedContext;\r\n  authenticatedContext.locals.customerId = customerId;\r\n  authenticatedContext.locals.customerRole = customerRole;\r\n  authenticatedContext.locals.rbac = rbac;\r\n  \r\n  return authenticatedContext;\r\n}\r\n\r\n/**\r\n * Authorization middleware to check specific permissions\r\n */\r\nexport function authorize(permission: string, resource: string) {\r\n  return async function(\r\n    context: APIContext\r\n  ): Promise<AuthenticatedContext | Response> {\r\n    // First authenticate\r\n    const authResult = await authenticate(context);\r\n    \r\n    if (authResult instanceof Response) {\r\n      return authResult;\r\n    }\r\n    \r\n    const { rbac, customerRole } = authResult.locals;\r\n    \r\n    // Check permission\r\n    const hasPermission = await rbac.hasPermission(\r\n      customerRole,\r\n      permission,\r\n      resource\r\n    );\r\n    \r\n    if (!hasPermission) {\r\n      return new Response(\r\n        JSON.stringify({\r\n          error: 'Insufficient permissions',\r\n          required: { permission, resource },\r\n          role: customerRole\r\n        }),\r\n        {\r\n          status: 403,\r\n          headers: { 'Content-Type': 'application/json' }\r\n        }\r\n      );\r\n    }\r\n    \r\n    return authResult;\r\n  };\r\n}\r\n\r\n/**\r\n * Authorization middleware for resource ownership\r\n */\r\nexport function authorizeOwnership(\r\n  getResourceOwnerId: (context: AuthenticatedContext) => Promise<string | null>\r\n) {\r\n  return async function(\r\n    context: APIContext\r\n  ): Promise<AuthenticatedContext | Response> {\r\n    // First authenticate\r\n    const authResult = await authenticate(context);\r\n    \r\n    if (authResult instanceof Response) {\r\n      return authResult;\r\n    }\r\n    \r\n    const { customerId, customerRole } = authResult.locals;\r\n    \r\n    // Admins can access all resources\r\n    if (customerRole === 'admin') {\r\n      return authResult;\r\n    }\r\n    \r\n    // Check ownership\r\n    const resourceOwnerId = await getResourceOwnerId(authResult);\r\n    \r\n    if (!resourceOwnerId) {\r\n      return new Response(\r\n        JSON.stringify({ error: 'Resource not found' }),\r\n        {\r\n          status: 404,\r\n          headers: { 'Content-Type': 'application/json' }\r\n        }\r\n      );\r\n    }\r\n    \r\n    if (resourceOwnerId !== customerId) {\r\n      return new Response(\r\n        JSON.stringify({\r\n          error: 'Access denied: You can only access your own resources'\r\n        }),\r\n        {\r\n          status: 403,\r\n          headers: { 'Content-Type': 'application/json' }\r\n        }\r\n      );\r\n    }\r\n    \r\n    return authResult;\r\n  };\r\n}\r\n\r\n/**\r\n * Combined middleware for authentication and multiple permission checks\r\n */\r\nexport function requirePermissions(\r\n  permissions: Array<{ permission: string; resource: string }>\r\n) {\r\n  return async function(\r\n    context: APIContext\r\n  ): Promise<AuthenticatedContext | Response> {\r\n    // First authenticate\r\n    const authResult = await authenticate(context);\r\n    \r\n    if (authResult instanceof Response) {\r\n      return authResult;\r\n    }\r\n    \r\n    const { rbac, customerRole } = authResult.locals;\r\n    \r\n    // Check all permissions\r\n    const hasAllPermissions = await rbac.hasPermissions(\r\n      customerRole,\r\n      permissions\r\n    );\r\n    \r\n    if (!hasAllPermissions) {\r\n      return new Response(\r\n        JSON.stringify({\r\n          error: 'Insufficient permissions',\r\n          required: permissions,\r\n          role: customerRole\r\n        }),\r\n        {\r\n          status: 403,\r\n          headers: { 'Content-Type': 'application/json' }\r\n        }\r\n      );\r\n    }\r\n    \r\n    return authResult;\r\n  };\r\n}\r\n\r\n/**\r\n * Helper to check if user has admin role\r\n */\r\nexport async function isAdmin(\r\n  context: APIContext\r\n): Promise<boolean> {\r\n  const authResult = await authenticate(context);\r\n  \r\n  if (authResult instanceof Response) {\r\n    return false;\r\n  }\r\n  \r\n  return authResult.locals.customerRole === 'admin';\r\n}\r\n\r\n/**\r\n * Admin-only middleware\r\n */\r\nexport async function requireAdmin(\r\n  context: APIContext\r\n): Promise<AuthenticatedContext | Response> {\r\n  const authResult = await authenticate(context);\r\n  \r\n  if (authResult instanceof Response) {\r\n    return authResult;\r\n  }\r\n  \r\n  if (authResult.locals.customerRole !== 'admin') {\r\n    return new Response(\r\n      JSON.stringify({\r\n        error: 'Admin access required',\r\n        role: authResult.locals.customerRole\r\n      }),\r\n      {\r\n        status: 403,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      }\r\n    );\r\n  }\r\n  \r\n  return authResult;\r\n}"],"names":[],"mappings":"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"}