{"version":3,"file":"rbac_vK5lyOl9.mjs","sources":["../../../src/lib/utils/rbac.ts"],"sourcesContent":["import type { D1Database } from '@cloudflare/workers-types';\r\n\r\nexport interface Permission {\r\n  id: number;\r\n  role: string;\r\n  permission: string;\r\n  resource: string;\r\n  created_at: string;\r\n}\r\n\r\nexport interface RolePermissions {\r\n  role: string;\r\n  permissions: Array<{\r\n    permission: string;\r\n    resource: string;\r\n  }>;\r\n}\r\n\r\nexport class RBACManager {\r\n  private db: D1Database;\r\n  private cache: Map<string, Permission[]> = new Map();\r\n\r\n  constructor(db: D1Database) {\r\n    this.db = db;\r\n  }\r\n\r\n  /**\r\n   * Check if a user has permission to perform an action on a resource\r\n   */\r\n  async hasPermission(\r\n    role: string,\r\n    permission: string,\r\n    resource: string\r\n  ): Promise<boolean> {\r\n    const cacheKey = `${role}:${permission}:${resource}`;\r\n    const cached = this.cache.get(cacheKey);\r\n    \r\n    if (cached !== undefined) {\r\n      return cached.length > 0;\r\n    }\r\n\r\n    try {\r\n      const result = await this.db\r\n        .prepare(\r\n          'SELECT 1 FROM clinical_permissions WHERE role = ? AND permission = ? AND resource = ?'\r\n        )\r\n        .bind(role, permission, resource)\r\n        .first();\r\n\r\n      const hasAccess = result !== null;\r\n      this.cache.set(cacheKey, hasAccess ? [result as any] : []);\r\n      \r\n      return hasAccess;\r\n    } catch (error) {\r\n      console.error('Error checking permission:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all permissions for a role\r\n   */\r\n  async getRolePermissions(role: string): Promise<Permission[]> {\r\n    const cacheKey = `role:${role}`;\r\n    const cached = this.cache.get(cacheKey);\r\n    \r\n    if (cached) {\r\n      return cached;\r\n    }\r\n\r\n    try {\r\n      const { results } = await this.db\r\n        .prepare('SELECT * FROM clinical_permissions WHERE role = ?')\r\n        .bind(role)\r\n        .all();\r\n\r\n      const permissions = results as unknown as Permission[];\r\n      this.cache.set(cacheKey, permissions);\r\n      \r\n      return permissions;\r\n    } catch (error) {\r\n      console.error('Error fetching role permissions:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all available roles\r\n   */\r\n  async getAllRoles(): Promise<string[]> {\r\n    try {\r\n      const { results } = await this.db\r\n        .prepare('SELECT DISTINCT role FROM clinical_permissions')\r\n        .all();\r\n\r\n      return results.map((r: any) => r.role);\r\n    } catch (error) {\r\n      console.error('Error fetching roles:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add a new permission\r\n   */\r\n  async addPermission(\r\n    role: string,\r\n    permission: string,\r\n    resource: string\r\n  ): Promise<boolean> {\r\n    try {\r\n      await this.db\r\n        .prepare(\r\n          'INSERT OR IGNORE INTO clinical_permissions (role, permission, resource) VALUES (?, ?, ?)'\r\n        )\r\n        .bind(role, permission, resource)\r\n        .run();\r\n\r\n      // Clear cache for this role\r\n      this.clearRoleCache(role);\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error adding permission:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove a permission\r\n   */\r\n  async removePermission(\r\n    role: string,\r\n    permission: string,\r\n    resource: string\r\n  ): Promise<boolean> {\r\n    try {\r\n      await this.db\r\n        .prepare(\r\n          'DELETE FROM clinical_permissions WHERE role = ? AND permission = ? AND resource = ?'\r\n        )\r\n        .bind(role, permission, resource)\r\n        .run();\r\n\r\n      // Clear cache for this role\r\n      this.clearRoleCache(role);\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error removing permission:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update user role\r\n   */\r\n  async updateUserRole(customerId: string, newRole: string): Promise<boolean> {\r\n    try {\r\n      await this.db\r\n        .prepare('UPDATE customers SET role = ? WHERE id = ?')\r\n        .bind(newRole, customerId)\r\n        .run();\r\n\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error updating user role:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get user role\r\n   */\r\n  async getUserRole(customerId: string): Promise<string | null> {\r\n    try {\r\n      const result = await this.db\r\n        .prepare('SELECT role FROM customers WHERE id = ?')\r\n        .bind(customerId)\r\n        .first();\r\n\r\n      return result ? (result as any).role : null;\r\n    } catch (error) {\r\n      console.error('Error fetching user role:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear cache for a specific role\r\n   */\r\n  private clearRoleCache(role: string): void {\r\n    // Clear all cache entries related to this role\r\n    const keysToDelete: string[] = [];\r\n    \r\n    for (const key of this.cache.keys()) {\r\n      if (key.startsWith(`${role}:`) || key === `role:${role}`) {\r\n        keysToDelete.push(key);\r\n      }\r\n    }\r\n    \r\n    keysToDelete.forEach(key => this.cache.delete(key));\r\n  }\r\n\r\n  /**\r\n   * Clear entire cache\r\n   */\r\n  clearCache(): void {\r\n    this.cache.clear();\r\n  }\r\n\r\n  /**\r\n   * Batch check multiple permissions\r\n   */\r\n  async hasPermissions(\r\n    role: string,\r\n    permissions: Array<{ permission: string; resource: string }>\r\n  ): Promise<boolean> {\r\n    const checks = await Promise.all(\r\n      permissions.map(({ permission, resource }) =>\r\n        this.hasPermission(role, permission, resource)\r\n      )\r\n    );\r\n\r\n    return checks.every(check => check === true);\r\n  }\r\n\r\n  /**\r\n   * Get all permissions grouped by role\r\n   */\r\n  async getAllPermissionsGrouped(): Promise<RolePermissions[]> {\r\n    try {\r\n      const { results } = await this.db\r\n        .prepare(\r\n          'SELECT role, permission, resource FROM clinical_permissions ORDER BY role, resource, permission'\r\n        )\r\n        .all();\r\n\r\n      const grouped = new Map<string, RolePermissions>();\r\n\r\n      for (const row of results as any[]) {\r\n        if (!grouped.has(row.role)) {\r\n          grouped.set(row.role, {\r\n            role: row.role,\r\n            permissions: []\r\n          });\r\n        }\r\n\r\n        grouped.get(row.role)!.permissions.push({\r\n          permission: row.permission,\r\n          resource: row.resource\r\n        });\r\n      }\r\n\r\n      return Array.from(grouped.values());\r\n    } catch (error) {\r\n      console.error('Error fetching grouped permissions:', error);\r\n      return [];\r\n    }\r\n  }\r\n}\r\n\r\n// Helper function to create RBAC middleware\r\nexport function requirePermission(\r\n  permission: string,\r\n  resource: string\r\n) {\r\n  return async function checkPermission(\r\n    request: Request,\r\n    env: any,\r\n    ctx: any,\r\n    next: () => Promise<Response>\r\n  ): Promise<Response> {\r\n    const customerId = request.headers.get('X-Customer-ID');\r\n    \r\n    if (!customerId) {\r\n      return new Response('Unauthorized', { status: 401 });\r\n    }\r\n\r\n    const rbac = new RBACManager(env.DB);\r\n    const role = await rbac.getUserRole(customerId);\r\n    \r\n    if (!role) {\r\n      return new Response('User role not found', { status: 403 });\r\n    }\r\n\r\n    const hasAccess = await rbac.hasPermission(role, permission, resource);\r\n    \r\n    if (!hasAccess) {\r\n      return new Response('Insufficient permissions', { status: 403 });\r\n    }\r\n\r\n    return next();\r\n  };\r\n}\r\n\r\n// Permission constants for consistency\r\nexport const PERMISSIONS = {\r\n  CREATE: 'create',\r\n  READ: 'read',\r\n  UPDATE: 'update',\r\n  DELETE: 'delete',\r\n  MANAGE: 'manage',\r\n  EXPORT: 'export',\r\n  CONFIGURE: 'configure'\r\n} as const;\r\n\r\nexport const RESOURCES = {\r\n  FORM_TEMPLATES: 'form_templates',\r\n  FORM_SUBMISSIONS: 'form_submissions',\r\n  PATIENT_DATA: 'patient_data',\r\n  ASSESSMENTS: 'assessments',\r\n  USERS: 'users',\r\n  ANALYTICS: 'analytics',\r\n  PERMISSIONS: 'permissions',\r\n  ORGANIZATIONS: 'organizations',\r\n  ALL_DATA: 'all_data',\r\n  SYSTEM: 'system',\r\n  OWN_TEMPLATES: 'own_templates',\r\n  OWN_SUBMISSIONS: 'own_submissions',\r\n  OWN_PROFILE: 'own_profile',\r\n  AGGREGATED_DATA: 'aggregated_data',\r\n  RESEARCH_QUERIES: 'research_queries'\r\n} as const;\r\n\r\nexport const ROLES = {\r\n  PATIENT: 'patient',\r\n  CLINICIAN: 'clinician',\r\n  ADMIN: 'admin',\r\n  RESEARCHER: 'researcher'\r\n} as const;"],"names":[],"mappings":"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"}