{"version":3,"file":"form_analytics_0O1GYlLm.mjs","sources":["../../../src/lib/services/form_analytics.ts"],"sourcesContent":["import type { D1Database } from '@cloudflare/workers-types';\r\nimport { getD1Manager, type D1ConnectionManager } from './d1-connection-manager';\r\n\r\nexport interface FormAnalytics {\r\n  templateId: number;\r\n  totalSubmissions: number;\r\n  completionRate: number;\r\n  averageCompletionTime: number;\r\n  abandonmentRate: number;\r\n  averageScore?: number;\r\n  responseDistribution: Record<string, any>;\r\n  submissionTrends: Array<{\r\n    date: string;\r\n    count: number;\r\n  }>;\r\n  fieldAnalytics: Array<{\r\n    fieldId: string;\r\n    fieldType: string;\r\n    responseCount: number;\r\n    averageValue?: number;\r\n    mostCommonValue?: string;\r\n    validationErrors: number;\r\n  }>;\r\n}\r\n\r\nexport interface SubmissionAnalytics {\r\n  submissionId: number;\r\n  completionTime: number;\r\n  score?: number;\r\n  fieldResponses: Array<{\r\n    fieldId: string;\r\n    value: any;\r\n    timeSpent: number;\r\n    validationErrors: number;\r\n  }>;\r\n  userBehavior: {\r\n    totalTimeSpent: number;\r\n    fieldsVisited: number;\r\n    backtrackCount: number;\r\n    pauseCount: number;\r\n  };\r\n}\r\n\r\nexport interface ClinicalInsights {\r\n  patientOutcomes: Array<{\r\n    patientId: number;\r\n    submissionCount: number;\r\n    averageScore: number;\r\n    trend: 'improving' | 'stable' | 'declining';\r\n    lastSubmission: string;\r\n  }>;\r\n  clinicianPerformance: Array<{\r\n    clinicianId: number;\r\n    formsAdministered: number;\r\n    averagePatientScore: number;\r\n    completionRate: number;\r\n  }>;\r\n  treatmentEffectiveness: Array<{\r\n    treatmentType: string;\r\n    patientCount: number;\r\n    averageImprovement: number;\r\n    successRate: number;\r\n  }>;\r\n}\r\n\r\nexport const ANALYTICS_QUERIES = {\r\n  TEMPLATE_SUBMISSIONS: `\r\n    SELECT \r\n      COUNT(*) as total_submissions,\r\n      AVG(completion_time_seconds) as avg_completion_time,\r\n      AVG(CASE WHEN status = 'completed' THEN 1.0 ELSE 0.0 END) as completion_rate,\r\n      AVG(score) as avg_score\r\n    FROM form_submissions \r\n    WHERE template_id = ?\r\n  `,\r\n  SUBMISSION_TRENDS: `\r\n    SELECT \r\n      DATE(submitted_at) as submission_date,\r\n      COUNT(*) as submission_count\r\n    FROM form_submissions \r\n    WHERE template_id = ? \r\n    AND submitted_at >= datetime('now', '-30 days')\r\n    GROUP BY DATE(submitted_at)\r\n    ORDER BY submission_date\r\n  `,\r\n  FIELD_ANALYTICS: `\r\n    SELECT \r\n      json_extract(responses, '$.field_' || ? || '.value') as field_value,\r\n      json_extract(responses, '$.field_' || ? || '.time_spent') as time_spent,\r\n      COUNT(*) as response_count\r\n    FROM form_submissions \r\n    WHERE template_id = ?\r\n    AND json_extract(responses, '$.field_' || ?) IS NOT NULL\r\n    GROUP BY field_value\r\n  `,\r\n  PATIENT_OUTCOMES: `\r\n    SELECT \r\n      submitted_by as patient_id,\r\n      COUNT(*) as submission_count,\r\n      AVG(score) as avg_score,\r\n      MAX(submitted_at) as last_submission,\r\n      MIN(score) as first_score,\r\n      MAX(score) as latest_score\r\n    FROM form_submissions fs\r\n    JOIN form_templates ft ON fs.template_id = ft.id\r\n    WHERE ft.category = 'clinical_assessment'\r\n    AND submitted_by IS NOT NULL\r\n    GROUP BY submitted_by\r\n    HAVING submission_count >= 2\r\n  `,\r\n  CLINICIAN_PERFORMANCE: `\r\n    SELECT \r\n      ft.created_by as clinician_id,\r\n      COUNT(DISTINCT fs.id) as forms_administered,\r\n      AVG(fs.score) as avg_patient_score,\r\n      AVG(CASE WHEN fs.status = 'completed' THEN 1.0 ELSE 0.0 END) as completion_rate\r\n    FROM form_templates ft\r\n    LEFT JOIN form_submissions fs ON ft.id = fs.template_id\r\n    WHERE ft.created_by IS NOT NULL\r\n    GROUP BY ft.created_by\r\n  `,\r\n  VALIDATION_ERRORS: `\r\n    SELECT \r\n      json_extract(metadata, '$.validation_errors') as validation_errors,\r\n      COUNT(*) as error_count\r\n    FROM form_submissions \r\n    WHERE template_id = ?\r\n    AND json_extract(metadata, '$.validation_errors') IS NOT NULL\r\n    GROUP BY validation_errors\r\n  `,\r\n  TIME_SERIES_ANALYTICS: `\r\n    SELECT \r\n      DATE(submitted_at) as date,\r\n      COUNT(*) as submissions,\r\n      COUNT(CASE WHEN status = 'completed' THEN 1 END) as completions,\r\n      AVG(score) as avg_score,\r\n      AVG(completion_time_seconds) as avg_time\r\n    FROM form_submissions \r\n    WHERE template_id = ?\r\n    AND submitted_at >= datetime('now', '-' || ? || ' days')\r\n    GROUP BY DATE(submitted_at)\r\n    ORDER BY date\r\n  `,\r\n  RESPONSE_DISTRIBUTION: `\r\n    SELECT \r\n      status,\r\n      COUNT(*) as count,\r\n      AVG(score) as avg_score\r\n    FROM form_submissions \r\n    WHERE template_id = ?\r\n    GROUP BY status\r\n  `,\r\n  FIELD_VALIDATION_ERRORS: `\r\n    SELECT COUNT(*) as error_count\r\n    FROM form_submissions\r\n    WHERE template_id = ?\r\n    AND json_extract(metadata, '$.validation_errors.' || ?) IS NOT NULL\r\n  `\r\n};\r\n\r\nexport class FormAnalyticsService {\r\n  private d1Manager: D1ConnectionManager;\r\n\r\n  constructor(DB: D1Database) {\r\n    this.d1Manager = getD1Manager(DB);\r\n  }\r\n\r\n  async getFormAnalytics(templateId: number): Promise<FormAnalytics> {\r\n    const cacheKey = `form_analytics:${templateId}`;\r\n    \r\n    return this.d1Manager.executeWithCache(\r\n      cacheKey,\r\n      async () => {\r\n        // Get basic submission statistics\r\n        const statsStmt = this.d1Manager.prepare(ANALYTICS_QUERIES.TEMPLATE_SUBMISSIONS);\r\n        const statsResponse = await statsStmt.bind(templateId).first();\r\n\r\n        const stats = statsResponse || {\r\n          total_submissions: 0,\r\n          avg_completion_time: 0,\r\n          completion_rate: 0,\r\n          avg_score: null\r\n        };\r\n\r\n        // Get submission trends\r\n        const trendsStmt = this.d1Manager.prepare(ANALYTICS_QUERIES.SUBMISSION_TRENDS);\r\n        const trendsResponse = await trendsStmt.bind(templateId).all();\r\n\r\n        const submissionTrends = trendsResponse.success \r\n          ? (trendsResponse.results as unknown as Array<{ submission_date: string; submission_count: number }>).map(row => ({\r\n              date: row.submission_date,\r\n              count: row.submission_count\r\n            }))\r\n          : [];\r\n\r\n        // Get template structure for field analysis\r\n        const templateStmt = this.d1Manager.prepare(`\r\n          SELECT components FROM form_templates WHERE id = ?\r\n        `);\r\n        const template = await templateStmt.bind(templateId).first();\r\n\r\n        let fieldAnalytics: any[] = [];\r\n        if (template && template.components) {\r\n          const components = this.d1Manager.parseJSON(template.components as string);\r\n          fieldAnalytics = await this.analyzeFields(templateId, components);\r\n        }\r\n\r\n        // Calculate response distribution\r\n        const responseDistribution = await this.getResponseDistribution(templateId);\r\n\r\n        return {\r\n          templateId,\r\n          totalSubmissions: Number(stats.total_submissions) || 0,\r\n          completionRate: Number(stats.completion_rate) || 0,\r\n          averageCompletionTime: Number(stats.avg_completion_time) || 0,\r\n          abandonmentRate: 1 - (Number(stats.completion_rate) || 0),\r\n          averageScore: stats.avg_score ? Number(stats.avg_score) : undefined,\r\n          responseDistribution,\r\n          submissionTrends,\r\n          fieldAnalytics,\r\n        };\r\n      },\r\n      600 // 10-minute cache for analytics data\r\n    );\r\n  }\r\n\r\n  private async analyzeFields(templateId: number, components: any[]): Promise<any[]> {\r\n    const fieldAnalytics: any[] = [];\r\n    const fieldAnalysisPromises = [];\r\n\r\n    for (const component of components) {\r\n      if (component.type && component.id) {\r\n        fieldAnalysisPromises.push(this.analyzeField(templateId, component));\r\n      }\r\n    }\r\n\r\n    const results = await Promise.all(fieldAnalysisPromises);\r\n    return results.filter(result => result !== null);\r\n  }\r\n\r\n  private async analyzeField(templateId: number, component: any): Promise<any | null> {\r\n    const cacheKey = `field_analytics:${templateId}:${component.id}`;\r\n    \r\n    return this.d1Manager.executeWithCache(\r\n      cacheKey,\r\n      async () => {\r\n        const fieldStmt = this.d1Manager.prepare(ANALYTICS_QUERIES.FIELD_ANALYTICS);\r\n        const fieldResponse = await fieldStmt\r\n          .bind(component.id, component.id, templateId, component.id)\r\n          .all();\r\n\r\n        if (fieldResponse.success && fieldResponse.results.length > 0) {\r\n          const responses = fieldResponse.results as unknown as Array<{\r\n            field_value: any;\r\n            time_spent: number;\r\n            response_count: number;\r\n          }>;\r\n          \r\n          const responseCount = responses.reduce((sum, r) => sum + r.response_count, 0);\r\n          \r\n          // Calculate field-specific metrics\r\n          let averageValue: number | undefined;\r\n          let mostCommonValue: string | undefined;\r\n\r\n          if (component.type === 'number' || component.type === 'slider') {\r\n            const values = responses\r\n              .filter(r => r.field_value !== null && !isNaN(Number(r.field_value)))\r\n              .map(r => ({ value: Number(r.field_value), count: r.response_count }));\r\n            \r\n            if (values.length > 0) {\r\n              const totalWeightedSum = values.reduce((sum, v) => sum + (v.value * v.count), 0);\r\n              averageValue = totalWeightedSum / responseCount;\r\n            }\r\n          }\r\n\r\n          // Find most common value\r\n          const sortedResponses = responses.sort((a, b) => b.response_count - a.response_count);\r\n          if (sortedResponses.length > 0) {\r\n            mostCommonValue = String(sortedResponses[0].field_value);\r\n          }\r\n\r\n          // Get validation errors for this field\r\n          const validationErrors = await this.getFieldValidationErrors(templateId, component.id);\r\n\r\n          return {\r\n            fieldId: component.id,\r\n            fieldType: component.type,\r\n            responseCount,\r\n            averageValue,\r\n            mostCommonValue,\r\n            validationErrors,\r\n          };\r\n        }\r\n        return null;\r\n      },\r\n      300 // 5-minute cache for field analytics\r\n    );\r\n  }\r\n\r\n  private async getFieldValidationErrors(templateId: number, fieldId: string): Promise<number> {\r\n    const stmt = this.d1Manager.prepare(ANALYTICS_QUERIES.FIELD_VALIDATION_ERRORS);\r\n    const response = await stmt.bind(templateId, fieldId).first();\r\n\r\n    return (response && typeof response === 'object' && 'error_count' in response && typeof response.error_count === 'number')\r\n      ? response.error_count : 0;\r\n  }\r\n\r\n  private async getResponseDistribution(templateId: number): Promise<Record<string, any>> {\r\n    const stmt = this.d1Manager.prepare(ANALYTICS_QUERIES.RESPONSE_DISTRIBUTION);\r\n    const response = await stmt.bind(templateId).all();\r\n\r\n    const distribution: Record<string, any> = {};\r\n    \r\n    if (response.success) {\r\n      (response.results as unknown as Array<{ status: string; count: number; avg_score: number | null }>)\r\n        .forEach(row => {\r\n          distribution[row.status] = {\r\n            count: row.count,\r\n            averageScore: row.avg_score\r\n          };\r\n        });\r\n    }\r\n\r\n    return distribution;\r\n  }\r\n\r\n  async getSubmissionAnalytics(submissionId: number): Promise<SubmissionAnalytics | null> {\r\n    const cacheKey = `submission_analytics:${submissionId}`;\r\n    \r\n    return this.d1Manager.executeWithCache(\r\n      cacheKey,\r\n      async () => {\r\n        const stmt = this.d1Manager.prepare(`\r\n          SELECT * FROM form_submissions WHERE id = ?\r\n        `);\r\n        const submission = await stmt.bind(submissionId).first();\r\n\r\n        if (!submission || typeof submission !== 'object') {\r\n          return null;\r\n        }\r\n\r\n        // Parse responses and metadata\r\n        const responses = this.d1Manager.parseJSON((submission as any).responses || '{}');\r\n        const metadata = this.d1Manager.parseJSON((submission as any).metadata || '{}');\r\n\r\n        // Analyze field responses\r\n        const fieldResponses = Object.keys(responses).map(fieldId => {\r\n          const fieldData = responses[fieldId];\r\n          return {\r\n            fieldId: fieldId.replace('field_', ''),\r\n            value: fieldData.value,\r\n            timeSpent: fieldData.time_spent || 0,\r\n            validationErrors: fieldData.validation_errors || 0,\r\n          };\r\n        });\r\n\r\n        // Get completion time and score\r\n        const completionTime = (submission as any).completion_time_seconds || 0;\r\n        const score = (submission as any).score || undefined;\r\n\r\n        // Calculate user behavior metrics\r\n        const userBehavior = {\r\n          totalTimeSpent: completionTime,\r\n          fieldsVisited: fieldResponses.length,\r\n          backtrackCount: metadata.backtrack_count || 0,\r\n          pauseCount: metadata.pause_count || 0,\r\n        };\r\n\r\n        return {\r\n          submissionId,\r\n          completionTime,\r\n          score,\r\n          fieldResponses,\r\n          userBehavior,\r\n        };\r\n      },\r\n      300 // 5-minute cache for submission analytics\r\n    );\r\n  }\r\n\r\n  async getClinicalInsights(): Promise<ClinicalInsights> {\r\n    const cacheKey = 'clinical_insights:all';\r\n    \r\n    return this.d1Manager.executeWithCache(\r\n      cacheKey,\r\n      async () => {\r\n        // Get patient outcomes\r\n        const patientStmt = this.d1Manager.prepare(ANALYTICS_QUERIES.PATIENT_OUTCOMES);\r\n        const patientOutcomesResponse = await patientStmt.all();\r\n        \r\n        const patientOutcomes = patientOutcomesResponse.success \r\n          ? (patientOutcomesResponse.results as unknown as Array<{\r\n              patient_id: number;\r\n              submission_count: number;\r\n              avg_score: number;\r\n              last_submission: string;\r\n              first_score: number;\r\n              latest_score: number;\r\n            }>).map(row => {\r\n              const trend = this.calculateTrend(row.first_score, row.latest_score);\r\n              return {\r\n                patientId: row.patient_id,\r\n                submissionCount: row.submission_count,\r\n                averageScore: Number(row.avg_score),\r\n                trend,\r\n                lastSubmission: row.last_submission,\r\n              };\r\n            })\r\n          : [];\r\n\r\n        // Get clinician performance\r\n        const clinicianStmt = this.d1Manager.prepare(ANALYTICS_QUERIES.CLINICIAN_PERFORMANCE);\r\n        const clinicianPerformanceResponse = await clinicianStmt.all();\r\n        \r\n        const clinicianPerformance = clinicianPerformanceResponse.success\r\n          ? (clinicianPerformanceResponse.results as unknown as Array<{\r\n              clinician_id: number;\r\n              forms_administered: number;\r\n              avg_patient_score: number;\r\n              completion_rate: number;\r\n            }>).map(row => ({\r\n              clinicianId: row.clinician_id,\r\n              formsAdministered: row.forms_administered || 0,\r\n              averagePatientScore: Number(row.avg_patient_score) || 0,\r\n              completionRate: Number(row.completion_rate) || 0,\r\n            }))\r\n          : [];\r\n\r\n        // Get treatment effectiveness (placeholder - would need treatment data)\r\n        const treatmentEffectiveness: any[] = [];\r\n\r\n        return {\r\n          patientOutcomes,\r\n          clinicianPerformance,\r\n          treatmentEffectiveness,\r\n        };\r\n      },\r\n      1800 // 30-minute cache for clinical insights\r\n    );\r\n  }\r\n\r\n  private calculateTrend(firstScore: number, latestScore: number): 'improving' | 'stable' | 'declining' {\r\n    if (!firstScore || !latestScore) return 'stable';\r\n    \r\n    const difference = latestScore - firstScore;\r\n    const threshold = firstScore * 0.1; // 10% threshold\r\n\r\n    if (difference > threshold) return 'improving';\r\n    if (difference < -threshold) return 'declining';\r\n    return 'stable';\r\n  }\r\n\r\n  async getFormComparisonAnalytics(templateIds: number[]): Promise<Array<{\r\n    templateId: number;\r\n    templateName: string;\r\n    totalSubmissions: number;\r\n    completionRate: number;\r\n    averageScore: number;\r\n    averageCompletionTime: number;\r\n  }>> {\r\n    const cacheKey = `form_comparison:${templateIds.sort().join('_')}`;\r\n    \r\n    return this.d1Manager.executeWithCache(\r\n      cacheKey,\r\n      async () => {\r\n        const comparisons: any[] = [];\r\n        const comparisonPromises = [];\r\n\r\n        for (const templateId of templateIds) {\r\n          comparisonPromises.push(this.getTemplateComparison(templateId));\r\n        }\r\n\r\n        const results = await Promise.all(comparisonPromises);\r\n        return results.filter(result => result !== null);\r\n      },\r\n      600 // 10-minute cache for comparison data\r\n    );\r\n  }\r\n\r\n  private async getTemplateComparison(templateId: number): Promise<any | null> {\r\n    const templateStmt = this.d1Manager.prepare(`\r\n      SELECT id, name FROM form_templates WHERE id = ?\r\n    `);\r\n    const template = await templateStmt.bind(templateId).first();\r\n\r\n    if (template) {\r\n      const analytics = await this.getFormAnalytics(templateId);\r\n      \r\n      return {\r\n        templateId,\r\n        templateName: template.name,\r\n        totalSubmissions: analytics.totalSubmissions,\r\n        completionRate: analytics.completionRate,\r\n        averageScore: analytics.averageScore || 0,\r\n        averageCompletionTime: analytics.averageCompletionTime,\r\n      };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  async getTimeSeriesAnalytics(templateId: number, days: number = 30): Promise<Array<{\r\n    date: string;\r\n    submissions: number;\r\n    completions: number;\r\n    averageScore: number;\r\n    averageTime: number;\r\n  }>> {\r\n    const cacheKey = `time_series:${templateId}:${days}`;\r\n    \r\n    return this.d1Manager.executeWithCache(\r\n      cacheKey,\r\n      async () => {\r\n        const stmt = this.d1Manager.prepare(ANALYTICS_QUERIES.TIME_SERIES_ANALYTICS);\r\n        const response = await stmt.bind(templateId, days).all();\r\n\r\n        if (response.success) {\r\n          return (response.results as unknown as Array<{\r\n            date: string;\r\n            submissions: number;\r\n            completions: number;\r\n            avg_score: number;\r\n            avg_time: number;\r\n          }>).map(row => ({\r\n            date: row.date,\r\n            submissions: row.submissions || 0,\r\n            completions: row.completions || 0,\r\n            averageScore: Number(row.avg_score) || 0,\r\n            averageTime: Number(row.avg_time) || 0,\r\n          }));\r\n        }\r\n\r\n        return [];\r\n      },\r\n      300 // 5-minute cache for time series data\r\n    );\r\n  }\r\n\r\n  async exportAnalyticsReport(templateId: number, format: 'json' | 'csv' = 'json'): Promise<string> {\r\n    const analytics = await this.getFormAnalytics(templateId);\r\n    const timeSeriesData = await this.getTimeSeriesAnalytics(templateId);\r\n\r\n    const reportData = {\r\n      analytics,\r\n      timeSeriesData,\r\n      generatedAt: new Date().toISOString(),\r\n    };\r\n\r\n    if (format === 'csv') {\r\n      return this.convertAnalyticsToCSV(reportData);\r\n    }\r\n\r\n    return JSON.stringify(reportData, null, 2);\r\n  }\r\n\r\n  private convertAnalyticsToCSV(reportData: any): string {\r\n    const { analytics, timeSeriesData } = reportData;\r\n    \r\n    let csv = 'Analytics Report\\n\\n';\r\n    csv += 'Metric,Value\\n';\r\n    csv += `Template ID,${analytics.templateId}\\n`;\r\n    csv += `Total Submissions,${analytics.totalSubmissions}\\n`;\r\n    csv += `Completion Rate,${analytics.completionRate}\\n`;\r\n    csv += `Average Completion Time,${analytics.averageCompletionTime}\\n`;\r\n    csv += `Abandonment Rate,${analytics.abandonmentRate}\\n`;\r\n    csv += `Average Score,${analytics.averageScore || 'N/A'}\\n\\n`;\r\n\r\n    csv += 'Time Series Data\\n';\r\n    csv += 'Date,Submissions,Completions,Average Score,Average Time\\n';\r\n    timeSeriesData.forEach((row: any) => {\r\n      csv += `${row.date},${row.submissions},${row.completions},${row.averageScore},${row.averageTime}\\n`;\r\n    });\r\n\r\n    csv += '\\nField Analytics\\n';\r\n    csv += 'Field ID,Field Type,Response Count,Average Value,Most Common Value,Validation Errors\\n';\r\n    analytics.fieldAnalytics.forEach((field: any) => {\r\n      csv += `${field.fieldId},${field.fieldType},${field.responseCount},${field.averageValue || 'N/A'},${field.mostCommonValue || 'N/A'},${field.validationErrors}\\n`;\r\n    });\r\n\r\n    return csv;\r\n  }\r\n\r\n  // Cache invalidation methods\r\n\r\n  clearFormAnalyticsCaches(templateId?: number) {\r\n    const patterns = ['form_analytics:', 'field_analytics:', 'time_series:', 'form_comparison:'];\r\n    \r\n    if (templateId) {\r\n      patterns.push(`form_analytics:${templateId}`);\r\n      patterns.push(`field_analytics:${templateId}:`);\r\n      patterns.push(`time_series:${templateId}:`);\r\n    }\r\n    \r\n    this.d1Manager.clearSpecificCaches(patterns);\r\n  }\r\n\r\n  clearClinicalInsightsCaches() {\r\n    this.d1Manager.clearSpecificCaches(['clinical_insights:']);\r\n  }\r\n\r\n  clearSubmissionAnalyticsCaches(submissionId?: number) {\r\n    if (submissionId) {\r\n      this.d1Manager.clearSpecificCaches([`submission_analytics:${submissionId}`]);\r\n    } else {\r\n      this.d1Manager.clearSpecificCaches(['submission_analytics:']);\r\n    }\r\n  }\r\n}"],"names":[],"mappings":";;;AAiEO,MAAM,iBAAA,GAAoB;AAAA,EAC/B,oBAAA,EAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAA,CAAA;AAAA,EAStB,iBAAA,EAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAA,CAAA;AAAA,EAUnB,eAAA,EAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAA,CAAA;AAAA,EAUjB,gBAAA,EAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAA,CAAA;AAAA,EAelB,qBAAA,EAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAA,CAAA;AAAA,EAoBvB,qBAAA,EAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAA,CAAA;AAAA,EAavB,qBAAA,EAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAA,CAAA;AAAA,EASvB,uBAAA,EAAyB;AAAA;AAAA;AAAA;AAAA;AAAA,EAAA;AAM3B,CAAA;AAEO,MAAM,oBAAA,CAAqB;AAAA,EACxB,SAAA;AAAA,EAER,YAAY,EAAA,EAAgB;AAC1B,IAAA,IAAA,CAAK,SAAA,GAAY,aAAa,EAAE,CAAA;AAAA,EAClC;AAAA,EAEA,MAAM,iBAAiB,UAAA,EAA4C;AACjE,IAAA,MAAM,QAAA,GAAW,kBAAkB,UAAU,CAAA,CAAA;AAE7C,IAAA,OAAO,KAAK,SAAA,CAAU,gBAAA;AAAA,MACpB,QAAA;AAAA,MACA,YAAY;AAEV,QAAA,MAAM,SAAA,GAAY,IAAA,CAAK,SAAA,CAAU,OAAA,CAAQ,kBAAkB,oBAAoB,CAAA;AAC/E,QAAA,MAAM,gBAAgB,MAAM,SAAA,CAAU,IAAA,CAAK,UAAU,EAAE,KAAA,EAAM;AAE7D,QAAA,MAAM,QAAQ,aAAA,IAAiB;AAAA,UAC7B,iBAAA,EAAmB,CAAA;AAAA,UACnB,mBAAA,EAAqB,CAAA;AAAA,UACrB,eAAA,EAAiB,CAAA;AAAA,UACjB,SAAA,EAAW;AAAA,SACb;AAGA,QAAA,MAAM,UAAA,GAAa,IAAA,CAAK,SAAA,CAAU,OAAA,CAAQ,kBAAkB,iBAAiB,CAAA;AAC7E,QAAA,MAAM,iBAAiB,MAAM,UAAA,CAAW,IAAA,CAAK,UAAU,EAAE,GAAA,EAAI;AAE7D,QAAA,MAAM,mBAAmB,cAAA,CAAe,OAAA,GACnC,cAAA,CAAe,OAAA,CAAoF,IAAI,CAAA,GAAA,MAAQ;AAAA,UAC9G,MAAM,GAAA,CAAI,eAAA;AAAA,UACV,OAAO,GAAA,CAAI;AAAA,SACb,CAAE,IACF,EAAC;AAGL,QAAA,MAAM,YAAA,GAAe,IAAA,CAAK,SAAA,CAAU,OAAA,CAAQ;AAAA;AAAA,QAAA,CAE3C,CAAA;AACD,QAAA,MAAM,WAAW,MAAM,YAAA,CAAa,IAAA,CAAK,UAAU,EAAE,KAAA,EAAM;AAE3D,QAAA,IAAI,iBAAwB,EAAC;AAC7B,QAAA,IAAI,QAAA,IAAY,SAAS,UAAA,EAAY;AACnC,UAAA,MAAM,UAAA,GAAa,IAAA,CAAK,SAAA,CAAU,SAAA,CAAU,SAAS,UAAoB,CAAA;AACzE,UAAA,cAAA,GAAiB,MAAM,IAAA,CAAK,aAAA,CAAc,UAAA,EAAY,UAAU,CAAA;AAAA,QAClE;AAGA,QAAA,MAAM,oBAAA,GAAuB,MAAM,IAAA,CAAK,uBAAA,CAAwB,UAAU,CAAA;AAE1E,QAAA,OAAO;AAAA,UACL,UAAA;AAAA,UACA,gBAAA,EAAkB,MAAA,CAAO,KAAA,CAAM,iBAAiB,CAAA,IAAK,CAAA;AAAA,UACrD,cAAA,EAAgB,MAAA,CAAO,KAAA,CAAM,eAAe,CAAA,IAAK,CAAA;AAAA,UACjD,qBAAA,EAAuB,MAAA,CAAO,KAAA,CAAM,mBAAmB,CAAA,IAAK,CAAA;AAAA,UAC5D,eAAA,EAAiB,CAAA,IAAK,MAAA,CAAO,KAAA,CAAM,eAAe,CAAA,IAAK,CAAA,CAAA;AAAA,UACvD,cAAc,KAAA,CAAM,SAAA,GAAY,MAAA,CAAO,KAAA,CAAM,SAAS,CAAA,GAAI,MAAA;AAAA,UAC1D,oBAAA;AAAA,UACA,gBAAA;AAAA,UACA;AAAA,SACF;AAAA,MACF,CAAA;AAAA,MACA;AAAA;AAAA,KACF;AAAA,EACF;AAAA,EAEA,MAAc,aAAA,CAAc,UAAA,EAAoB,UAAA,EAAmC;AAEjF,IAAA,MAAM,wBAAwB,EAAC;AAE/B,IAAA,KAAA,MAAW,aAAa,UAAA,EAAY;AAClC,MAAA,IAAI,SAAA,CAAU,IAAA,IAAQ,SAAA,CAAU,EAAA,EAAI;AAClC,QAAA,qBAAA,CAAsB,IAAA,CAAK,IAAA,CAAK,YAAA,CAAa,UAAA,EAAY,SAAS,CAAC,CAAA;AAAA,MACrE;AAAA,IACF;AAEA,IAAA,MAAM,OAAA,GAAU,MAAM,OAAA,CAAQ,GAAA,CAAI,qBAAqB,CAAA;AACvD,IAAA,OAAO,OAAA,CAAQ,MAAA,CAAO,CAAA,MAAA,KAAU,MAAA,KAAW,IAAI,CAAA;AAAA,EACjD;AAAA,EAEA,MAAc,YAAA,CAAa,UAAA,EAAoB,SAAA,EAAqC;AAClF,IAAA,MAAM,QAAA,GAAW,CAAA,gBAAA,EAAmB,UAAU,CAAA,CAAA,EAAI,UAAU,EAAE,CAAA,CAAA;AAE9D,IAAA,OAAO,KAAK,SAAA,CAAU,gBAAA;AAAA,MACpB,QAAA;AAAA,MACA,YAAY;AACV,QAAA,MAAM,SAAA,GAAY,IAAA,CAAK,SAAA,CAAU,OAAA,CAAQ,kBAAkB,eAAe,CAAA;AAC1E,QAAA,MAAM,aAAA,GAAgB,MAAM,SAAA,CACzB,IAAA,CAAK,SAAA,CAAU,EAAA,EAAI,SAAA,CAAU,EAAA,EAAI,UAAA,EAAY,SAAA,CAAU,EAAE,CAAA,CACzD,GAAA,EAAI;AAEP,QAAA,IAAI,aAAA,CAAc,OAAA,IAAW,aAAA,CAAc,OAAA,CAAQ,SAAS,CAAA,EAAG;AAC7D,UAAA,MAAM,YAAY,aAAA,CAAc,OAAA;AAMhC,UAAA,MAAM,aAAA,GAAgB,UAAU,MAAA,CAAO,CAAC,KAAK,CAAA,KAAM,GAAA,GAAM,CAAA,CAAE,cAAA,EAAgB,CAAC,CAAA;AAG5E,UAAA,IAAI,YAAA;AACJ,UAAA,IAAI,eAAA;AAEJ,UAAA,IAAI,SAAA,CAAU,IAAA,KAAS,QAAA,IAAY,SAAA,CAAU,SAAS,QAAA,EAAU;AAC9D,YAAA,MAAM,MAAA,GAAS,SAAA,CACZ,MAAA,CAAO,CAAA,CAAA,KAAK,CAAA,CAAE,WAAA,KAAgB,IAAA,IAAQ,CAAC,KAAA,CAAM,MAAA,CAAO,CAAA,CAAE,WAAW,CAAC,CAAC,CAAA,CACnE,GAAA,CAAI,CAAA,CAAA,MAAM,EAAE,KAAA,EAAO,MAAA,CAAO,CAAA,CAAE,WAAW,CAAA,EAAG,KAAA,EAAO,CAAA,CAAE,cAAA,EAAe,CAAE,CAAA;AAEvE,YAAA,IAAI,MAAA,CAAO,SAAS,CAAA,EAAG;AACrB,cAAA,MAAM,gBAAA,GAAmB,MAAA,CAAO,MAAA,CAAO,CAAC,GAAA,EAAK,CAAA,KAAM,GAAA,GAAO,CAAA,CAAE,KAAA,GAAQ,CAAA,CAAE,KAAA,EAAQ,CAAC,CAAA;AAC/E,cAAA,YAAA,GAAe,gBAAA,GAAmB,aAAA;AAAA,YACpC;AAAA,UACF;AAGA,UAAA,MAAM,eAAA,GAAkB,UAAU,IAAA,CAAK,CAAC,GAAG,CAAA,KAAM,CAAA,CAAE,cAAA,GAAiB,CAAA,CAAE,cAAc,CAAA;AACpF,UAAA,IAAI,eAAA,CAAgB,SAAS,CAAA,EAAG;AAC9B,YAAA,eAAA,GAAkB,MAAA,CAAO,eAAA,CAAgB,CAAC,CAAA,CAAE,WAAW,CAAA;AAAA,UACzD;AAGA,UAAA,MAAM,mBAAmB,MAAM,IAAA,CAAK,wBAAA,CAAyB,UAAA,EAAY,UAAU,EAAE,CAAA;AAErF,UAAA,OAAO;AAAA,YACL,SAAS,SAAA,CAAU,EAAA;AAAA,YACnB,WAAW,SAAA,CAAU,IAAA;AAAA,YACrB,aAAA;AAAA,YACA,YAAA;AAAA,YACA,eAAA;AAAA,YACA;AAAA,WACF;AAAA,QACF;AACA,QAAA,OAAO,IAAA;AAAA,MACT,CAAA;AAAA,MACA;AAAA;AAAA,KACF;AAAA,EACF;AAAA,EAEA,MAAc,wBAAA,CAAyB,UAAA,EAAoB,OAAA,EAAkC;AAC3F,IAAA,MAAM,IAAA,GAAO,IAAA,CAAK,SAAA,CAAU,OAAA,CAAQ,kBAAkB,uBAAuB,CAAA;AAC7E,IAAA,MAAM,WAAW,MAAM,IAAA,CAAK,KAAK,UAAA,EAAY,OAAO,EAAE,KAAA,EAAM;AAE5D,IAAA,OAAQ,QAAA,IAAY,OAAO,QAAA,KAAa,QAAA,IAAY,aAAA,IAAiB,QAAA,IAAY,OAAO,QAAA,CAAS,WAAA,KAAgB,QAAA,GAC7G,QAAA,CAAS,WAAA,GAAc,CAAA;AAAA,EAC7B;AAAA,EAEA,MAAc,wBAAwB,UAAA,EAAkD;AACtF,IAAA,MAAM,IAAA,GAAO,IAAA,CAAK,SAAA,CAAU,OAAA,CAAQ,kBAAkB,qBAAqB,CAAA;AAC3E,IAAA,MAAM,WAAW,MAAM,IAAA,CAAK,IAAA,CAAK,UAAU,EAAE,GAAA,EAAI;AAEjD,IAAA,MAAM,eAAoC,EAAC;AAE3C,IAAA,IAAI,SAAS,OAAA,EAAS;AACpB,MAAC,QAAA,CAAS,OAAA,CACP,OAAA,CAAQ,CAAA,GAAA,KAAO;AACd,QAAA,YAAA,CAAa,GAAA,CAAI,MAAM,CAAA,GAAI;AAAA,UACzB,OAAO,GAAA,CAAI,KAAA;AAAA,UACX,cAAc,GAAA,CAAI;AAAA,SACpB;AAAA,MACF,CAAC,CAAA;AAAA,IACL;AAEA,IAAA,OAAO,YAAA;AAAA,EACT;AAAA,EAEA,MAAM,uBAAuB,YAAA,EAA2D;AACtF,IAAA,MAAM,QAAA,GAAW,wBAAwB,YAAY,CAAA,CAAA;AAErD,IAAA,OAAO,KAAK,SAAA,CAAU,gBAAA;AAAA,MACpB,QAAA;AAAA,MACA,YAAY;AACV,QAAA,MAAM,IAAA,GAAO,IAAA,CAAK,SAAA,CAAU,OAAA,CAAQ;AAAA;AAAA,QAAA,CAEnC,CAAA;AACD,QAAA,MAAM,aAAa,MAAM,IAAA,CAAK,IAAA,CAAK,YAAY,EAAE,KAAA,EAAM;AAEvD,QAAA,IAAI,CAAC,UAAA,IAAc,OAAO,UAAA,KAAe,QAAA,EAAU;AACjD,UAAA,OAAO,IAAA;AAAA,QACT;AAGA,QAAA,MAAM,YAAY,IAAA,CAAK,SAAA,CAAU,SAAA,CAAW,UAAA,CAAmB,aAAa,IAAI,CAAA;AAChF,QAAA,MAAM,WAAW,IAAA,CAAK,SAAA,CAAU,SAAA,CAAW,UAAA,CAAmB,YAAY,IAAI,CAAA;AAG9E,QAAA,MAAM,iBAAiB,MAAA,CAAO,IAAA,CAAK,SAAS,CAAA,CAAE,IAAI,CAAA,OAAA,KAAW;AAC3D,UAAA,MAAM,SAAA,GAAY,UAAU,OAAO,CAAA;AACnC,UAAA,OAAO;AAAA,YACL,OAAA,EAAS,OAAA,CAAQ,OAAA,CAAQ,QAAA,EAAU,EAAE,CAAA;AAAA,YACrC,OAAO,SAAA,CAAU,KAAA;AAAA,YACjB,SAAA,EAAW,UAAU,UAAA,IAAc,CAAA;AAAA,YACnC,gBAAA,EAAkB,UAAU,iBAAA,IAAqB;AAAA,WACnD;AAAA,QACF,CAAC,CAAA;AAGD,QAAA,MAAM,cAAA,GAAkB,WAAmB,uBAAA,IAA2B,CAAA;AACtE,QAAA,MAAM,KAAA,GAAS,WAAmB,KAAA,IAAS,MAAA;AAG3C,QAAA,MAAM,YAAA,GAAe;AAAA,UACnB,cAAA,EAAgB,cAAA;AAAA,UAChB,eAAe,cAAA,CAAe,MAAA;AAAA,UAC9B,cAAA,EAAgB,SAAS,eAAA,IAAmB,CAAA;AAAA,UAC5C,UAAA,EAAY,SAAS,WAAA,IAAe;AAAA,SACtC;AAEA,QAAA,OAAO;AAAA,UACL,YAAA;AAAA,UACA,cAAA;AAAA,UACA,KAAA;AAAA,UACA,cAAA;AAAA,UACA;AAAA,SACF;AAAA,MACF,CAAA;AAAA,MACA;AAAA;AAAA,KACF;AAAA,EACF;AAAA,EAEA,MAAM,mBAAA,GAAiD;AACrD,IAAA,MAAM,QAAA,GAAW,uBAAA;AAEjB,IAAA,OAAO,KAAK,SAAA,CAAU,gBAAA;AAAA,MACpB,QAAA;AAAA,MACA,YAAY;AAEV,QAAA,MAAM,WAAA,GAAc,IAAA,CAAK,SAAA,CAAU,OAAA,CAAQ,kBAAkB,gBAAgB,CAAA;AAC7E,QAAA,MAAM,uBAAA,GAA0B,MAAM,WAAA,CAAY,GAAA,EAAI;AAEtD,QAAA,MAAM,kBAAkB,uBAAA,CAAwB,OAAA,GAC3C,uBAAA,CAAwB,OAAA,CAOrB,IAAI,CAAA,GAAA,KAAO;AACb,UAAA,MAAM,QAAQ,IAAA,CAAK,cAAA,CAAe,GAAA,CAAI,WAAA,EAAa,IAAI,YAAY,CAAA;AACnE,UAAA,OAAO;AAAA,YACL,WAAW,GAAA,CAAI,UAAA;AAAA,YACf,iBAAiB,GAAA,CAAI,gBAAA;AAAA,YACrB,YAAA,EAAc,MAAA,CAAO,GAAA,CAAI,SAAS,CAAA;AAAA,YAClC,KAAA;AAAA,YACA,gBAAgB,GAAA,CAAI;AAAA,WACtB;AAAA,QACF,CAAC,IACD,EAAC;AAGL,QAAA,MAAM,aAAA,GAAgB,IAAA,CAAK,SAAA,CAAU,OAAA,CAAQ,kBAAkB,qBAAqB,CAAA;AACpF,QAAA,MAAM,4BAAA,GAA+B,MAAM,aAAA,CAAc,GAAA,EAAI;AAE7D,QAAA,MAAM,uBAAuB,4BAAA,CAA6B,OAAA,GACrD,4BAAA,CAA6B,OAAA,CAK1B,IAAI,CAAA,GAAA,MAAQ;AAAA,UACd,aAAa,GAAA,CAAI,YAAA;AAAA,UACjB,iBAAA,EAAmB,IAAI,kBAAA,IAAsB,CAAA;AAAA,UAC7C,mBAAA,EAAqB,MAAA,CAAO,GAAA,CAAI,iBAAiB,CAAA,IAAK,CAAA;AAAA,UACtD,cAAA,EAAgB,MAAA,CAAO,GAAA,CAAI,eAAe,CAAA,IAAK;AAAA,SACjD,CAAE,IACF,EAAC;AAGL,QAAA,MAAM,yBAAgC,EAAC;AAEvC,QAAA,OAAO;AAAA,UACL,eAAA;AAAA,UACA,oBAAA;AAAA,UACA;AAAA,SACF;AAAA,MACF,CAAA;AAAA,MACA;AAAA;AAAA,KACF;AAAA,EACF;AAAA,EAEQ,cAAA,CAAe,YAAoB,WAAA,EAA2D;AACpG,IAAA,IAAI,CAAC,UAAA,IAAc,CAAC,WAAA,EAAa,OAAO,QAAA;AAExC,IAAA,MAAM,aAAa,WAAA,GAAc,UAAA;AACjC,IAAA,MAAM,YAAY,UAAA,GAAa,GAAA;AAE/B,IAAA,IAAI,UAAA,GAAa,WAAW,OAAO,WAAA;AACnC,IAAA,IAAI,UAAA,GAAa,CAAC,SAAA,EAAW,OAAO,WAAA;AACpC,IAAA,OAAO,QAAA;AAAA,EACT;AAAA,EAEA,MAAM,2BAA2B,WAAA,EAO7B;AACF,IAAA,MAAM,WAAW,CAAA,gBAAA,EAAmB,WAAA,CAAY,MAAK,CAAE,IAAA,CAAK,GAAG,CAAC,CAAA,CAAA;AAEhE,IAAA,OAAO,KAAK,SAAA,CAAU,gBAAA;AAAA,MACpB,QAAA;AAAA,MACA,YAAY;AAEV,QAAA,MAAM,qBAAqB,EAAC;AAE5B,QAAA,KAAA,MAAW,cAAc,WAAA,EAAa;AACpC,UAAA,kBAAA,CAAmB,IAAA,CAAK,IAAA,CAAK,qBAAA,CAAsB,UAAU,CAAC,CAAA;AAAA,QAChE;AAEA,QAAA,MAAM,OAAA,GAAU,MAAM,OAAA,CAAQ,GAAA,CAAI,kBAAkB,CAAA;AACpD,QAAA,OAAO,OAAA,CAAQ,MAAA,CAAO,CAAA,MAAA,KAAU,MAAA,KAAW,IAAI,CAAA;AAAA,MACjD,CAAA;AAAA,MACA;AAAA;AAAA,KACF;AAAA,EACF;AAAA,EAEA,MAAc,sBAAsB,UAAA,EAAyC;AAC3E,IAAA,MAAM,YAAA,GAAe,IAAA,CAAK,SAAA,CAAU,OAAA,CAAQ;AAAA;AAAA,IAAA,CAE3C,CAAA;AACD,IAAA,MAAM,WAAW,MAAM,YAAA,CAAa,IAAA,CAAK,UAAU,EAAE,KAAA,EAAM;AAE3D,IAAA,IAAI,QAAA,EAAU;AACZ,MAAA,MAAM,SAAA,GAAY,MAAM,IAAA,CAAK,gBAAA,CAAiB,UAAU,CAAA;AAExD,MAAA,OAAO;AAAA,QACL,UAAA;AAAA,QACA,cAAc,QAAA,CAAS,IAAA;AAAA,QACvB,kBAAkB,SAAA,CAAU,gBAAA;AAAA,QAC5B,gBAAgB,SAAA,CAAU,cAAA;AAAA,QAC1B,YAAA,EAAc,UAAU,YAAA,IAAgB,CAAA;AAAA,QACxC,uBAAuB,SAAA,CAAU;AAAA,OACnC;AAAA,IACF;AACA,IAAA,OAAO,IAAA;AAAA,EACT;AAAA,EAEA,MAAM,sBAAA,CAAuB,UAAA,EAAoB,IAAA,GAAe,EAAA,EAM5D;AACF,IAAA,MAAM,QAAA,GAAW,CAAA,YAAA,EAAe,UAAU,CAAA,CAAA,EAAI,IAAI,CAAA,CAAA;AAElD,IAAA,OAAO,KAAK,SAAA,CAAU,gBAAA;AAAA,MACpB,QAAA;AAAA,MACA,YAAY;AACV,QAAA,MAAM,IAAA,GAAO,IAAA,CAAK,SAAA,CAAU,OAAA,CAAQ,kBAAkB,qBAAqB,CAAA;AAC3E,QAAA,MAAM,WAAW,MAAM,IAAA,CAAK,KAAK,UAAA,EAAY,IAAI,EAAE,GAAA,EAAI;AAEvD,QAAA,IAAI,SAAS,OAAA,EAAS;AACpB,UAAA,OAAQ,QAAA,CAAS,OAAA,CAMb,GAAA,CAAI,CAAA,GAAA,MAAQ;AAAA,YACd,MAAM,GAAA,CAAI,IAAA;AAAA,YACV,WAAA,EAAa,IAAI,WAAA,IAAe,CAAA;AAAA,YAChC,WAAA,EAAa,IAAI,WAAA,IAAe,CAAA;AAAA,YAChC,YAAA,EAAc,MAAA,CAAO,GAAA,CAAI,SAAS,CAAA,IAAK,CAAA;AAAA,YACvC,WAAA,EAAa,MAAA,CAAO,GAAA,CAAI,QAAQ,CAAA,IAAK;AAAA,WACvC,CAAE,CAAA;AAAA,QACJ;AAEA,QAAA,OAAO,EAAC;AAAA,MACV,CAAA;AAAA,MACA;AAAA;AAAA,KACF;AAAA,EACF;AAAA,EAEA,MAAM,qBAAA,CAAsB,UAAA,EAAoB,MAAA,GAAyB,MAAA,EAAyB;AAChG,IAAA,MAAM,SAAA,GAAY,MAAM,IAAA,CAAK,gBAAA,CAAiB,UAAU,CAAA;AACxD,IAAA,MAAM,cAAA,GAAiB,MAAM,IAAA,CAAK,sBAAA,CAAuB,UAAU,CAAA;AAEnE,IAAA,MAAM,UAAA,GAAa;AAAA,MACjB,SAAA;AAAA,MACA,cAAA;AAAA,MACA,WAAA,EAAA,iBAAa,IAAI,IAAA,EAAK,EAAE,WAAA;AAAY,KACtC;AAEA,IAAA,IAAI,WAAW,KAAA,EAAO;AACpB,MAAA,OAAO,IAAA,CAAK,sBAAsB,UAAU,CAAA;AAAA,IAC9C;AAEA,IAAA,OAAO,IAAA,CAAK,SAAA,CAAU,UAAA,EAAY,IAAA,EAAM,CAAC,CAAA;AAAA,EAC3C;AAAA,EAEQ,sBAAsB,UAAA,EAAyB;AACrD,IAAA,MAAM,EAAE,SAAA,EAAW,cAAA,EAAe,GAAI,UAAA;AAEtC,IAAA,IAAI,GAAA,GAAM,sBAAA;AACV,IAAA,GAAA,IAAO,gBAAA;AACP,IAAA,GAAA,IAAO,CAAA,YAAA,EAAe,UAAU,UAAU;AAAA,CAAA;AAC1C,IAAA,GAAA,IAAO,CAAA,kBAAA,EAAqB,UAAU,gBAAgB;AAAA,CAAA;AACtD,IAAA,GAAA,IAAO,CAAA,gBAAA,EAAmB,UAAU,cAAc;AAAA,CAAA;AAClD,IAAA,GAAA,IAAO,CAAA,wBAAA,EAA2B,UAAU,qBAAqB;AAAA,CAAA;AACjE,IAAA,GAAA,IAAO,CAAA,iBAAA,EAAoB,UAAU,eAAe;AAAA,CAAA;AACpD,IAAA,GAAA,IAAO,CAAA,cAAA,EAAiB,SAAA,CAAU,YAAA,IAAgB,KAAK;;AAAA,CAAA;AAEvD,IAAA,GAAA,IAAO,oBAAA;AACP,IAAA,GAAA,IAAO,2DAAA;AACP,IAAA,cAAA,CAAe,OAAA,CAAQ,CAAC,GAAA,KAAa;AACnC,MAAA,GAAA,IAAO,CAAA,EAAG,GAAA,CAAI,IAAI,CAAA,CAAA,EAAI,IAAI,WAAW,CAAA,CAAA,EAAI,GAAA,CAAI,WAAW,CAAA,CAAA,EAAI,GAAA,CAAI,YAAY,CAAA,CAAA,EAAI,IAAI,WAAW;AAAA,CAAA;AAAA,IACjG,CAAC,CAAA;AAED,IAAA,GAAA,IAAO,qBAAA;AACP,IAAA,GAAA,IAAO,wFAAA;AACP,IAAA,SAAA,CAAU,cAAA,CAAe,OAAA,CAAQ,CAAC,KAAA,KAAe;AAC/C,MAAA,GAAA,IAAO,GAAG,KAAA,CAAM,OAAO,IAAI,KAAA,CAAM,SAAS,IAAI,KAAA,CAAM,aAAa,IAAI,KAAA,CAAM,YAAA,IAAgB,KAAK,CAAA,CAAA,EAAI,KAAA,CAAM,mBAAmB,KAAK,CAAA,CAAA,EAAI,MAAM,gBAAgB;AAAA,CAAA;AAAA,IAC9J,CAAC,CAAA;AAED,IAAA,OAAO,GAAA;AAAA,EACT;AAAA;AAAA,EAIA,yBAAyB,UAAA,EAAqB;AAC5C,IAAA,MAAM,QAAA,GAAW,CAAC,iBAAA,EAAmB,kBAAA,EAAoB,gBAAgB,kBAAkB,CAAA;AAE3F,IAAA,IAAI,UAAA,EAAY;AACd,MAAA,QAAA,CAAS,IAAA,CAAK,CAAA,eAAA,EAAkB,UAAU,CAAA,CAAE,CAAA;AAC5C,MAAA,QAAA,CAAS,IAAA,CAAK,CAAA,gBAAA,EAAmB,UAAU,CAAA,CAAA,CAAG,CAAA;AAC9C,MAAA,QAAA,CAAS,IAAA,CAAK,CAAA,YAAA,EAAe,UAAU,CAAA,CAAA,CAAG,CAAA;AAAA,IAC5C;AAEA,IAAA,IAAA,CAAK,SAAA,CAAU,oBAAoB,QAAQ,CAAA;AAAA,EAC7C;AAAA,EAEA,2BAAA,GAA8B;AAC5B,IAAA,IAAA,CAAK,SAAA,CAAU,mBAAA,CAAoB,CAAC,oBAAoB,CAAC,CAAA;AAAA,EAC3D;AAAA,EAEA,+BAA+B,YAAA,EAAuB;AACpD,IAAA,IAAI,YAAA,EAAc;AAChB,MAAA,IAAA,CAAK,UAAU,mBAAA,CAAoB,CAAC,CAAA,qBAAA,EAAwB,YAAY,EAAE,CAAC,CAAA;AAAA,IAC7E,CAAA,MAAO;AACL,MAAA,IAAA,CAAK,SAAA,CAAU,mBAAA,CAAoB,CAAC,uBAAuB,CAAC,CAAA;AAAA,IAC9D;AAAA,EACF;AACF;;;;"}