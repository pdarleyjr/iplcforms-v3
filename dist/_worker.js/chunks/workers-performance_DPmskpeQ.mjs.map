{"version":3,"file":"workers-performance_DPmskpeQ.mjs","sources":["../../../src/lib/utils/workers-performance.ts"],"sourcesContent":["/**\r\n * Workers Performance Utilities\r\n * Provides performance optimization, monitoring, and caching for Cloudflare Workers\r\n */\r\n\r\nimport { getD1Manager } from '../services/d1-connection-manager';\r\n\r\n// Define global KV namespace types - using interface to avoid redeclaration\r\ndeclare global {\r\n  interface CloudflareWorkerGlobalScope {\r\n    METRICS_KV?: KVNamespace;\r\n    CACHE_KV?: KVNamespace;\r\n  }\r\n}\r\n\r\nexport interface PerformanceMetrics {\r\n  requestId: string;\r\n  startTime: number;\r\n  endTime?: number;\r\n  duration?: number;\r\n  cpuTime?: number;\r\n  memoryUsage?: number;\r\n  cacheHits: number;\r\n  cacheMisses: number;\r\n  dbQueries: number;\r\n  dbDuration: number;\r\n  apiCalls: number;\r\n  apiDuration: number;\r\n  errors: number;\r\n  statusCode?: number;\r\n  responseSize?: number;\r\n}\r\n\r\nexport interface CacheOptions {\r\n  ttl?: number;\r\n  tags?: string[];\r\n  bypassCache?: boolean;\r\n  cacheKey?: string;\r\n  cacheControl?: string;\r\n}\r\n\r\nexport interface PerformanceConfig {\r\n  enableMetrics?: boolean;\r\n  enableCaching?: boolean;\r\n  enableCompression?: boolean;\r\n  enableRequestCoalescing?: boolean;\r\n  metricsNamespace?: string;\r\n  cacheName?: string;\r\n}\r\n\r\n/**\r\n * Workers Performance Manager\r\n * Singleton pattern for consistent performance optimization across the application\r\n */\r\nexport class WorkersPerformanceManager {\r\n  private static instance: WorkersPerformanceManager;\r\n  private metrics: Map<string, PerformanceMetrics> = new Map();\r\n  private requestCoalescing: Map<string, Promise<Response>> = new Map();\r\n  private config: PerformanceConfig;\r\n  private cache: Cache | null = null;\r\n\r\n  private constructor(config: PerformanceConfig = {}) {\r\n    this.config = {\r\n      enableMetrics: true,\r\n      enableCaching: true,\r\n      enableCompression: true,\r\n      enableRequestCoalescing: true,\r\n      metricsNamespace: 'iplcforms',\r\n      cacheName: 'performance-cache',\r\n      ...config\r\n    };\r\n  }\r\n\r\n  static getInstance(config?: PerformanceConfig): WorkersPerformanceManager {\r\n    if (!WorkersPerformanceManager.instance) {\r\n      WorkersPerformanceManager.instance = new WorkersPerformanceManager(config);\r\n    }\r\n    return WorkersPerformanceManager.instance;\r\n  }\r\n\r\n  /**\r\n   * Initialize performance tracking for a request\r\n   */\r\n  async initializeRequest(requestId: string): Promise<void> {\r\n    if (!this.config.enableMetrics) return;\r\n\r\n    this.metrics.set(requestId, {\r\n      requestId,\r\n      startTime: Date.now(),\r\n      cacheHits: 0,\r\n      cacheMisses: 0,\r\n      dbQueries: 0,\r\n      dbDuration: 0,\r\n      apiCalls: 0,\r\n      apiDuration: 0,\r\n      errors: 0\r\n    });\r\n\r\n    // Initialize cache if enabled\r\n    if (this.config.enableCaching && !this.cache) {\r\n      this.cache = await caches.open(this.config.cacheName!);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Finalize performance tracking for a request\r\n   */\r\n  async finalizeRequest(requestId: string): Promise<PerformanceMetrics | null> {\r\n    if (!this.config.enableMetrics) return null;\r\n\r\n    const metrics = this.metrics.get(requestId);\r\n    if (!metrics) return null;\r\n\r\n    metrics.endTime = Date.now();\r\n    metrics.duration = metrics.endTime - metrics.startTime;\r\n\r\n    // Store metrics in KV if available\r\n    try {\r\n      if ((globalThis as any).METRICS_KV) {\r\n        await (globalThis as any).METRICS_KV.put(\r\n          `metrics:${requestId}`,\r\n          JSON.stringify(metrics),\r\n          { expirationTtl: 86400 } // 24 hours\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to store metrics:', error);\r\n    }\r\n\r\n    // Clean up\r\n    this.metrics.delete(requestId);\r\n    return metrics;\r\n  }\r\n\r\n  /**\r\n   * Cache-aware fetch with automatic optimization\r\n   */\r\n  async cachedFetch(\r\n    request: Request | string,\r\n    options: CacheOptions = {}\r\n  ): Promise<Response> {\r\n    if (!this.config.enableCaching || options.bypassCache) {\r\n      return fetch(request);\r\n    }\r\n\r\n    const req = typeof request === 'string' ? new Request(request) : request;\r\n    const cacheKey = options.cacheKey || req.url;\r\n    \r\n    // Check cache first\r\n    const cachedResponse = this.cache ? await this.cache.match(req) : null;\r\n    if (cachedResponse) {\r\n      this.recordCacheHit(req.url);\r\n      return cachedResponse;\r\n    }\r\n\r\n    this.recordCacheMiss(req.url);\r\n\r\n    // Request coalescing - prevent duplicate requests\r\n    if (this.config.enableRequestCoalescing) {\r\n      const existingRequest = this.requestCoalescing.get(cacheKey);\r\n      if (existingRequest) {\r\n        return existingRequest.then(r => r.clone());\r\n      }\r\n    }\r\n\r\n    // Make the request\r\n    const fetchPromise = fetch(req).then(async (response) => {\r\n      // Only cache successful responses\r\n      if (response.ok && req.method === 'GET') {\r\n        const headers = new Headers(response.headers);\r\n        \r\n        // Set cache control headers\r\n        if (options.cacheControl) {\r\n          headers.set('Cache-Control', options.cacheControl);\r\n        } else if (options.ttl) {\r\n          headers.set('Cache-Control', `public, max-age=${options.ttl}`);\r\n        }\r\n\r\n        // Add cache tags if provided\r\n        if (options.tags && options.tags.length > 0) {\r\n          headers.set('Cache-Tag', options.tags.join(','));\r\n        }\r\n\r\n        // Clone response for caching\r\n        const responseToCache = new Response(response.clone().body, {\r\n          status: response.status,\r\n          statusText: response.statusText,\r\n          headers\r\n        });\r\n\r\n        // Store in cache\r\n        if (this.cache) {\r\n          await this.cache.put(req, responseToCache);\r\n        }\r\n      }\r\n\r\n      // Clean up request coalescing\r\n      this.requestCoalescing.delete(cacheKey);\r\n      \r\n      return response;\r\n    }).catch((error) => {\r\n      this.requestCoalescing.delete(cacheKey);\r\n      throw error;\r\n    });\r\n\r\n    // Store promise for request coalescing\r\n    if (this.config.enableRequestCoalescing) {\r\n      this.requestCoalescing.set(cacheKey, fetchPromise);\r\n    }\r\n\r\n    return fetchPromise;\r\n  }\r\n\r\n  /**\r\n   * Optimize database queries with performance tracking\r\n   */\r\n  async optimizedQuery<T>(\r\n    queryFn: () => Promise<T>,\r\n    queryKey: string,\r\n    options: CacheOptions = {}\r\n  ): Promise<T> {\r\n    const requestId = this.getCurrentRequestId();\r\n    const startTime = Date.now();\r\n\r\n    try {\r\n      // Check if we can use cached result\r\n      if (this.config.enableCaching && !options.bypassCache) {\r\n        const cacheKey = `query:${queryKey}`;\r\n        const cached = await this.getFromCache(cacheKey);\r\n        if (cached) {\r\n          this.recordCacheHit(cacheKey);\r\n          return cached as T;\r\n        }\r\n        this.recordCacheMiss(cacheKey);\r\n      }\r\n\r\n      // Execute query\r\n      const result = await queryFn();\r\n      const duration = Date.now() - startTime;\r\n\r\n      // Record metrics\r\n      if (requestId) {\r\n        const metrics = this.metrics.get(requestId);\r\n        if (metrics) {\r\n          metrics.dbQueries++;\r\n          metrics.dbDuration += duration;\r\n        }\r\n      }\r\n\r\n      // Cache result if enabled\r\n      if (this.config.enableCaching && options.ttl) {\r\n        await this.setInCache(`query:${queryKey}`, result, options.ttl);\r\n      }\r\n\r\n      return result;\r\n    } catch (error) {\r\n      this.recordError(requestId, 'database', String(error));\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Compress response if beneficial\r\n   */\r\n  async compressResponse(response: Response): Promise<Response> {\r\n    if (!this.config.enableCompression) return response;\r\n\r\n    const contentType = response.headers.get('content-type') || '';\r\n    const contentLength = parseInt(response.headers.get('content-length') || '0', 10);\r\n\r\n    // Only compress text-based content over 1KB\r\n    if (\r\n      contentLength > 1024 &&\r\n      (contentType.includes('text/') ||\r\n       contentType.includes('application/json') ||\r\n       contentType.includes('application/javascript'))\r\n    ) {\r\n      const headers = new Headers(response.headers);\r\n      headers.set('content-encoding', 'gzip');\r\n      headers.delete('content-length'); // Will be recalculated\r\n\r\n      const compressed = await this.gzipCompress(await response.arrayBuffer());\r\n      \r\n      return new Response(compressed, {\r\n        status: response.status,\r\n        statusText: response.statusText,\r\n        headers\r\n      });\r\n    }\r\n\r\n    return response;\r\n  }\r\n\r\n  /**\r\n   * Performance-optimized response builder\r\n   */\r\n  buildOptimizedResponse(\r\n    data: any,\r\n    options: {\r\n      status?: number;\r\n      headers?: HeadersInit;\r\n      compress?: boolean;\r\n      cache?: CacheOptions;\r\n    } = {}\r\n  ): Response {\r\n    const headers = new Headers(options.headers || {});\r\n    \r\n    // Set performance-related headers\r\n    headers.set('X-Response-Time', Date.now().toString());\r\n    headers.set('X-Cache-Status', 'MISS'); // Will be overridden if cached\r\n    \r\n    // Add cache control headers\r\n    if (options.cache?.cacheControl) {\r\n      headers.set('Cache-Control', options.cache.cacheControl);\r\n    } else if (options.cache?.ttl) {\r\n      headers.set('Cache-Control', `public, max-age=${options.cache.ttl}`);\r\n    }\r\n\r\n    // Set content type if not already set\r\n    if (!headers.has('content-type')) {\r\n      headers.set('content-type', 'application/json');\r\n    }\r\n\r\n    const body = typeof data === 'string' ? data : JSON.stringify(data);\r\n    \r\n    return new Response(body, {\r\n      status: options.status || 200,\r\n      headers\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Batch API calls for performance\r\n   */\r\n  async batchApiCalls<T>(\r\n    calls: Array<() => Promise<T>>\r\n  ): Promise<T[]> {\r\n    const requestId = this.getCurrentRequestId();\r\n    const startTime = Date.now();\r\n    \r\n    try {\r\n      const results = await Promise.all(\r\n        calls.map(call => \r\n          call().catch(error => {\r\n            this.recordError(requestId, 'api', String(error));\r\n            throw error;\r\n          })\r\n        )\r\n      );\r\n\r\n      const duration = Date.now() - startTime;\r\n      if (requestId) {\r\n        const metrics = this.metrics.get(requestId);\r\n        if (metrics) {\r\n          metrics.apiCalls += calls.length;\r\n          metrics.apiDuration += duration;\r\n        }\r\n      }\r\n\r\n      return results;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get current performance metrics for a specific request\r\n   */\r\n  getMetrics(requestId: string): PerformanceMetrics | undefined {\r\n    return this.metrics.get(requestId);\r\n  }\r\n\r\n  /**\r\n   * Get all current performance metrics\r\n   */\r\n  getAllMetrics(): Map<string, PerformanceMetrics> {\r\n    return new Map(this.metrics);\r\n  }\r\n\r\n  /**\r\n   /**\r\n    * Clear all metrics\r\n    */\r\n   clearMetrics(): void {\r\n     this.metrics.clear();\r\n   }\r\n \r\n   /**\r\n    * Record a request with performance metrics\r\n    * This is an alias for recordMetrics to maintain backward compatibility\r\n    */\r\n   recordRequest(name: string, metrics: PerformanceMetrics): void {\r\n     this.metrics.set(name, metrics);\r\n   }\r\n  /**\r\n   * Clear cache by pattern or tags\r\n   */\r\n  async clearCache(options: {\r\n    pattern?: string;\r\n    tags?: string[];\r\n  } = {}): Promise<void> {\r\n    if (!this.config.enableCaching) return;\r\n\r\n    // For pattern-based clearing\r\n    if (options.pattern) {\r\n      // This would require iterating through cache keys\r\n      // Cloudflare Workers Cache API doesn't support listing keys\r\n      // So we'd need to maintain a key index in KV\r\n      console.warn('Pattern-based cache clearing not fully implemented');\r\n    }\r\n\r\n    // For tag-based clearing (requires Cloudflare API)\r\n    if (options.tags && options.tags.length > 0) {\r\n      // This would require using Cloudflare's purge by tag API\r\n      console.warn('Tag-based cache clearing requires Cloudflare API integration');\r\n    }\r\n  }\r\n\r\n  // Private helper methods\r\n  private getCurrentRequestId(): string | null {\r\n    // In a real implementation, this would get the request ID from context\r\n    // For now, return the first metrics entry\r\n    return this.metrics.keys().next().value || null;\r\n  }\r\n\r\n  private recordCacheHit(key: string): void {\r\n    const requestId = this.getCurrentRequestId();\r\n    if (requestId) {\r\n      const metrics = this.metrics.get(requestId);\r\n      if (metrics) metrics.cacheHits++;\r\n    }\r\n  }\r\n\r\n  private recordCacheMiss(key: string): void {\r\n    const requestId = this.getCurrentRequestId();\r\n    if (requestId) {\r\n      const metrics = this.metrics.get(requestId);\r\n      if (metrics) metrics.cacheMisses++;\r\n    }\r\n  }\r\n\r\n  private recordError(requestId: string | null, type: string, message: string): void {\r\n    if (!requestId) return;\r\n    \r\n    const metrics = this.metrics.get(requestId);\r\n    if (metrics) {\r\n      metrics.errors++;\r\n    }\r\n  }\r\n\r\n  private async getFromCache(key: string): Promise<any> {\r\n    try {\r\n      if ((globalThis as any).CACHE_KV) {\r\n        const cached = await (globalThis as any).CACHE_KV.get(key, 'json');\r\n        return cached;\r\n      }\r\n    } catch (error) {\r\n      console.error('Cache get error:', error);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private async setInCache(key: string, value: any, ttl: number): Promise<void> {\r\n    try {\r\n      if ((globalThis as any).CACHE_KV) {\r\n        await (globalThis as any).CACHE_KV.put(\r\n          key,\r\n          JSON.stringify(value),\r\n          { expirationTtl: ttl }\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error('Cache set error:', error);\r\n    }\r\n  }\r\n\r\n  private async gzipCompress(data: ArrayBuffer): Promise<ArrayBuffer> {\r\n    // Use CompressionStream if available (requires Workers compatibility flag)\r\n    if (typeof CompressionStream !== 'undefined') {\r\n      const cs = new CompressionStream('gzip');\r\n      const writer = cs.writable.getWriter();\r\n      writer.write(data);\r\n      writer.close();\r\n      \r\n      const chunks: Uint8Array[] = [];\r\n      const reader = cs.readable.getReader();\r\n      \r\n      while (true) {\r\n        const { done, value } = await reader.read();\r\n        if (done) break;\r\n        chunks.push(value);\r\n      }\r\n      \r\n      const totalLength = chunks.reduce((sum, chunk) => sum + chunk.length, 0);\r\n      const result = new Uint8Array(totalLength);\r\n      let offset = 0;\r\n      \r\n      for (const chunk of chunks) {\r\n        result.set(chunk, offset);\r\n        offset += chunk.length;\r\n      }\r\n      \r\n      return result.buffer;\r\n    }\r\n    \r\n    // Fallback: return uncompressed\r\n    return data;\r\n  }\r\n}\r\n\r\n/**\r\n * Performance monitoring middleware for API routes\r\n */\r\nexport function withPerformanceMonitoring(\r\n  handler: (request: Request, env: any, ctx: any) => Promise<Response>\r\n) {\r\n  return async (request: Request, env: any, ctx: any): Promise<Response> => {\r\n    const perfManager = WorkersPerformanceManager.getInstance();\r\n    const requestId = crypto.randomUUID();\r\n    \r\n    await perfManager.initializeRequest(requestId);\r\n    \r\n    try {\r\n      const response = await handler(request, env, ctx);\r\n      \r\n      // Add performance headers\r\n      const metrics = await perfManager.finalizeRequest(requestId);\r\n      if (metrics) {\r\n        response.headers.set('X-Request-ID', requestId);\r\n        response.headers.set('X-Response-Time', metrics.duration?.toString() || '0');\r\n        response.headers.set('X-Cache-Hits', metrics.cacheHits.toString());\r\n        response.headers.set('X-DB-Queries', metrics.dbQueries.toString());\r\n      }\r\n      \r\n      return response;\r\n    } catch (error) {\r\n      await perfManager.finalizeRequest(requestId);\r\n      throw error;\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Request deduplication for identical concurrent requests\r\n */\r\nexport class RequestDeduplicator {\r\n  private inFlightRequests: Map<string, Promise<any>> = new Map();\r\n  \r\n  async deduplicate<T>(\r\n    key: string,\r\n    requestFn: () => Promise<T>\r\n  ): Promise<T> {\r\n    const existing = this.inFlightRequests.get(key);\r\n    if (existing) {\r\n      return existing as Promise<T>;\r\n    }\r\n    \r\n    const promise = requestFn().finally(() => {\r\n      this.inFlightRequests.delete(key);\r\n    });\r\n    \r\n    this.inFlightRequests.set(key, promise);\r\n    return promise;\r\n  }\r\n}\r\n\r\n/**\r\n * Performance utilities\r\n */\r\nexport const performanceUtils = {\r\n  /**\r\n   * Measure execution time of a function\r\n   */\r\n  async measureTime<T>(\r\n    fn: () => Promise<T>,\r\n    label: string\r\n  ): Promise<{ result: T; duration: number }> {\r\n    const start = Date.now();\r\n    const result = await fn();\r\n    const duration = Date.now() - start;\r\n    \r\n    console.log(`[Performance] ${label}: ${duration}ms`);\r\n    return { result, duration };\r\n  },\r\n\r\n  /**\r\n   * Create a performance-optimized API response\r\n   */\r\n  createOptimizedResponse(\r\n    data: any,\r\n    options: {\r\n      cacheControl?: string;\r\n      tags?: string[];\r\n      compress?: boolean;\r\n    } = {}\r\n  ): Response {\r\n    const perfManager = WorkersPerformanceManager.getInstance();\r\n    return perfManager.buildOptimizedResponse(data, {\r\n      cache: {\r\n        cacheControl: options.cacheControl,\r\n        tags: options.tags\r\n      },\r\n      compress: options.compress\r\n    });\r\n  },\r\n\r\n  /**\r\n   * Batch database operations for performance\r\n   */\r\n  async batchDatabaseOps<T>(\r\n    operations: Array<() => Promise<T>>\r\n  ): Promise<T[]> {\r\n    // Execute operations in parallel for performance\r\n    // Note: D1 doesn't support traditional transactions yet\r\n    // This executes operations concurrently for speed\r\n    return Promise.all(operations.map(op => op()));\r\n  }\r\n};\r\n\r\n// Export singleton instance\r\nexport const performanceManager = WorkersPerformanceManager.getInstance();"],"names":[],"mappings":"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"}