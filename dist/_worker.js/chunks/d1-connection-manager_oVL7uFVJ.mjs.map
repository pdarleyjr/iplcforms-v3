{"version":3,"file":"d1-connection-manager_oVL7uFVJ.mjs","sources":["../../../src/lib/services/d1-connection-manager.ts"],"sourcesContent":["import type { D1Database, D1DatabaseSession } from '@cloudflare/workers-types';\r\n\r\ninterface PreparedStatementCache {\r\n  [key: string]: ReturnType<D1Database['prepare']>;\r\n}\r\n\r\ninterface CacheEntry<T> {\r\n  data: T;\r\n  timestamp: number;\r\n  ttl: number;\r\n}\r\n\r\ninterface JsonCacheEntry {\r\n  parsed: any;\r\n  timestamp: number;\r\n}\r\n\r\n/**\r\n * D1ConnectionManager - Optimized connection and caching layer for Cloudflare D1\r\n * Provides connection pooling, prepared statement caching, and edge caching\r\n */\r\nexport class D1ConnectionManager {\r\n  private db: D1Database;\r\n  private preparedStatements: PreparedStatementCache = {};\r\n  private jsonCache: Map<string, JsonCacheEntry> = new Map();\r\n  private dataCache: Map<string, CacheEntry<any>> = new Map();\r\n  private session: D1DatabaseSession | null = null;\r\n  private sessionTTL = 5 * 60 * 1000; // 5 minutes\r\n  private sessionCreatedAt = 0;\r\n\r\n  // Cache configuration\r\n  private readonly JSON_CACHE_TTL = 10 * 60 * 1000; // 10 minutes\r\n  private readonly DATA_CACHE_TTL = 2 * 60 * 1000; // 2 minutes\r\n  private readonly MAX_CACHE_SIZE = 1000;\r\n\r\n  constructor(db: D1Database) {\r\n    this.db = db;\r\n  }\r\n\r\n  /**\r\n   * Get or create a prepared statement with caching\r\n   */\r\n  prepare(sql: string): ReturnType<D1Database['prepare']> {\r\n    const cacheKey = this.generateSQLCacheKey(sql);\r\n    \r\n    if (!this.preparedStatements[cacheKey]) {\r\n      this.preparedStatements[cacheKey] = this.db.prepare(sql);\r\n    }\r\n    \r\n    return this.preparedStatements[cacheKey];\r\n  }\r\n\r\n  /**\r\n   * Execute batch operations for related queries\r\n   */\r\n  async batch<T = unknown>(statements: ReturnType<D1Database['prepare']>[]): Promise<any[]> {\r\n    try {\r\n      const results = await this.db.batch(statements);\r\n      return results;\r\n    } catch (error) {\r\n      console.error('D1 batch operation failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get session with automatic renewal\r\n   */\r\n  async getSession(): Promise<D1DatabaseSession> {\r\n    const now = Date.now();\r\n    \r\n    if (!this.session || (now - this.sessionCreatedAt) > this.sessionTTL) {\r\n      this.session = this.db.withSession();\r\n      this.sessionCreatedAt = now;\r\n    }\r\n    \r\n    return this.session;\r\n  }\r\n\r\n  /**\r\n   * Parse JSON with caching to avoid repeated parsing\r\n   */\r\n  parseJSON(jsonString: string): any {\r\n    if (!jsonString) return null;\r\n    \r\n    const cacheKey = this.generateJSONCacheKey(jsonString);\r\n    const cached = this.jsonCache.get(cacheKey);\r\n    \r\n    if (cached && (Date.now() - cached.timestamp) < this.JSON_CACHE_TTL) {\r\n      return cached.parsed;\r\n    }\r\n    \r\n    try {\r\n      const parsed = JSON.parse(jsonString);\r\n      this.jsonCache.set(cacheKey, {\r\n        parsed,\r\n        timestamp: Date.now()\r\n      });\r\n      \r\n      // Cleanup cache if too large\r\n      this.cleanupJSONCache();\r\n      \r\n      return parsed;\r\n    } catch (error) {\r\n      console.error('JSON parsing failed:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cache frequently accessed data at edge\r\n   */\r\n  cacheData<T>(key: string, data: T, ttl: number = this.DATA_CACHE_TTL): void {\r\n    this.dataCache.set(key, {\r\n      data,\r\n      timestamp: Date.now(),\r\n      ttl\r\n    });\r\n    \r\n    this.cleanupDataCache();\r\n  }\r\n\r\n  /**\r\n   * Get cached data if available and not expired\r\n   */\r\n  getCachedData<T>(key: string): T | null {\r\n    const entry = this.dataCache.get(key);\r\n    \r\n    if (!entry) return null;\r\n    \r\n    if ((Date.now() - entry.timestamp) > entry.ttl) {\r\n      this.dataCache.delete(key);\r\n      return null;\r\n    }\r\n    \r\n    return entry.data as T;\r\n  }\r\n\r\n  /**\r\n   * Execute optimized query with caching\r\n   */\r\n  async executeWithCache<T>(\r\n    cacheKey: string,\r\n    queryFn: () => Promise<T>,\r\n    ttl: number = this.DATA_CACHE_TTL\r\n  ): Promise<T> {\r\n    // Check cache first\r\n    const cached = this.getCachedData<T>(cacheKey);\r\n    if (cached !== null) {\r\n      return cached;\r\n    }\r\n    \r\n    // Execute query\r\n    const result = await queryFn();\r\n    \r\n    // Cache result\r\n    this.cacheData(cacheKey, result, ttl);\r\n    \r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Bulk insert optimization using batch operations\r\n   */\r\n  async bulkInsert(\r\n    tableName: string,\r\n    records: any[],\r\n    columns: string[]\r\n  ): Promise<any[]> {\r\n    if (records.length === 0) return [];\r\n    \r\n    const placeholders = columns.map(() => '?').join(', ');\r\n    const sql = `INSERT INTO ${tableName} (${columns.join(', ')}) VALUES (${placeholders})`;\r\n    \r\n    const statements = records.map(record => {\r\n      const values = columns.map(col => record[col]);\r\n      return this.prepare(sql).bind(...values);\r\n    });\r\n    \r\n    return this.batch(statements);\r\n  }\r\n\r\n  /**\r\n   * Optimized analytics aggregation\r\n   */\r\n  async getAggregatedStats(\r\n    tableName: string,\r\n    groupBy: string[],\r\n    aggregations: string[],\r\n    filters: Record<string, any> = {}\r\n  ): Promise<any[]> {\r\n    const whereClause = Object.keys(filters).length > 0\r\n      ? `WHERE ${Object.keys(filters).map(key => `${key} = ?`).join(' AND ')}`\r\n      : '';\r\n    \r\n    const groupByClause = groupBy.length > 0 ? `GROUP BY ${groupBy.join(', ')}` : '';\r\n    \r\n    const sql = `\r\n      SELECT \r\n        ${groupBy.join(', ')},\r\n        ${aggregations.join(', ')}\r\n      FROM ${tableName}\r\n      ${whereClause}\r\n      ${groupByClause}\r\n    `;\r\n    \r\n    const stmt = this.prepare(sql);\r\n    const bindValues = Object.values(filters);\r\n    \r\n    const response = await stmt.bind(...bindValues).all();\r\n    return response.success ? response.results : [];\r\n  }\r\n\r\n  /**\r\n   * Connection health check\r\n   */\r\n  async healthCheck(): Promise<boolean> {\r\n    try {\r\n      const result = await this.db.prepare('SELECT 1 as health').first();\r\n      return result?.health === 1;\r\n    } catch {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cleanup methods\r\n   */\r\n  private cleanupJSONCache(): void {\r\n    if (this.jsonCache.size > this.MAX_CACHE_SIZE) {\r\n      const entries = Array.from(this.jsonCache.entries());\r\n      entries.sort((a, b) => a[1].timestamp - b[1].timestamp);\r\n      \r\n      // Remove oldest 20% of entries\r\n      const removeCount = Math.floor(this.MAX_CACHE_SIZE * 0.2);\r\n      for (let i = 0; i < removeCount; i++) {\r\n        this.jsonCache.delete(entries[i][0]);\r\n      }\r\n    }\r\n  }\r\n\r\n  private cleanupDataCache(): void {\r\n    if (this.dataCache.size > this.MAX_CACHE_SIZE) {\r\n      const now = Date.now();\r\n      \r\n      // Remove expired entries first\r\n      for (const [key, entry] of this.dataCache.entries()) {\r\n        if ((now - entry.timestamp) > entry.ttl) {\r\n          this.dataCache.delete(key);\r\n        }\r\n      }\r\n      \r\n      // If still too large, remove oldest entries\r\n      if (this.dataCache.size > this.MAX_CACHE_SIZE) {\r\n        const entries = Array.from(this.dataCache.entries());\r\n        entries.sort((a, b) => a[1].timestamp - b[1].timestamp);\r\n        \r\n        const removeCount = Math.floor(this.MAX_CACHE_SIZE * 0.2);\r\n        for (let i = 0; i < removeCount; i++) {\r\n          this.dataCache.delete(entries[i][0]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private generateSQLCacheKey(sql: string): string {\r\n    return `sql_${this.hashString(sql)}`;\r\n  }\r\n\r\n  private generateJSONCacheKey(jsonString: string): string {\r\n    return `json_${this.hashString(jsonString)}`;\r\n  }\r\n\r\n  private hashString(str: string): string {\r\n    let hash = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n      const char = str.charCodeAt(i);\r\n      hash = ((hash << 5) - hash) + char;\r\n      hash = hash & hash; // Convert to 32-bit integer\r\n    }\r\n    return hash.toString(36);\r\n  }\r\n\r\n  /**\r\n   * Reset caches - useful for testing\r\n   */\r\n  clearCaches(): void {\r\n    this.preparedStatements = {};\r\n    this.jsonCache.clear();\r\n    this.dataCache.clear();\r\n    this.session = null;\r\n  }\r\n\r\n  /**\r\n   * Clear specific cache keys\r\n   */\r\n  clearSpecificCaches(patterns: string[]): void {\r\n    for (const pattern of patterns) {\r\n      // Clear data cache entries matching pattern\r\n      for (const key of this.dataCache.keys()) {\r\n        if (key.includes(pattern)) {\r\n          this.dataCache.delete(key);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get cache statistics for monitoring\r\n   */\r\n  getCacheStats(): {\r\n    preparedStatements: number;\r\n    jsonCache: number;\r\n    dataCache: number;\r\n    hasActiveSession: boolean;\r\n  } {\r\n    return {\r\n      preparedStatements: Object.keys(this.preparedStatements).length,\r\n      jsonCache: this.jsonCache.size,\r\n      dataCache: this.dataCache.size,\r\n      hasActiveSession: this.session !== null\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Global D1 connection manager singleton\r\n */\r\nlet globalD1Manager: D1ConnectionManager | null = null;\r\n\r\nexport function getD1Manager(db: D1Database): D1ConnectionManager {\r\n  if (!globalD1Manager) {\r\n    globalD1Manager = new D1ConnectionManager(db);\r\n  }\r\n  return globalD1Manager;\r\n}\r\n\r\nexport function resetD1Manager(): void {\r\n  globalD1Manager = null;\r\n}"],"names":[],"mappings":"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"}