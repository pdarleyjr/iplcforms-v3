{"version":3,"file":"subscription_Dua9-wUJ.mjs","sources":["../../../src/lib/services/subscription.ts"],"sourcesContent":["import type { D1Database } from '@cloudflare/workers-types';\r\nimport { D1ConnectionManager } from './d1-connection-manager';\r\n\r\nexport const SUBSCRIPTION_QUERIES = {\r\n  BASE_SELECT: `\r\n    SELECT \r\n      subscriptions.*,\r\n      features.id as feature_id,\r\n      features.name as feature_name,\r\n      features.description as feature_description\r\n    FROM subscriptions\r\n    LEFT JOIN subscription_features \r\n      ON subscriptions.id = subscription_features.subscription_id\r\n    LEFT JOIN features \r\n      ON subscription_features.feature_id = features.id\r\n  `,\r\n  INSERT_SUBSCRIPTION: `INSERT INTO subscriptions (name, description, price, billing_cycle, trial_days, max_forms, max_submissions) VALUES(?, ?, ?, ?, ?, ?, ?)`,\r\n  UPDATE_SUBSCRIPTION: `UPDATE subscriptions SET name = ?, description = ?, price = ?, billing_cycle = ?, trial_days = ?, max_forms = ?, max_submissions = ? WHERE id = ?`,\r\n  INSERT_FEATURE: `INSERT OR IGNORE INTO features(name, description) VALUES(?, ?)`,\r\n  SELECT_FEATURE_ID: `SELECT id FROM features WHERE name = ?`,\r\n  INSERT_SUBSCRIPTION_FEATURE: `INSERT INTO subscription_features(subscription_id, feature_id) VALUES(?, ?)`,\r\n  DELETE_SUBSCRIPTION: `DELETE FROM subscriptions WHERE id = ?`,\r\n  DELETE_SUBSCRIPTION_FEATURES: `DELETE FROM subscription_features WHERE subscription_id = ?`,\r\n  \r\n  // Analytics queries\r\n  USAGE_STATS: `\r\n    SELECT \r\n      s.id,\r\n      s.name,\r\n      COUNT(DISTINCT cs.customer_id) as active_customers,\r\n      COUNT(DISTINCT ft.id) as forms_created,\r\n      COUNT(DISTINCT fs.id) as submissions_count,\r\n      AVG(fs.score) as avg_score\r\n    FROM subscriptions s\r\n    LEFT JOIN customer_subscriptions cs ON s.id = cs.subscription_id \r\n      AND cs.status = 'active'\r\n    LEFT JOIN form_templates ft ON cs.customer_id = ft.customer_id\r\n    LEFT JOIN form_submissions fs ON ft.id = fs.form_template_id\r\n    WHERE s.id = ?\r\n    GROUP BY s.id, s.name\r\n  `,\r\n  \r\n  ANALYTICS_AGGREGATED: `\r\n    SELECT \r\n      s.id,\r\n      s.name,\r\n      COUNT(DISTINCT cs.customer_id) as total_customers,\r\n      COUNT(DISTINCT CASE WHEN cs.status = 'active' THEN cs.customer_id END) as active_customers,\r\n      COUNT(DISTINCT CASE WHEN cs.status = 'trial' THEN cs.customer_id END) as trial_customers,\r\n      SUM(s.price) as monthly_revenue,\r\n      COUNT(DISTINCT ft.id) as total_forms,\r\n      COUNT(DISTINCT fs.id) as total_submissions\r\n    FROM subscriptions s\r\n    LEFT JOIN customer_subscriptions cs ON s.id = cs.subscription_id\r\n    LEFT JOIN form_templates ft ON cs.customer_id = ft.customer_id \r\n      AND ft.created_at >= date('now', '-30 days')\r\n    LEFT JOIN form_submissions fs ON ft.id = fs.form_template_id\r\n      AND fs.submitted_at >= date('now', '-30 days')\r\n    GROUP BY s.id, s.name\r\n    ORDER BY active_customers DESC\r\n  `,\r\n  \r\n  POPULAR_FEATURES: `\r\n    SELECT \r\n      f.name,\r\n      f.description,\r\n      COUNT(DISTINCT sf.subscription_id) as subscription_count,\r\n      COUNT(DISTINCT cs.customer_id) as customer_count\r\n    FROM features f\r\n    JOIN subscription_features sf ON f.id = sf.feature_id\r\n    JOIN customer_subscriptions cs ON sf.subscription_id = cs.subscription_id\r\n    WHERE cs.status = 'active'\r\n    GROUP BY f.id, f.name, f.description\r\n    ORDER BY customer_count DESC\r\n    LIMIT 10\r\n  `,\r\n  \r\n  SUBSCRIPTION_LIMITS: `\r\n    SELECT \r\n      s.*,\r\n      COUNT(DISTINCT ft.id) as current_forms,\r\n      COUNT(DISTINCT fs.id) as current_submissions\r\n    FROM subscriptions s\r\n    LEFT JOIN customer_subscriptions cs ON s.id = cs.subscription_id\r\n    LEFT JOIN form_templates ft ON cs.customer_id = ft.customer_id\r\n    LEFT JOIN form_submissions fs ON ft.id = fs.form_template_id\r\n    WHERE s.id = ?\r\n    GROUP BY s.id\r\n  `\r\n};\r\n\r\nconst processSubscriptionResults = (rows: any[]) => {\r\n  const subscriptionsMap = new Map();\r\n\r\n  rows.forEach((row) => {\r\n    if (!subscriptionsMap.has(row.id)) {\r\n      const subscription = { ...row, features: [] };\r\n      subscriptionsMap.set(row.id, subscription);\r\n    }\r\n\r\n    if (row.feature_id) {\r\n      const subscription = subscriptionsMap.get(row.id);\r\n      subscription.features.push({\r\n        id: row.feature_id,\r\n        name: row.feature_name,\r\n        description: row.feature_description,\r\n      });\r\n    }\r\n\r\n    const subscription = subscriptionsMap.get(row.id);\r\n    delete subscription.feature_id;\r\n    delete subscription.feature_name;\r\n    delete subscription.feature_description;\r\n  });\r\n\r\n  return Array.from(subscriptionsMap.values());\r\n};\r\n\r\nexport class SubscriptionService {\r\n  private DB: D1Database;\r\n  private connectionManager: D1ConnectionManager;\r\n\r\n  constructor(DB: D1Database) {\r\n    this.DB = DB;\r\n    this.connectionManager = new D1ConnectionManager(DB);\r\n  }\r\n\r\n  async getById(id: string | number) {\r\n    const cacheKey = `subscription:${id}`;\r\n    \r\n    return this.connectionManager.executeWithCache(\r\n      cacheKey,\r\n      async () => {\r\n        const query = `${SUBSCRIPTION_QUERIES.BASE_SELECT} WHERE subscriptions.id = ?`;\r\n        const response = await this.connectionManager.prepare(query).bind(id).all();\r\n\r\n        if (response.success && response.results?.length > 0) {\r\n          const [subscription] = processSubscriptionResults(response.results);\r\n          return subscription;\r\n        }\r\n        return null;\r\n      },\r\n      5 * 60 // 5 minutes cache\r\n    );\r\n  }\r\n\r\n  async getAll() {\r\n    const cacheKey = 'subscriptions:all';\r\n    \r\n    return this.connectionManager.executeWithCache(\r\n      cacheKey,\r\n      async () => {\r\n        const query = `${SUBSCRIPTION_QUERIES.BASE_SELECT} ORDER BY subscriptions.id ASC`;\r\n        const response = await this.connectionManager.prepare(query).all();\r\n\r\n        if (response.success) {\r\n          return processSubscriptionResults(response.results);\r\n        }\r\n        return [];\r\n      },\r\n      2 * 60 // 2 minutes cache for lists\r\n    );\r\n  }\r\n\r\n  async getAllWithStats() {\r\n    const cacheKey = 'subscriptions:with_stats';\r\n    \r\n    return this.connectionManager.executeWithCache(\r\n      cacheKey,\r\n      async () => {\r\n        const subscriptions = await this.getAll();\r\n        const analytics = await this.getAnalytics();\r\n        \r\n        return subscriptions.map(sub => {\r\n          const stats = analytics.find(a => a.id === sub.id);\r\n          return {\r\n            ...sub,\r\n            stats: stats || {\r\n              total_customers: 0,\r\n              active_customers: 0,\r\n              trial_customers: 0,\r\n              monthly_revenue: 0,\r\n              total_forms: 0,\r\n              total_submissions: 0\r\n            }\r\n          };\r\n        });\r\n      },\r\n      5 * 60 // 5 minutes cache\r\n    );\r\n  }\r\n\r\n  async getUsageStats(subscriptionId: string | number) {\r\n    const cacheKey = `subscription:${subscriptionId}:usage`;\r\n    \r\n    return this.connectionManager.executeWithCache(\r\n      cacheKey,\r\n      async () => {\r\n        const response = await this.connectionManager.prepare(SUBSCRIPTION_QUERIES.USAGE_STATS)\r\n          .bind(subscriptionId)\r\n          .first();\r\n\r\n        return response || {\r\n          id: subscriptionId,\r\n          active_customers: 0,\r\n          forms_created: 0,\r\n          submissions_count: 0,\r\n          avg_score: 0\r\n        };\r\n      },\r\n      10 * 60 // 10 minutes cache for usage stats\r\n    );\r\n  }\r\n\r\n  async getAnalytics() {\r\n    const cacheKey = 'subscriptions:analytics';\r\n    \r\n    return this.connectionManager.executeWithCache(\r\n      cacheKey,\r\n      async () => {\r\n        const response = await this.connectionManager.prepare(SUBSCRIPTION_QUERIES.ANALYTICS_AGGREGATED).all();\r\n        return response.success ? response.results : [];\r\n      },\r\n      10 * 60 // 10 minutes cache for analytics\r\n    );\r\n  }\r\n\r\n  async getPopularFeatures() {\r\n    const cacheKey = 'features:popular';\r\n    \r\n    return this.connectionManager.executeWithCache(\r\n      cacheKey,\r\n      async () => {\r\n        const response = await this.connectionManager.prepare(SUBSCRIPTION_QUERIES.POPULAR_FEATURES).all();\r\n        return response.success ? response.results : [];\r\n      },\r\n      30 * 60 // 30 minutes cache for popular features\r\n    );\r\n  }\r\n\r\n  async getSubscriptionLimits(subscriptionId: string | number) {\r\n    const cacheKey = `subscription:${subscriptionId}:limits`;\r\n    \r\n    return this.connectionManager.executeWithCache(\r\n      cacheKey,\r\n      async () => {\r\n        const response = await this.connectionManager.prepare(SUBSCRIPTION_QUERIES.SUBSCRIPTION_LIMITS)\r\n          .bind(subscriptionId)\r\n          .first();\r\n\r\n        if (response) {\r\n          const maxForms = Number(response.max_forms) || Infinity;\r\n          const maxSubmissions = Number(response.max_submissions) || Infinity;\r\n          const currentForms = Number(response.current_forms) || 0;\r\n          const currentSubmissions = Number(response.current_submissions) || 0;\r\n          \r\n          return {\r\n            ...response,\r\n            forms_remaining: Math.max(0, maxForms - currentForms),\r\n            submissions_remaining: Math.max(0, maxSubmissions - currentSubmissions),\r\n            at_limit: {\r\n              forms: maxForms !== Infinity && currentForms >= maxForms,\r\n              submissions: maxSubmissions !== Infinity && currentSubmissions >= maxSubmissions\r\n            }\r\n          };\r\n        }\r\n        return null;\r\n      },\r\n      5 * 60 // 5 minutes cache\r\n    );\r\n  }\r\n\r\n  async create(subscriptionData: {\r\n    name: string;\r\n    description?: string;\r\n    price: number;\r\n    billing_cycle?: string;\r\n    trial_days?: number;\r\n    max_forms?: number;\r\n    max_submissions?: number;\r\n    features?: Array<{\r\n      name: string;\r\n      description?: string;\r\n    }>;\r\n  }) {\r\n    const { \r\n      name, \r\n      description, \r\n      price, \r\n      billing_cycle = 'monthly',\r\n      trial_days = 0,\r\n      max_forms = null,\r\n      max_submissions = null,\r\n      features \r\n    } = subscriptionData;\r\n\r\n    const subscriptionResponse = await this.connectionManager.prepare(\r\n      SUBSCRIPTION_QUERIES.INSERT_SUBSCRIPTION,\r\n    )\r\n      .bind(name, description, price, billing_cycle, trial_days, max_forms, max_submissions)\r\n      .run();\r\n\r\n    if (!subscriptionResponse.success) {\r\n      throw new Error(\"Failed to create subscription\");\r\n    }\r\n\r\n    const subscriptionId = subscriptionResponse.meta.last_row_id;\r\n\r\n    if (features?.length) {\r\n      await this.bulkCreateFeatures(subscriptionId, features);\r\n    }\r\n\r\n    // Clear related caches\r\n    await this.clearSubscriptionCaches();\r\n\r\n    return { success: true, subscriptionId };\r\n  }\r\n\r\n  async bulkCreateFeatures(subscriptionId: number, features: Array<{ name: string; description?: string }>) {\r\n    if (!features.length) return;\r\n\r\n    const operations = [];\r\n    const featureIds = new Map();\r\n\r\n    // Batch insert features\r\n    for (const feature of features) {\r\n      operations.push(\r\n        this.connectionManager.prepare(SUBSCRIPTION_QUERIES.INSERT_FEATURE)\r\n          .bind(feature.name, feature.description || null)\r\n      );\r\n    }\r\n\r\n    await this.connectionManager.batch(operations);\r\n\r\n    // Get feature IDs in batch\r\n    const featureIdOperations = features.map(feature =>\r\n      this.connectionManager.prepare(SUBSCRIPTION_QUERIES.SELECT_FEATURE_ID)\r\n        .bind(feature.name)\r\n    );\r\n\r\n    const featureResults = await this.connectionManager.batch(featureIdOperations);\r\n    \r\n    // Map feature names to IDs\r\n    features.forEach((feature, index) => {\r\n      if (featureResults[index].success && featureResults[index].results?.length > 0) {\r\n        featureIds.set(feature.name, featureResults[index].results[0].id);\r\n      }\r\n    });\r\n\r\n    // Batch create subscription-feature relationships\r\n    const relationshipOperations = [];\r\n    for (const [featureName, featureId] of featureIds) {\r\n      relationshipOperations.push(\r\n        this.connectionManager.prepare(SUBSCRIPTION_QUERIES.INSERT_SUBSCRIPTION_FEATURE)\r\n          .bind(subscriptionId, featureId)\r\n      );\r\n    }\r\n\r\n    if (relationshipOperations.length > 0) {\r\n      await this.connectionManager.batch(relationshipOperations);\r\n    }\r\n  }\r\n\r\n  async update(id: string | number, subscriptionData: {\r\n    name?: string;\r\n    description?: string;\r\n    price?: number;\r\n    billing_cycle?: string;\r\n    trial_days?: number;\r\n    max_forms?: number;\r\n    max_submissions?: number;\r\n    features?: Array<{ name: string; description?: string }>;\r\n  }) {\r\n    const currentSubscription = await this.getById(id);\r\n    if (!currentSubscription) {\r\n      throw new Error(\"Subscription not found\");\r\n    }\r\n\r\n    const {\r\n      name = currentSubscription.name,\r\n      description = currentSubscription.description,\r\n      price = currentSubscription.price,\r\n      billing_cycle = currentSubscription.billing_cycle,\r\n      trial_days = currentSubscription.trial_days,\r\n      max_forms = currentSubscription.max_forms,\r\n      max_submissions = currentSubscription.max_submissions,\r\n      features\r\n    } = subscriptionData;\r\n\r\n    const response = await this.connectionManager.prepare(SUBSCRIPTION_QUERIES.UPDATE_SUBSCRIPTION)\r\n      .bind(name, description, price, billing_cycle, trial_days, max_forms, max_submissions, id)\r\n      .run();\r\n\r\n    if (!response.success) {\r\n      throw new Error(\"Failed to update subscription\");\r\n    }\r\n\r\n    // Update features if provided\r\n    if (features) {\r\n      await this.connectionManager.prepare(SUBSCRIPTION_QUERIES.DELETE_SUBSCRIPTION_FEATURES)\r\n        .bind(id)\r\n        .run();\r\n      \r\n      await this.bulkCreateFeatures(Number(id), features);\r\n    }\r\n\r\n    // Clear related caches\r\n    await this.clearSubscriptionCaches(String(id));\r\n\r\n    return { success: true };\r\n  }\r\n\r\n  async delete(id: string | number) {\r\n    const operations = [\r\n      this.connectionManager.prepare(SUBSCRIPTION_QUERIES.DELETE_SUBSCRIPTION_FEATURES).bind(id),\r\n      this.connectionManager.prepare(SUBSCRIPTION_QUERIES.DELETE_SUBSCRIPTION).bind(id)\r\n    ];\r\n\r\n    const results = await this.connectionManager.batch(operations);\r\n    \r\n    if (!results.every(result => result.success)) {\r\n      throw new Error(\"Failed to delete subscription\");\r\n    }\r\n\r\n    // Clear related caches\r\n    await this.clearSubscriptionCaches(String(id));\r\n\r\n    return { success: true };\r\n  }\r\n\r\n  private async clearSubscriptionCaches(subscriptionId?: string) {\r\n    const cacheKeys = [\r\n      'subscriptions:all',\r\n      'subscriptions:with_stats',\r\n      'subscriptions:analytics',\r\n      'features:popular'\r\n    ];\r\n\r\n    if (subscriptionId) {\r\n      cacheKeys.push(\r\n        `subscription:${subscriptionId}`,\r\n        `subscription:${subscriptionId}:usage`,\r\n        `subscription:${subscriptionId}:limits`\r\n      );\r\n    }\r\n\r\n    for (const key of cacheKeys) {\r\n      this.connectionManager.clearCaches();\r\n    }\r\n  }\r\n\r\n  async getHealthMetrics() {\r\n    const cacheKey = 'subscriptions:health';\r\n    \r\n    return this.connectionManager.executeWithCache(\r\n      cacheKey,\r\n      async () => {\r\n        const [analytics, popularFeatures] = await Promise.all([\r\n          this.getAnalytics(),\r\n          this.getPopularFeatures()\r\n        ]);\r\n\r\n        const totalRevenue = analytics.reduce((sum, sub) => sum + (Number(sub.monthly_revenue) || 0), 0);\r\n        const totalCustomers = analytics.reduce((sum, sub) => sum + (Number(sub.active_customers) || 0), 0);\r\n        const avgRevenuePerCustomer = totalCustomers > 0 ? totalRevenue / totalCustomers : 0;\r\n\r\n        return {\r\n          total_subscriptions: analytics.length,\r\n          total_revenue: totalRevenue,\r\n          total_customers: totalCustomers,\r\n          avg_revenue_per_customer: avgRevenuePerCustomer,\r\n          most_popular_features: popularFeatures.slice(0, 5),\r\n          cache_stats: this.connectionManager.getCacheStats()\r\n        };\r\n      },\r\n      15 * 60 // 15 minutes cache for health metrics\r\n    );\r\n  }\r\n}\r\n"],"names":["subscription"],"mappings":";;;AAGO,MAAM,oBAAA,GAAuB;AAAA,EAClC,WAAA,EAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAA,CAAA;AAAA,EAYb,mBAAA,EAAqB,CAAA,uIAAA,CAAA;AAAA,EACrB,mBAAA,EAAqB,CAAA,iJAAA,CAAA;AAAA,EACrB,cAAA,EAAgB,CAAA,8DAAA,CAAA;AAAA,EAChB,iBAAA,EAAmB,CAAA,sCAAA,CAAA;AAAA,EACnB,2BAAA,EAA6B,CAAA,2EAAA,CAAA;AAAA,EAC7B,mBAAA,EAAqB,CAAA,sCAAA,CAAA;AAAA,EACrB,4BAAA,EAA8B,CAAA,2DAAA,CAAA;AAAA;AAAA,EAG9B,WAAA,EAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAA,CAAA;AAAA,EAiBb,oBAAA,EAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAA,CAAA;AAAA,EAoBtB,gBAAA,EAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAA,CAAA;AAAA,EAelB,mBAAA,EAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAA;AAYvB,CAAA;AAEA,MAAM,0BAAA,GAA6B,CAAC,IAAA,KAAgB;AAClD,EAAA,MAAM,gBAAA,uBAAuB,GAAA,EAAI;AAEjC,EAAA,IAAA,CAAK,OAAA,CAAQ,CAAC,GAAA,KAAQ;AACpB,IAAA,IAAI,CAAC,gBAAA,CAAiB,GAAA,CAAI,GAAA,CAAI,EAAE,CAAA,EAAG;AACjC,MAAA,MAAMA,gBAAe,EAAE,GAAG,GAAA,EAAK,QAAA,EAAU,EAAC,EAAE;AAC5C,MAAA,gBAAA,CAAiB,GAAA,CAAI,GAAA,CAAI,EAAA,EAAIA,aAAY,CAAA;AAAA,IAC3C;AAEA,IAAA,IAAI,IAAI,UAAA,EAAY;AAClB,MAAA,MAAMA,aAAAA,GAAe,gBAAA,CAAiB,GAAA,CAAI,GAAA,CAAI,EAAE,CAAA;AAChD,MAAAA,aAAAA,CAAa,SAAS,IAAA,CAAK;AAAA,QACzB,IAAI,GAAA,CAAI,UAAA;AAAA,QACR,MAAM,GAAA,CAAI,YAAA;AAAA,QACV,aAAa,GAAA,CAAI;AAAA,OAClB,CAAA;AAAA,IACH;AAEA,IAAA,MAAM,YAAA,GAAe,gBAAA,CAAiB,GAAA,CAAI,GAAA,CAAI,EAAE,CAAA;AAChD,IAAA,OAAO,YAAA,CAAa,UAAA;AACpB,IAAA,OAAO,YAAA,CAAa,YAAA;AACpB,IAAA,OAAO,YAAA,CAAa,mBAAA;AAAA,EACtB,CAAC,CAAA;AAED,EAAA,OAAO,KAAA,CAAM,IAAA,CAAK,gBAAA,CAAiB,MAAA,EAAQ,CAAA;AAC7C,CAAA;AAEO,MAAM,mBAAA,CAAoB;AAAA,EACvB,EAAA;AAAA,EACA,iBAAA;AAAA,EAER,YAAY,EAAA,EAAgB;AAC1B,IAAA,IAAA,CAAK,EAAA,GAAK,EAAA;AACV,IAAA,IAAA,CAAK,iBAAA,GAAoB,IAAI,mBAAA,CAAoB,EAAE,CAAA;AAAA,EACrD;AAAA,EAEA,MAAM,QAAQ,EAAA,EAAqB;AACjC,IAAA,MAAM,QAAA,GAAW,gBAAgB,EAAE,CAAA,CAAA;AAEnC,IAAA,OAAO,KAAK,iBAAA,CAAkB,gBAAA;AAAA,MAC5B,QAAA;AAAA,MACA,YAAY;AACV,QAAA,MAAM,KAAA,GAAQ,CAAA,EAAG,oBAAA,CAAqB,WAAW,CAAA,2BAAA,CAAA;AACjD,QAAA,MAAM,QAAA,GAAW,MAAM,IAAA,CAAK,iBAAA,CAAkB,OAAA,CAAQ,KAAK,CAAA,CAAE,IAAA,CAAK,EAAE,CAAA,CAAE,GAAA,EAAI;AAE1E,QAAA,IAAI,QAAA,CAAS,OAAA,IAAW,QAAA,CAAS,OAAA,EAAS,SAAS,CAAA,EAAG;AACpD,UAAA,MAAM,CAAC,YAAY,CAAA,GAAI,0BAAA,CAA2B,SAAS,OAAO,CAAA;AAClE,UAAA,OAAO,YAAA;AAAA,QACT;AACA,QAAA,OAAO,IAAA;AAAA,MACT,CAAA;AAAA,MACA,CAAA,GAAI;AAAA;AAAA,KACN;AAAA,EACF;AAAA,EAEA,MAAM,MAAA,GAAS;AACb,IAAA,MAAM,QAAA,GAAW,mBAAA;AAEjB,IAAA,OAAO,KAAK,iBAAA,CAAkB,gBAAA;AAAA,MAC5B,QAAA;AAAA,MACA,YAAY;AACV,QAAA,MAAM,KAAA,GAAQ,CAAA,EAAG,oBAAA,CAAqB,WAAW,CAAA,8BAAA,CAAA;AACjD,QAAA,MAAM,WAAW,MAAM,IAAA,CAAK,kBAAkB,OAAA,CAAQ,KAAK,EAAE,GAAA,EAAI;AAEjE,QAAA,IAAI,SAAS,OAAA,EAAS;AACpB,UAAA,OAAO,0BAAA,CAA2B,SAAS,OAAO,CAAA;AAAA,QACpD;AACA,QAAA,OAAO,EAAC;AAAA,MACV,CAAA;AAAA,MACA,CAAA,GAAI;AAAA;AAAA,KACN;AAAA,EACF;AAAA,EAEA,MAAM,eAAA,GAAkB;AACtB,IAAA,MAAM,QAAA,GAAW,0BAAA;AAEjB,IAAA,OAAO,KAAK,iBAAA,CAAkB,gBAAA;AAAA,MAC5B,QAAA;AAAA,MACA,YAAY;AACV,QAAA,MAAM,aAAA,GAAgB,MAAM,IAAA,CAAK,MAAA,EAAO;AACxC,QAAA,MAAM,SAAA,GAAY,MAAM,IAAA,CAAK,YAAA,EAAa;AAE1C,QAAA,OAAO,aAAA,CAAc,IAAI,CAAA,GAAA,KAAO;AAC9B,UAAA,MAAM,QAAQ,SAAA,CAAU,IAAA,CAAK,OAAK,CAAA,CAAE,EAAA,KAAO,IAAI,EAAE,CAAA;AACjD,UAAA,OAAO;AAAA,YACL,GAAG,GAAA;AAAA,YACH,OAAO,KAAA,IAAS;AAAA,cACd,eAAA,EAAiB,CAAA;AAAA,cACjB,gBAAA,EAAkB,CAAA;AAAA,cAClB,eAAA,EAAiB,CAAA;AAAA,cACjB,eAAA,EAAiB,CAAA;AAAA,cACjB,WAAA,EAAa,CAAA;AAAA,cACb,iBAAA,EAAmB;AAAA;AACrB,WACF;AAAA,QACF,CAAC,CAAA;AAAA,MACH,CAAA;AAAA,MACA,CAAA,GAAI;AAAA;AAAA,KACN;AAAA,EACF;AAAA,EAEA,MAAM,cAAc,cAAA,EAAiC;AACnD,IAAA,MAAM,QAAA,GAAW,gBAAgB,cAAc,CAAA,MAAA,CAAA;AAE/C,IAAA,OAAO,KAAK,iBAAA,CAAkB,gBAAA;AAAA,MAC5B,QAAA;AAAA,MACA,YAAY;AACV,QAAA,MAAM,QAAA,GAAW,MAAM,IAAA,CAAK,iBAAA,CAAkB,OAAA,CAAQ,oBAAA,CAAqB,WAAW,CAAA,CACnF,IAAA,CAAK,cAAc,CAAA,CACnB,KAAA,EAAM;AAET,QAAA,OAAO,QAAA,IAAY;AAAA,UACjB,EAAA,EAAI,cAAA;AAAA,UACJ,gBAAA,EAAkB,CAAA;AAAA,UAClB,aAAA,EAAe,CAAA;AAAA,UACf,iBAAA,EAAmB,CAAA;AAAA,UACnB,SAAA,EAAW;AAAA,SACb;AAAA,MACF,CAAA;AAAA,MACA,EAAA,GAAK;AAAA;AAAA,KACP;AAAA,EACF;AAAA,EAEA,MAAM,YAAA,GAAe;AACnB,IAAA,MAAM,QAAA,GAAW,yBAAA;AAEjB,IAAA,OAAO,KAAK,iBAAA,CAAkB,gBAAA;AAAA,MAC5B,QAAA;AAAA,MACA,YAAY;AACV,QAAA,MAAM,QAAA,GAAW,MAAM,IAAA,CAAK,iBAAA,CAAkB,QAAQ,oBAAA,CAAqB,oBAAoB,EAAE,GAAA,EAAI;AACrG,QAAA,OAAO,QAAA,CAAS,OAAA,GAAU,QAAA,CAAS,OAAA,GAAU,EAAC;AAAA,MAChD,CAAA;AAAA,MACA,EAAA,GAAK;AAAA;AAAA,KACP;AAAA,EACF;AAAA,EAEA,MAAM,kBAAA,GAAqB;AACzB,IAAA,MAAM,QAAA,GAAW,kBAAA;AAEjB,IAAA,OAAO,KAAK,iBAAA,CAAkB,gBAAA;AAAA,MAC5B,QAAA;AAAA,MACA,YAAY;AACV,QAAA,MAAM,QAAA,GAAW,MAAM,IAAA,CAAK,iBAAA,CAAkB,QAAQ,oBAAA,CAAqB,gBAAgB,EAAE,GAAA,EAAI;AACjG,QAAA,OAAO,QAAA,CAAS,OAAA,GAAU,QAAA,CAAS,OAAA,GAAU,EAAC;AAAA,MAChD,CAAA;AAAA,MACA,EAAA,GAAK;AAAA;AAAA,KACP;AAAA,EACF;AAAA,EAEA,MAAM,sBAAsB,cAAA,EAAiC;AAC3D,IAAA,MAAM,QAAA,GAAW,gBAAgB,cAAc,CAAA,OAAA,CAAA;AAE/C,IAAA,OAAO,KAAK,iBAAA,CAAkB,gBAAA;AAAA,MAC5B,QAAA;AAAA,MACA,YAAY;AACV,QAAA,MAAM,QAAA,GAAW,MAAM,IAAA,CAAK,iBAAA,CAAkB,OAAA,CAAQ,oBAAA,CAAqB,mBAAmB,CAAA,CAC3F,IAAA,CAAK,cAAc,CAAA,CACnB,KAAA,EAAM;AAET,QAAA,IAAI,QAAA,EAAU;AACZ,UAAA,MAAM,QAAA,GAAW,MAAA,CAAO,QAAA,CAAS,SAAS,CAAA,IAAK,QAAA;AAC/C,UAAA,MAAM,cAAA,GAAiB,MAAA,CAAO,QAAA,CAAS,eAAe,CAAA,IAAK,QAAA;AAC3D,UAAA,MAAM,YAAA,GAAe,MAAA,CAAO,QAAA,CAAS,aAAa,CAAA,IAAK,CAAA;AACvD,UAAA,MAAM,kBAAA,GAAqB,MAAA,CAAO,QAAA,CAAS,mBAAmB,CAAA,IAAK,CAAA;AAEnE,UAAA,OAAO;AAAA,YACL,GAAG,QAAA;AAAA,YACH,eAAA,EAAiB,IAAA,CAAK,GAAA,CAAI,CAAA,EAAG,WAAW,YAAY,CAAA;AAAA,YACpD,qBAAA,EAAuB,IAAA,CAAK,GAAA,CAAI,CAAA,EAAG,iBAAiB,kBAAkB,CAAA;AAAA,YACtE,QAAA,EAAU;AAAA,cACR,KAAA,EAAO,QAAA,KAAa,QAAA,IAAY,YAAA,IAAgB,QAAA;AAAA,cAChD,WAAA,EAAa,cAAA,KAAmB,QAAA,IAAY,kBAAA,IAAsB;AAAA;AACpE,WACF;AAAA,QACF;AACA,QAAA,OAAO,IAAA;AAAA,MACT,CAAA;AAAA,MACA,CAAA,GAAI;AAAA;AAAA,KACN;AAAA,EACF;AAAA,EAEA,MAAM,OAAO,gBAAA,EAYV;AACD,IAAA,MAAM;AAAA,MACJ,IAAA;AAAA,MACA,WAAA;AAAA,MACA,KAAA;AAAA,MACA,aAAA,GAAgB,SAAA;AAAA,MAChB,UAAA,GAAa,CAAA;AAAA,MACb,SAAA,GAAY,IAAA;AAAA,MACZ,eAAA,GAAkB,IAAA;AAAA,MAClB;AAAA,KACF,GAAI,gBAAA;AAEJ,IAAA,MAAM,oBAAA,GAAuB,MAAM,IAAA,CAAK,iBAAA,CAAkB,OAAA;AAAA,MACxD,oBAAA,CAAqB;AAAA,KACvB,CACG,IAAA,CAAK,IAAA,EAAM,WAAA,EAAa,KAAA,EAAO,eAAe,UAAA,EAAY,SAAA,EAAW,eAAe,CAAA,CACpF,GAAA,EAAI;AAEP,IAAA,IAAI,CAAC,qBAAqB,OAAA,EAAS;AACjC,MAAA,MAAM,IAAI,MAAM,+BAA+B,CAAA;AAAA,IACjD;AAEA,IAAA,MAAM,cAAA,GAAiB,qBAAqB,IAAA,CAAK,WAAA;AAEjD,IAAA,IAAI,UAAU,MAAA,EAAQ;AACpB,MAAA,MAAM,IAAA,CAAK,kBAAA,CAAmB,cAAA,EAAgB,QAAQ,CAAA;AAAA,IACxD;AAGA,IAAA,MAAM,KAAK,uBAAA,EAAwB;AAEnC,IAAA,OAAO,EAAE,OAAA,EAAS,IAAA,EAAM,cAAA,EAAe;AAAA,EACzC;AAAA,EAEA,MAAM,kBAAA,CAAmB,cAAA,EAAwB,QAAA,EAAyD;AACxG,IAAA,IAAI,CAAC,SAAS,MAAA,EAAQ;AAEtB,IAAA,MAAM,aAAa,EAAC;AACpB,IAAA,MAAM,UAAA,uBAAiB,GAAA,EAAI;AAG3B,IAAA,KAAA,MAAW,WAAW,QAAA,EAAU;AAC9B,MAAA,UAAA,CAAW,IAAA;AAAA,QACT,IAAA,CAAK,iBAAA,CAAkB,OAAA,CAAQ,oBAAA,CAAqB,cAAc,CAAA,CAC/D,IAAA,CAAK,OAAA,CAAQ,IAAA,EAAM,OAAA,CAAQ,WAAA,IAAe,IAAI;AAAA,OACnD;AAAA,IACF;AAEA,IAAA,MAAM,IAAA,CAAK,iBAAA,CAAkB,KAAA,CAAM,UAAU,CAAA;AAG7C,IAAA,MAAM,sBAAsB,QAAA,CAAS,GAAA;AAAA,MAAI,CAAA,OAAA,KACvC,KAAK,iBAAA,CAAkB,OAAA,CAAQ,qBAAqB,iBAAiB,CAAA,CAClE,IAAA,CAAK,OAAA,CAAQ,IAAI;AAAA,KACtB;AAEA,IAAA,MAAM,cAAA,GAAiB,MAAM,IAAA,CAAK,iBAAA,CAAkB,MAAM,mBAAmB,CAAA;AAG7E,IAAA,QAAA,CAAS,OAAA,CAAQ,CAAC,OAAA,EAAS,KAAA,KAAU;AACnC,MAAA,IAAI,cAAA,CAAe,KAAK,CAAA,CAAE,OAAA,IAAW,eAAe,KAAK,CAAA,CAAE,OAAA,EAAS,MAAA,GAAS,CAAA,EAAG;AAC9E,QAAA,UAAA,CAAW,GAAA,CAAI,QAAQ,IAAA,EAAM,cAAA,CAAe,KAAK,CAAA,CAAE,OAAA,CAAQ,CAAC,CAAA,CAAE,EAAE,CAAA;AAAA,MAClE;AAAA,IACF,CAAC,CAAA;AAGD,IAAA,MAAM,yBAAyB,EAAC;AAChC,IAAA,KAAA,MAAW,CAAC,WAAA,EAAa,SAAS,CAAA,IAAK,UAAA,EAAY;AACjD,MAAA,sBAAA,CAAuB,IAAA;AAAA,QACrB,IAAA,CAAK,kBAAkB,OAAA,CAAQ,oBAAA,CAAqB,2BAA2B,CAAA,CAC5E,IAAA,CAAK,gBAAgB,SAAS;AAAA,OACnC;AAAA,IACF;AAEA,IAAA,IAAI,sBAAA,CAAuB,SAAS,CAAA,EAAG;AACrC,MAAA,MAAM,IAAA,CAAK,iBAAA,CAAkB,KAAA,CAAM,sBAAsB,CAAA;AAAA,IAC3D;AAAA,EACF;AAAA,EAEA,MAAM,MAAA,CAAO,EAAA,EAAqB,gBAAA,EAS/B;AACD,IAAA,MAAM,mBAAA,GAAsB,MAAM,IAAA,CAAK,OAAA,CAAQ,EAAE,CAAA;AACjD,IAAA,IAAI,CAAC,mBAAA,EAAqB;AACxB,MAAA,MAAM,IAAI,MAAM,wBAAwB,CAAA;AAAA,IAC1C;AAEA,IAAA,MAAM;AAAA,MACJ,OAAO,mBAAA,CAAoB,IAAA;AAAA,MAC3B,cAAc,mBAAA,CAAoB,WAAA;AAAA,MAClC,QAAQ,mBAAA,CAAoB,KAAA;AAAA,MAC5B,gBAAgB,mBAAA,CAAoB,aAAA;AAAA,MACpC,aAAa,mBAAA,CAAoB,UAAA;AAAA,MACjC,YAAY,mBAAA,CAAoB,SAAA;AAAA,MAChC,kBAAkB,mBAAA,CAAoB,eAAA;AAAA,MACtC;AAAA,KACF,GAAI,gBAAA;AAEJ,IAAA,MAAM,WAAW,MAAM,IAAA,CAAK,kBAAkB,OAAA,CAAQ,oBAAA,CAAqB,mBAAmB,CAAA,CAC3F,IAAA,CAAK,IAAA,EAAM,WAAA,EAAa,OAAO,aAAA,EAAe,UAAA,EAAY,WAAW,eAAA,EAAiB,EAAE,EACxF,GAAA,EAAI;AAEP,IAAA,IAAI,CAAC,SAAS,OAAA,EAAS;AACrB,MAAA,MAAM,IAAI,MAAM,+BAA+B,CAAA;AAAA,IACjD;AAGA,IAAA,IAAI,QAAA,EAAU;AACZ,MAAA,MAAM,IAAA,CAAK,kBAAkB,OAAA,CAAQ,oBAAA,CAAqB,4BAA4B,CAAA,CACnF,IAAA,CAAK,EAAE,CAAA,CACP,GAAA,EAAI;AAEP,MAAA,MAAM,IAAA,CAAK,kBAAA,CAAmB,MAAA,CAAO,EAAE,GAAG,QAAQ,CAAA;AAAA,IACpD;AAGA,IAAA,MAAM,IAAA,CAAK,uBAAA,CAAwB,MAAA,CAAO,EAAE,CAAC,CAAA;AAE7C,IAAA,OAAO,EAAE,SAAS,IAAA,EAAK;AAAA,EACzB;AAAA,EAEA,MAAM,OAAO,EAAA,EAAqB;AAChC,IAAA,MAAM,UAAA,GAAa;AAAA,MACjB,KAAK,iBAAA,CAAkB,OAAA,CAAQ,qBAAqB,4BAA4B,CAAA,CAAE,KAAK,EAAE,CAAA;AAAA,MACzF,KAAK,iBAAA,CAAkB,OAAA,CAAQ,qBAAqB,mBAAmB,CAAA,CAAE,KAAK,EAAE;AAAA,KAClF;AAEA,IAAA,MAAM,OAAA,GAAU,MAAM,IAAA,CAAK,iBAAA,CAAkB,MAAM,UAAU,CAAA;AAE7D,IAAA,IAAI,CAAC,OAAA,CAAQ,KAAA,CAAM,CAAA,MAAA,KAAU,MAAA,CAAO,OAAO,CAAA,EAAG;AAC5C,MAAA,MAAM,IAAI,MAAM,+BAA+B,CAAA;AAAA,IACjD;AAGA,IAAA,MAAM,IAAA,CAAK,uBAAA,CAAwB,MAAA,CAAO,EAAE,CAAC,CAAA;AAE7C,IAAA,OAAO,EAAE,SAAS,IAAA,EAAK;AAAA,EACzB;AAAA,EAEA,MAAc,wBAAwB,cAAA,EAAyB;AAC7D,IAAA,MAAM,SAAA,GAAY;AAAA,MAChB,mBAAA;AAAA,MACA,0BAAA;AAAA,MACA,yBAAA;AAAA,MACA;AAAA,KACF;AAEA,IAAA,IAAI,cAAA,EAAgB;AAClB,MAAA,SAAA,CAAU,IAAA;AAAA,QACR,gBAAgB,cAAc,CAAA,CAAA;AAAA,QAC9B,gBAAgB,cAAc,CAAA,MAAA,CAAA;AAAA,QAC9B,gBAAgB,cAAc,CAAA,OAAA;AAAA,OAChC;AAAA,IACF;AAEA,IAAA,KAAA,MAAW,OAAO,SAAA,EAAW;AAC3B,MAAA,IAAA,CAAK,kBAAkB,WAAA,EAAY;AAAA,IACrC;AAAA,EACF;AAAA,EAEA,MAAM,gBAAA,GAAmB;AACvB,IAAA,MAAM,QAAA,GAAW,sBAAA;AAEjB,IAAA,OAAO,KAAK,iBAAA,CAAkB,gBAAA;AAAA,MAC5B,QAAA;AAAA,MACA,YAAY;AACV,QAAA,MAAM,CAAC,SAAA,EAAW,eAAe,CAAA,GAAI,MAAM,QAAQ,GAAA,CAAI;AAAA,UACrD,KAAK,YAAA,EAAa;AAAA,UAClB,KAAK,kBAAA;AAAmB,SACzB,CAAA;AAED,QAAA,MAAM,YAAA,GAAe,SAAA,CAAU,MAAA,CAAO,CAAC,GAAA,EAAK,GAAA,KAAQ,GAAA,IAAO,MAAA,CAAO,GAAA,CAAI,eAAe,CAAA,IAAK,CAAA,CAAA,EAAI,CAAC,CAAA;AAC/F,QAAA,MAAM,cAAA,GAAiB,SAAA,CAAU,MAAA,CAAO,CAAC,GAAA,EAAK,GAAA,KAAQ,GAAA,IAAO,MAAA,CAAO,GAAA,CAAI,gBAAgB,CAAA,IAAK,CAAA,CAAA,EAAI,CAAC,CAAA;AAClG,QAAA,MAAM,qBAAA,GAAwB,cAAA,GAAiB,CAAA,GAAI,YAAA,GAAe,cAAA,GAAiB,CAAA;AAEnF,QAAA,OAAO;AAAA,UACL,qBAAqB,SAAA,CAAU,MAAA;AAAA,UAC/B,aAAA,EAAe,YAAA;AAAA,UACf,eAAA,EAAiB,cAAA;AAAA,UACjB,wBAAA,EAA0B,qBAAA;AAAA,UAC1B,qBAAA,EAAuB,eAAA,CAAgB,KAAA,CAAM,CAAA,EAAG,CAAC,CAAA;AAAA,UACjD,WAAA,EAAa,IAAA,CAAK,iBAAA,CAAkB,aAAA;AAAc,SACpD;AAAA,MACF,CAAA;AAAA,MACA,EAAA,GAAK;AAAA;AAAA,KACP;AAAA,EACF;AACF;;;;"}