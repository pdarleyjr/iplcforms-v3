{"version":3,"file":"form_submission_DFkhSEjI.mjs","sources":["../../../src/lib/services/form_submission.ts"],"sourcesContent":["import type { D1Database } from '@cloudflare/workers-types';\r\nimport { D1ConnectionManager, getD1Manager } from './d1-connection-manager';\r\nimport { FormTemplateService } from './form_template';\r\n\r\nexport const FORM_SUBMISSION_QUERIES = {\r\n  // Optimized: Reduced JOIN complexity, added indexes hint\r\n  BASE_SELECT: `\r\n    SELECT\r\n      fs.*,\r\n      ft.title as template_title,\r\n      ft.version as template_version,\r\n      ft.scoring_config as template_scoring_config,\r\n      u.name as submitted_by_name,\r\n      u.email as submitted_by_email,\r\n      p.name as patient_name,\r\n      p.mrn as patient_mrn\r\n    FROM form_submissions fs\r\n    LEFT JOIN form_templates ft ON fs.template_id = ft.id\r\n    LEFT JOIN users u ON fs.submitted_by = u.id\r\n    LEFT JOIN patients p ON fs.patient_id = p.id\r\n  `,\r\n  INSERT_SUBMISSION: `\r\n    INSERT INTO form_submissions (\r\n      template_id, patient_id, responses, status, calculated_score, \r\n      completion_time_seconds, submitted_by, metadata\r\n    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)\r\n  `,\r\n  UPDATE_SUBMISSION: `\r\n    UPDATE form_submissions \r\n    SET responses = ?, status = ?, calculated_score = ?, \r\n        completion_time_seconds = ?, metadata = ?, updated_at = CURRENT_TIMESTAMP\r\n    WHERE id = ?\r\n  `,\r\n  UPDATE_STATUS: `UPDATE form_submissions SET status = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?`,\r\n  GET_BY_ID: `WHERE fs.id = ?`,\r\n  GET_BY_TEMPLATE: `WHERE fs.template_id = ?`,\r\n  GET_BY_PATIENT: `WHERE fs.patient_id = ?`,\r\n  GET_BY_STATUS: `WHERE fs.status = ?`,\r\n  GET_BY_DATE_RANGE: `WHERE fs.created_at BETWEEN ? AND ?`,\r\n  // Optimized: Analytics query combining multiple metrics\r\n  SUBMISSION_ANALYTICS: `\r\n    SELECT\r\n      COUNT(*) as total_submissions,\r\n      COUNT(CASE WHEN status = 'completed' THEN 1 END) as completed_submissions,\r\n      COUNT(CASE WHEN status = 'draft' THEN 1 END) as draft_submissions,\r\n      COUNT(CASE WHEN status = 'in-progress' THEN 1 END) as in_progress_submissions,\r\n      AVG(completion_time_seconds) as avg_completion_time,\r\n      AVG(calculated_score) as avg_score,\r\n      MIN(calculated_score) as min_score,\r\n      MAX(calculated_score) as max_score,\r\n      COUNT(DISTINCT submitted_by) as unique_submitters\r\n    FROM form_submissions\r\n  `,\r\n  // Optimized: Batch submission data with template info\r\n  GET_SUBMISSIONS_WITH_STATS: `\r\n    SELECT\r\n      fs.*,\r\n      ft.title as template_title,\r\n      ft.category as template_category,\r\n      COUNT(*) OVER(PARTITION BY fs.template_id) as template_submission_count,\r\n      AVG(fs.calculated_score) OVER(PARTITION BY fs.template_id) as template_avg_score\r\n    FROM form_submissions fs\r\n    LEFT JOIN form_templates ft ON fs.template_id = ft.id\r\n  `,\r\n};\r\n\r\nconst processSubmissionResults = (rows: any[]) => {\r\n  return rows.map((row) => {\r\n    const submission = { ...row };\r\n    \r\n    // Parse JSON fields\r\n    if (submission.responses) {\r\n      submission.responses = JSON.parse(submission.responses);\r\n    }\r\n    if (submission.metadata) {\r\n      submission.metadata = JSON.parse(submission.metadata);\r\n    }\r\n    if (submission.template_scoring_config) {\r\n      submission.template_scoring_config = JSON.parse(submission.template_scoring_config);\r\n    }\r\n\r\n    // Add template info\r\n    if (submission.template_title) {\r\n      submission.template_info = {\r\n        title: submission.template_title,\r\n        version: submission.template_version,\r\n        scoring_config: submission.template_scoring_config,\r\n      };\r\n      delete submission.template_title;\r\n      delete submission.template_version;\r\n      delete submission.template_scoring_config;\r\n    }\r\n\r\n    // Add submitter info\r\n    if (submission.submitted_by_name) {\r\n      submission.submitted_by_info = {\r\n        name: submission.submitted_by_name,\r\n        email: submission.submitted_by_email,\r\n      };\r\n      delete submission.submitted_by_name;\r\n      delete submission.submitted_by_email;\r\n    }\r\n\r\n    // Add patient info\r\n    if (submission.patient_name) {\r\n      submission.patient_info = {\r\n        name: submission.patient_name,\r\n        mrn: submission.patient_mrn,\r\n      };\r\n      delete submission.patient_name;\r\n      delete submission.patient_mrn;\r\n    }\r\n\r\n    return submission;\r\n  });\r\n};\r\n\r\nexport class FormSubmissionService {\r\n  private connectionManager: D1ConnectionManager;\r\n  private templateService: FormTemplateService;\r\n\r\n  constructor(DB: D1Database) {\r\n    this.connectionManager = getD1Manager(DB);\r\n    this.templateService = new FormTemplateService(DB);\r\n  }\r\n\r\n  async getById(id: number) {\r\n    const cacheKey = `submission_${id}`;\r\n    \r\n    return this.connectionManager.executeWithCache(\r\n      cacheKey,\r\n      async () => {\r\n        const query = `${FORM_SUBMISSION_QUERIES.BASE_SELECT} ${FORM_SUBMISSION_QUERIES.GET_BY_ID}`;\r\n        const stmt = this.connectionManager.prepare(query);\r\n        const response = await stmt.bind(id).all();\r\n\r\n        if (response.success && response.results.length > 0) {\r\n          const [submission] = processSubmissionResults(response.results);\r\n          return submission;\r\n        }\r\n        return null;\r\n      },\r\n      5 * 60 * 1000 // 5 minute cache\r\n    );\r\n  }\r\n\r\n  async getAll(filters?: {\r\n    template_id?: number;\r\n    patient_id?: number;\r\n    status?: string;\r\n    date_from?: string;\r\n    date_to?: string;\r\n    page?: number;\r\n    per_page?: number;\r\n  }) {\r\n    let query = FORM_SUBMISSION_QUERIES.BASE_SELECT;\r\n    let bindParams: any[] = [];\r\n    let whereClause = '';\r\n    \r\n    if (filters?.template_id) {\r\n      whereClause = FORM_SUBMISSION_QUERIES.GET_BY_TEMPLATE;\r\n      bindParams.push(filters.template_id);\r\n    } else if (filters?.patient_id) {\r\n      whereClause = FORM_SUBMISSION_QUERIES.GET_BY_PATIENT;\r\n      bindParams.push(filters.patient_id);\r\n    } else if (filters?.status) {\r\n      whereClause = FORM_SUBMISSION_QUERIES.GET_BY_STATUS;\r\n      bindParams.push(filters.status);\r\n    } else if (filters?.date_from && filters?.date_to) {\r\n      whereClause = FORM_SUBMISSION_QUERIES.GET_BY_DATE_RANGE;\r\n      bindParams.push(filters.date_from, filters.date_to);\r\n    }\r\n\r\n    if (whereClause) {\r\n      query += ` ${whereClause}`;\r\n    }\r\n\r\n    query += ` ORDER BY fs.created_at DESC`;\r\n\r\n    // Add pagination\r\n    if (filters?.page && filters?.per_page) {\r\n      const offset = (filters.page - 1) * filters.per_page;\r\n      query += ` LIMIT ? OFFSET ?`;\r\n      bindParams.push(filters.per_page, offset);\r\n    }\r\n\r\n    // Cache key for filtered results\r\n    const cacheKey = `submissions_${JSON.stringify(filters || {})}`;\r\n    \r\n    return this.connectionManager.executeWithCache(\r\n      cacheKey,\r\n      async () => {\r\n        const stmt = this.connectionManager.prepare(query);\r\n        const response = await stmt.bind(...bindParams).all();\r\n\r\n        if (response.success) {\r\n          return processSubmissionResults(response.results);\r\n        }\r\n        return [];\r\n      },\r\n      2 * 60 * 1000 // 2 minute cache for lists\r\n    );\r\n  }\r\n\r\n  async create(submissionData: {\r\n    template_id: number;\r\n    patient_id?: number;\r\n    responses: object;\r\n    status?: string;\r\n    completion_time_seconds?: number;\r\n    submitted_by?: number;\r\n    metadata?: object;\r\n  }) {\r\n    const {\r\n      template_id,\r\n      patient_id,\r\n      responses,\r\n      status = 'completed',\r\n      completion_time_seconds,\r\n      submitted_by,\r\n      metadata = {},\r\n    } = submissionData;\r\n\r\n    // Get template to check visibility conditions\r\n    const template = await this.templateService.getById(template_id);\r\n    if (!template) {\r\n      throw new Error(\"Template not found\");\r\n    }\r\n\r\n    // Filter responses based on visibility conditions\r\n    const visibleResponses = await this.filterResponsesByVisibility(template, responses);\r\n\r\n    // Calculate score based on template scoring configuration\r\n    const calculated_score = await this.calculateScore(template_id, visibleResponses);\r\n\r\n    const stmt = this.connectionManager.prepare(FORM_SUBMISSION_QUERIES.INSERT_SUBMISSION);\r\n    const response = await stmt\r\n      .bind(\r\n        template_id,\r\n        patient_id || null,\r\n        JSON.stringify(visibleResponses),\r\n        status,\r\n        calculated_score,\r\n        completion_time_seconds || null,\r\n        submitted_by || null,\r\n        JSON.stringify(metadata)\r\n      )\r\n      .run();\r\n\r\n    if (!response.success) {\r\n      throw new Error(\"Failed to create form submission\");\r\n    }\r\n\r\n    const submissionId = response.meta.last_row_id;\r\n    \r\n    // Clear relevant caches\r\n    this.clearSubmissionCaches(template_id);\r\n    \r\n    return { success: true, submissionId, calculated_score };\r\n  }\r\n\r\n  async update(id: number, submissionData: {\r\n    responses?: object;\r\n    status?: string;\r\n    completion_time_seconds?: number;\r\n    metadata?: object;\r\n  }) {\r\n    // First get the existing submission\r\n    const existing = await this.getById(id);\r\n    if (!existing) {\r\n      throw new Error(\"Submission not found\");\r\n    }\r\n\r\n    const {\r\n      responses = existing.responses,\r\n      status = existing.status,\r\n      completion_time_seconds = existing.completion_time_seconds,\r\n      metadata = existing.metadata,\r\n    } = submissionData;\r\n\r\n    // Get template to check visibility conditions\r\n    const template = await this.templateService.getById(existing.template_id);\r\n    if (!template) {\r\n      throw new Error(\"Template not found\");\r\n    }\r\n\r\n    // Filter responses based on visibility conditions\r\n    const visibleResponses = await this.filterResponsesByVisibility(template, responses);\r\n\r\n    // Recalculate score if responses changed\r\n    let calculated_score = existing.calculated_score;\r\n    if (submissionData.responses) {\r\n      calculated_score = await this.calculateScore(existing.template_id, visibleResponses);\r\n    }\r\n\r\n    const stmt = this.connectionManager.prepare(FORM_SUBMISSION_QUERIES.UPDATE_SUBMISSION);\r\n    const response = await stmt\r\n      .bind(\r\n        JSON.stringify(visibleResponses),\r\n        status,\r\n        calculated_score,\r\n        completion_time_seconds,\r\n        JSON.stringify(metadata),\r\n        id\r\n      )\r\n      .run();\r\n\r\n    if (!response.success) {\r\n      throw new Error(\"Failed to update form submission\");\r\n    }\r\n\r\n    // Clear specific submission cache and related caches\r\n    this.connectionManager.cacheData(`submission_${id}`, null, 0);\r\n    this.clearSubmissionCaches(existing.template_id);\r\n    \r\n    return { success: true, calculated_score };\r\n  }\r\n\r\n  async updateStatus(id: number, status: string) {\r\n    const stmt = this.connectionManager.prepare(FORM_SUBMISSION_QUERIES.UPDATE_STATUS);\r\n    const response = await stmt\r\n      .bind(status, id)\r\n      .run();\r\n\r\n    if (!response.success) {\r\n      throw new Error(\"Failed to update submission status\");\r\n    }\r\n\r\n    // Clear submission cache\r\n    this.connectionManager.cacheData(`submission_${id}`, null, 0);\r\n    \r\n    // Get submission to clear template-specific caches\r\n    const submission = await this.getById(id);\r\n    if (submission) {\r\n      this.clearSubmissionCaches(submission.template_id);\r\n    }\r\n\r\n    return { success: true };\r\n  }\r\n\r\n  async calculateScore(templateId: number, responses: object): Promise<number | null> {\r\n    const cacheKey = `template_scoring_${templateId}`;\r\n    \r\n    // Get template scoring configuration with caching\r\n    const template = await this.connectionManager.executeWithCache(\r\n      cacheKey,\r\n      async () => {\r\n        const stmt = this.connectionManager.prepare(`\r\n          SELECT scoring_config FROM form_templates WHERE id = ?\r\n        `);\r\n        return await stmt.bind(templateId).first();\r\n      },\r\n      10 * 60 * 1000 // 10 minute cache for scoring config\r\n    );\r\n\r\n    if (!template || !template.scoring_config || typeof template.scoring_config !== 'string') {\r\n      return null;\r\n    }\r\n\r\n    const scoringConfig = JSON.parse(template.scoring_config);\r\n    \r\n    if (!scoringConfig.algorithm) {\r\n      return null;\r\n    }\r\n\r\n    switch (scoringConfig.algorithm) {\r\n      case 'sum':\r\n        return this.calculateSumScore(scoringConfig, responses);\r\n      case 'average':\r\n        return this.calculateAverageScore(scoringConfig, responses);\r\n      case 'weighted':\r\n        return this.calculateWeightedScore(scoringConfig, responses);\r\n      case 'custom':\r\n        return this.calculateCustomScore(scoringConfig, responses);\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n\r\n  private calculateSumScore(config: any, responses: any): number {\r\n    let total = 0;\r\n    const components = config.components || [];\r\n    \r\n    for (const component of components) {\r\n      const value = responses[component];\r\n      if (typeof value === 'number') {\r\n        total += value;\r\n      }\r\n    }\r\n    \r\n    return total;\r\n  }\r\n\r\n  private calculateAverageScore(config: any, responses: any): number {\r\n    const sum = this.calculateSumScore(config, responses);\r\n    const components = config.components || [];\r\n    return components.length > 0 ? sum / components.length : 0;\r\n  }\r\n\r\n  private calculateWeightedScore(config: any, responses: any): number {\r\n    let total = 0;\r\n    let weightSum = 0;\r\n    const weights = config.weights || {};\r\n    \r\n    for (const [component, weight] of Object.entries(weights)) {\r\n      const value = responses[component];\r\n      if (typeof value === 'number' && typeof weight === 'number') {\r\n        total += value * weight;\r\n        weightSum += weight;\r\n      }\r\n    }\r\n    \r\n    return weightSum > 0 ? total / weightSum : 0;\r\n  }\r\n\r\n  private calculateCustomScore(config: any, responses: any): number {\r\n    // For custom scoring, we would implement specific algorithms\r\n    // This is a placeholder for custom scoring logic\r\n    if (config.custom_function) {\r\n      // In a real implementation, this might evaluate a safe expression\r\n      // or call a specific scoring function based on the configuration\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  async getSubmissionStats(templateId?: number) {\r\n    const cacheKey = templateId ? `submission_stats_${templateId}` : 'submission_stats_all';\r\n    \r\n    return this.connectionManager.executeWithCache(\r\n      cacheKey,\r\n      async () => {\r\n        let query = FORM_SUBMISSION_QUERIES.SUBMISSION_ANALYTICS;\r\n        \r\n        let bindParams: any[] = [];\r\n        if (templateId) {\r\n          query += ` WHERE template_id = ?`;\r\n          bindParams.push(templateId);\r\n        }\r\n\r\n        const stmt = this.connectionManager.prepare(query);\r\n        const response = await stmt.bind(...bindParams).first();\r\n        return response || {};\r\n      },\r\n      5 * 60 * 1000 // 5 minute cache for analytics\r\n    );\r\n  }\r\n\r\n  async exportSubmissions(templateId: number, format: 'json' | 'csv' = 'json') {\r\n    const submissions = await this.getAll({ template_id: templateId });\r\n    \r\n    if (format === 'csv') {\r\n      return this.convertToCSV(submissions);\r\n    }\r\n    \r\n    return submissions;\r\n  }\r\n\r\n  async bulkCreate(submissions: Array<{\r\n    template_id: number;\r\n    patient_id?: number;\r\n    responses: object;\r\n    status?: string;\r\n    completion_time_seconds?: number;\r\n    submitted_by?: number;\r\n    metadata?: object;\r\n  }>) {\r\n    if (submissions.length === 0) return { success: true, submissionIds: [] };\r\n\r\n    // Prepare all submissions with calculated scores\r\n    const preparedSubmissions = await Promise.all(\r\n      submissions.map(async (sub) => {\r\n        const calculated_score = await this.calculateScore(sub.template_id, sub.responses);\r\n        return {\r\n          ...sub,\r\n          calculated_score,\r\n          responses: JSON.stringify(sub.responses),\r\n          metadata: JSON.stringify(sub.metadata || {}),\r\n          status: sub.status || 'completed'\r\n        };\r\n      })\r\n    );\r\n\r\n    // Bulk insert using connectionManager\r\n    const results = await this.connectionManager.bulkInsert(\r\n      'form_submissions',\r\n      preparedSubmissions,\r\n      ['template_id', 'patient_id', 'responses', 'status', 'calculated_score',\r\n       'completion_time_seconds', 'submitted_by', 'metadata']\r\n    );\r\n\r\n    const submissionIds = results\r\n      .filter(r => r.success)\r\n      .map(r => r.meta.last_row_id);\r\n\r\n    // Clear relevant caches\r\n    const uniqueTemplateIds = [...new Set(submissions.map(s => s.template_id))];\r\n    uniqueTemplateIds.forEach(templateId => this.clearSubmissionCaches(templateId));\r\n\r\n    return { success: true, submissionIds };\r\n  }\r\n\r\n  async getSubmissionsWithStats(filters?: {\r\n    template_id?: number;\r\n    limit?: number;\r\n  }) {\r\n    const cacheKey = `submissions_with_stats_${JSON.stringify(filters || {})}`;\r\n    \r\n    return this.connectionManager.executeWithCache(\r\n      cacheKey,\r\n      async () => {\r\n        let query = FORM_SUBMISSION_QUERIES.GET_SUBMISSIONS_WITH_STATS;\r\n        let bindParams: any[] = [];\r\n        \r\n        if (filters?.template_id) {\r\n          query += ` WHERE fs.template_id = ?`;\r\n          bindParams.push(filters.template_id);\r\n        }\r\n        \r\n        query += ` ORDER BY fs.created_at DESC`;\r\n        \r\n        if (filters?.limit) {\r\n          query += ` LIMIT ?`;\r\n          bindParams.push(filters.limit);\r\n        }\r\n\r\n        const stmt = this.connectionManager.prepare(query);\r\n        const response = await stmt.bind(...bindParams).all();\r\n\r\n        if (response.success) {\r\n          return processSubmissionResults(response.results);\r\n        }\r\n        return [];\r\n      },\r\n      2 * 60 * 1000 // 2 minute cache\r\n    );\r\n  }\r\n\r\n  private clearSubmissionCaches(templateId?: number) {\r\n    // Clear list caches that would be affected\r\n    const patterns = ['submissions_', 'submission_stats'];\r\n    if (templateId) {\r\n      patterns.push(`template_${templateId}`);\r\n    }\r\n    this.connectionManager.clearSpecificCaches(patterns);\r\n  }\r\n\r\n  async healthCheck(): Promise<boolean> {\r\n    return this.connectionManager.healthCheck();\r\n  }\r\n\r\n  getCacheStats() {\r\n    return this.connectionManager.getCacheStats();\r\n  }\r\n\r\n  private convertToCSV(submissions: any[]): string {\r\n    if (submissions.length === 0) return '';\r\n    \r\n    // Get all unique response keys for headers\r\n    const responseKeys = new Set<string>();\r\n    submissions.forEach(sub => {\r\n      if (sub.responses) {\r\n        Object.keys(sub.responses).forEach(key => responseKeys.add(key));\r\n      }\r\n    });\r\n    \r\n    const headers = ['id', 'created_at', 'status', 'calculated_score', ...responseKeys];\r\n    const csvRows = [headers.join(',')];\r\n    \r\n    submissions.forEach(sub => {\r\n      const row = [\r\n        sub.id,\r\n        sub.created_at,\r\n        sub.status,\r\n        sub.calculated_score || '',\r\n        ...Array.from(responseKeys).map(key => sub.responses?.[key] || '')\r\n      ];\r\n      csvRows.push(row.join(','));\r\n    });\r\n    \r\n    return csvRows.join('\\n');\r\n  }\r\n\r\n  private async filterResponsesByVisibility(template: any, responses: any): Promise<any> {\r\n    // If template doesn't have schema or components, return all responses\r\n    if (!template.schema || !template.schema.components) {\r\n      return responses;\r\n    }\r\n\r\n    const components = template.schema.components;\r\n    const filteredResponses: any = {};\r\n\r\n    // Helper function to evaluate visibility condition\r\n    const evaluateCondition = (condition: any): boolean => {\r\n      if (!condition || !condition.field || !condition.operator) {\r\n        return true; // No condition means always visible\r\n      }\r\n\r\n      const triggerValue = responses[condition.field];\r\n      const targetValue = condition.value;\r\n\r\n      switch (condition.operator) {\r\n        case 'equals':\r\n          return triggerValue === targetValue;\r\n        case 'not_equals':\r\n          return triggerValue !== targetValue;\r\n        case 'contains':\r\n          return String(triggerValue).includes(String(targetValue));\r\n        case 'greater_than':\r\n          return Number(triggerValue) > Number(targetValue);\r\n        case 'less_than':\r\n          return Number(triggerValue) < Number(targetValue);\r\n        default:\r\n          return true;\r\n      }\r\n    };\r\n\r\n    // Check each component's visibility\r\n    for (const component of components) {\r\n      const fieldId = component.id;\r\n      \r\n      // Skip if field doesn't have a response\r\n      if (!(fieldId in responses)) {\r\n        continue;\r\n      }\r\n\r\n      // Check visibility condition\r\n      if (component.props?.visibilityCondition) {\r\n        const isVisible = evaluateCondition(component.props.visibilityCondition);\r\n        if (isVisible) {\r\n          filteredResponses[fieldId] = responses[fieldId];\r\n        }\r\n      } else {\r\n        // No visibility condition means always visible\r\n        filteredResponses[fieldId] = responses[fieldId];\r\n      }\r\n    }\r\n\r\n    return filteredResponses;\r\n  }\r\n}"],"names":[],"mappings":"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"}