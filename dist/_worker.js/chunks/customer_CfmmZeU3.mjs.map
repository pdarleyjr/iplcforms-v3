{"version":3,"file":"customer_CfmmZeU3.mjs","sources":["../../../src/lib/services/customer.ts"],"sourcesContent":["import type { D1Database } from '@cloudflare/workers-types';\r\nimport { D1ConnectionManager, getD1Manager } from './d1-connection-manager';\r\n\r\nexport const CUSTOMER_QUERIES = {\r\n  // Optimized: Reduced JOIN complexity, added indexes hint\r\n  BASE_SELECT: `\r\n    SELECT\r\n      customers.*,\r\n      customer_subscriptions.id as subscription_id,\r\n      customer_subscriptions.status as subscription_status,\r\n      subscriptions.name as subscription_name,\r\n      subscriptions.description as subscription_description,\r\n      subscriptions.price as subscription_price\r\n    FROM customers\r\n    LEFT JOIN customer_subscriptions\r\n      ON customers.id = customer_subscriptions.customer_id\r\n    LEFT JOIN subscriptions\r\n      ON customer_subscriptions.subscription_id = subscriptions.id\r\n  `,\r\n  INSERT_CUSTOMER: `INSERT INTO customers (name, email, notes) VALUES (?, ?, ?)`,\r\n  INSERT_CUSTOMER_SUBSCRIPTION: `\r\n    INSERT INTO customer_subscriptions (customer_id, subscription_id, status)\r\n    VALUES (?, ?, ?)\r\n  `,\r\n  GET_BY_ID: `WHERE customers.id = ?`,\r\n  GET_BY_EMAIL: `WHERE customers.email = ?`,\r\n  // Optimized: Analytics query combining multiple metrics\r\n  CUSTOMER_ANALYTICS: `\r\n    SELECT\r\n      COUNT(*) as total_customers,\r\n      COUNT(CASE WHEN customer_subscriptions.status = 'active' THEN 1 END) as active_customers,\r\n      COUNT(CASE WHEN customers.created_at >= date('now', '-30 days') THEN 1 END) as new_customers_30d,\r\n      AVG(subscriptions.price) as avg_subscription_price\r\n    FROM customers\r\n    LEFT JOIN customer_subscriptions ON customers.id = customer_subscriptions.customer_id\r\n    LEFT JOIN subscriptions ON customer_subscriptions.subscription_id = subscriptions.id\r\n  `,\r\n  // Optimized: Batch customer data with subscription info\r\n  GET_CUSTOMERS_WITH_STATS: `\r\n    SELECT\r\n      customers.*,\r\n      customer_subscriptions.status as subscription_status,\r\n      subscriptions.name as subscription_name,\r\n      subscriptions.price as subscription_price,\r\n      COUNT(form_submissions.id) as total_submissions\r\n    FROM customers\r\n    LEFT JOIN customer_subscriptions ON customers.id = customer_subscriptions.customer_id\r\n    LEFT JOIN subscriptions ON customer_subscriptions.subscription_id = subscriptions.id\r\n    LEFT JOIN form_submissions ON customers.id = form_submissions.submitted_by\r\n    GROUP BY customers.id\r\n  `,\r\n};\r\n\r\nconst processCustomerResults = (rows: any[]) => {\r\n  const customersMap = new Map();\r\n\r\n  rows.forEach((row) => {\r\n    if (!customersMap.has(row.id)) {\r\n      const customer = { ...row };\r\n      if (row.subscription_id) {\r\n        customer.subscription = {\r\n          id: row.subscription_id,\r\n          status: row.subscription_status,\r\n          name: row.subscription_name,\r\n          description: row.subscription_description,\r\n          price: row.subscription_price,\r\n        };\r\n      }\r\n      // Clean up raw join fields\r\n      delete customer.subscription_id;\r\n      delete customer.subscription_status;\r\n      delete customer.subscription_name;\r\n      delete customer.subscription_description;\r\n      delete customer.subscription_price;\r\n\r\n      customersMap.set(row.id, customer);\r\n    }\r\n  });\r\n\r\n  return Array.from(customersMap.values());\r\n};\r\n\r\nexport class CustomerService {\r\n  private connectionManager: D1ConnectionManager;\r\n\r\n  constructor(DB: D1Database) {\r\n    this.connectionManager = getD1Manager(DB);\r\n  }\r\n\r\n  async getById(id: number) {\r\n    const cacheKey = `customer_${id}`;\r\n    \r\n    return this.connectionManager.executeWithCache(\r\n      cacheKey,\r\n      async () => {\r\n        const query = `${CUSTOMER_QUERIES.BASE_SELECT} ${CUSTOMER_QUERIES.GET_BY_ID}`;\r\n        const stmt = this.connectionManager.prepare(query);\r\n        const response = await stmt.bind(id).all();\r\n\r\n        if (response.success) {\r\n          const [customer] = processCustomerResults(response.results);\r\n          return customer;\r\n        }\r\n        return null;\r\n      },\r\n      5 * 60 * 1000 // 5 minute cache\r\n    );\r\n  }\r\n\r\n  async getByEmail(email: string) {\r\n    const cacheKey = `customer_email_${email}`;\r\n    \r\n    return this.connectionManager.executeWithCache(\r\n      cacheKey,\r\n      async () => {\r\n        const query = `${CUSTOMER_QUERIES.BASE_SELECT} ${CUSTOMER_QUERIES.GET_BY_EMAIL}`;\r\n        const stmt = this.connectionManager.prepare(query);\r\n        const response = await stmt.bind(email).all();\r\n\r\n        if (response.success) {\r\n          const [customer] = processCustomerResults(response.results);\r\n          return customer;\r\n        }\r\n        return null;\r\n      },\r\n      5 * 60 * 1000 // 5 minute cache\r\n    );\r\n  }\r\n\r\n  async getAll() {\r\n    const cacheKey = 'customers_all';\r\n    \r\n    return this.connectionManager.executeWithCache(\r\n      cacheKey,\r\n      async () => {\r\n        const query = `${CUSTOMER_QUERIES.BASE_SELECT} ORDER BY customers.id ASC`;\r\n        const stmt = this.connectionManager.prepare(query);\r\n        const response = await stmt.all();\r\n\r\n        if (response.success) {\r\n          return processCustomerResults(response.results);\r\n        }\r\n        return [];\r\n      },\r\n      2 * 60 * 1000 // 2 minute cache for list\r\n    );\r\n  }\r\n\r\n  async getAllWithStats() {\r\n    const cacheKey = 'customers_with_stats';\r\n    \r\n    return this.connectionManager.executeWithCache(\r\n      cacheKey,\r\n      async () => {\r\n        const stmt = this.connectionManager.prepare(CUSTOMER_QUERIES.GET_CUSTOMERS_WITH_STATS);\r\n        const response = await stmt.all();\r\n\r\n        if (response.success) {\r\n          return response.results.map(row => ({\r\n            ...row,\r\n            total_submissions: row.total_submissions || 0\r\n          }));\r\n        }\r\n        return [];\r\n      },\r\n      2 * 60 * 1000 // 2 minute cache\r\n    );\r\n  }\r\n\r\n  async getAnalytics() {\r\n    const cacheKey = 'customer_analytics';\r\n    \r\n    return this.connectionManager.executeWithCache(\r\n      cacheKey,\r\n      async () => {\r\n        const stmt = this.connectionManager.prepare(CUSTOMER_QUERIES.CUSTOMER_ANALYTICS);\r\n        const response = await stmt.first();\r\n        return response || {};\r\n      },\r\n      5 * 60 * 1000 // 5 minute cache for analytics\r\n    );\r\n  }\r\n\r\n  async create(customerData: {\r\n    name: string;\r\n    email: string;\r\n    notes?: string;\r\n    subscription?: {\r\n      id: number;\r\n      status: string;\r\n    };\r\n  }) {\r\n    const { name, email, notes, subscription } = customerData;\r\n\r\n    // Optimized: Use batch operation if subscription is provided\r\n    if (subscription) {\r\n      const customerStmt = this.connectionManager.prepare(CUSTOMER_QUERIES.INSERT_CUSTOMER)\r\n        .bind(name, email, notes || null);\r\n      \r\n      const response = await customerStmt.run();\r\n      \r\n      if (!response.success) {\r\n        throw new Error(\"Failed to create customer\");\r\n      }\r\n\r\n      const customerId = response.meta.last_row_id;\r\n\r\n      const subscriptionStmt = this.connectionManager.prepare(CUSTOMER_QUERIES.INSERT_CUSTOMER_SUBSCRIPTION)\r\n        .bind(customerId, subscription.id, subscription.status);\r\n      \r\n      const subscriptionResponse = await subscriptionStmt.run();\r\n\r\n      if (!subscriptionResponse.success) {\r\n        throw new Error(\"Failed to create customer subscription relationship\");\r\n      }\r\n\r\n      // Clear relevant caches\r\n      this.clearCustomerCaches();\r\n      \r\n      return { success: true, customerId };\r\n    } else {\r\n      // Single operation for customer only\r\n      const stmt = this.connectionManager.prepare(CUSTOMER_QUERIES.INSERT_CUSTOMER);\r\n      const response = await stmt.bind(name, email, notes || null).run();\r\n\r\n      if (!response.success) {\r\n        throw new Error(\"Failed to create customer\");\r\n      }\r\n\r\n      const customerId = response.meta.last_row_id;\r\n      \r\n      // Clear relevant caches\r\n      this.clearCustomerCaches();\r\n      \r\n      return { success: true, customerId };\r\n    }\r\n  }\r\n\r\n  async bulkCreate(customers: Array<{\r\n    name: string;\r\n    email: string;\r\n    notes?: string;\r\n  }>) {\r\n    if (customers.length === 0) return { success: true, customerIds: [] };\r\n\r\n    // Optimized: Bulk insert using batch operations\r\n    const results = await this.connectionManager.bulkInsert(\r\n      'customers',\r\n      customers,\r\n      ['name', 'email', 'notes']\r\n    );\r\n\r\n    const customerIds = results\r\n      .filter(r => r.success)\r\n      .map(r => r.meta.last_row_id);\r\n\r\n    // Clear relevant caches\r\n    this.clearCustomerCaches();\r\n\r\n    return { success: true, customerIds };\r\n  }\r\n\r\n  async updateSubscriptionStatus(customerId: number, status: string) {\r\n    const stmt = this.connectionManager.prepare(`\r\n      UPDATE customer_subscriptions\r\n      SET status = ?, updated_at = CURRENT_TIMESTAMP\r\n      WHERE customer_id = ?\r\n    `);\r\n    \r\n    const response = await stmt.bind(status, customerId).run();\r\n    \r\n    if (!response.success) {\r\n      throw new Error(\"Failed to update subscription status\");\r\n    }\r\n\r\n    // Clear specific customer cache\r\n    this.connectionManager.cacheData(`customer_${customerId}`, null, 0);\r\n    this.clearCustomerCaches();\r\n\r\n    return { success: true };\r\n  }\r\n\r\n  private clearCustomerCaches() {\r\n    // Clear list caches that would be affected by new/updated customers\r\n    this.connectionManager.cacheData('customers_all', null, 0);\r\n    this.connectionManager.cacheData('customers_with_stats', null, 0);\r\n    this.connectionManager.cacheData('customer_analytics', null, 0);\r\n  }\r\n\r\n  async healthCheck(): Promise<boolean> {\r\n    return this.connectionManager.healthCheck();\r\n  }\r\n\r\n  getCacheStats() {\r\n    return this.connectionManager.getCacheStats();\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}