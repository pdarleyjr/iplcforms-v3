{"version":3,"file":"_astro-internal_middleware.mjs","sources":["../../src/middleware/cors.ts","../../src/middleware/index.ts"],"sourcesContent":["import type { APIContext } from 'astro';\r\n\r\n// CORS Configuration\r\nconst ALLOWED_ORIGINS_PRODUCTION = [\r\n  'https://iplcforms.com',\r\n  'https://www.iplcforms.com',\r\n  'https://app.iplcforms.com',\r\n  // Add any other production domains here\r\n];\r\n\r\nconst ALLOWED_ORIGINS_DEVELOPMENT = [\r\n  'http://localhost:3000',\r\n  'http://localhost:4321',\r\n  'http://127.0.0.1:3000',\r\n  'http://127.0.0.1:4321',\r\n];\r\n\r\nconst ALLOWED_METHODS = ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'];\r\nconst ALLOWED_HEADERS = ['Content-Type', 'Authorization', 'X-Requested-With'];\r\nconst MAX_AGE = 86400; // 24 hours\r\n\r\n/**\r\n * Get allowed origins based on environment\r\n */\r\nfunction getAllowedOrigins(context: APIContext): string[] {\r\n  // Check for development mode through various means\r\n  const url = new URL(context.request.url);\r\n  const isDevelopment =\r\n    url.hostname === 'localhost' ||\r\n    url.hostname === '127.0.0.1' ||\r\n    url.hostname.includes('.workers.dev') ||\r\n    context.request.headers.get('X-Environment') === 'development';\r\n  \r\n  if (isDevelopment) {\r\n    return [...ALLOWED_ORIGINS_PRODUCTION, ...ALLOWED_ORIGINS_DEVELOPMENT];\r\n  }\r\n  \r\n  return ALLOWED_ORIGINS_PRODUCTION;\r\n}\r\n\r\n/**\r\n * Check if origin is allowed\r\n */\r\nfunction isOriginAllowed(origin: string | null, context: APIContext): boolean {\r\n  if (!origin) return false;\r\n  \r\n  const allowedOrigins = getAllowedOrigins(context);\r\n  return allowedOrigins.includes(origin);\r\n}\r\n\r\n/**\r\n * CORS middleware handler\r\n */\r\nexport async function corsMiddleware(\r\n  context: APIContext,\r\n  next: () => Promise<Response>\r\n): Promise<Response> {\r\n  const { request } = context;\r\n  const origin = request.headers.get('origin');\r\n  \r\n  // Handle preflight requests\r\n  if (request.method === 'OPTIONS') {\r\n    if (origin && isOriginAllowed(origin, context)) {\r\n      return new Response(null, {\r\n        status: 204,\r\n        headers: {\r\n          'Access-Control-Allow-Origin': origin,\r\n          'Access-Control-Allow-Methods': ALLOWED_METHODS.join(', '),\r\n          'Access-Control-Allow-Headers': ALLOWED_HEADERS.join(', '),\r\n          'Access-Control-Max-Age': MAX_AGE.toString(),\r\n          'Access-Control-Allow-Credentials': 'true',\r\n        },\r\n      });\r\n    } else {\r\n      // Reject preflight from unauthorized origins\r\n      return new Response('CORS policy: Origin not allowed', {\r\n        status: 403,\r\n        headers: {\r\n          'Content-Type': 'text/plain',\r\n        },\r\n      });\r\n    }\r\n  }\r\n  \r\n  // Process the request\r\n  const response = await next();\r\n  \r\n  // Add CORS headers to response if origin is allowed\r\n  if (origin && isOriginAllowed(origin, context)) {\r\n    response.headers.set('Access-Control-Allow-Origin', origin);\r\n    response.headers.set('Access-Control-Allow-Credentials', 'true');\r\n    response.headers.set('Vary', 'Origin');\r\n  }\r\n  \r\n  return response;\r\n}\r\n\r\n/**\r\n * Get CORS headers for a specific origin\r\n * Used for manual CORS handling in specific endpoints if needed\r\n */\r\nexport function getCorsHeaders(origin: string | null, context: APIContext): Record<string, string> {\r\n  if (!origin || !isOriginAllowed(origin, context)) {\r\n    return {};\r\n  }\r\n  \r\n  return {\r\n    'Access-Control-Allow-Origin': origin,\r\n    'Access-Control-Allow-Credentials': 'true',\r\n    'Vary': 'Origin',\r\n  };\r\n}","import type { APIContext, MiddlewareHandler } from 'astro';\r\nimport { corsMiddleware } from './cors';\r\n\r\n// Rate limiting configuration\r\nconst RATE_LIMIT_WINDOW = 60 * 1000; // 1 minute window\r\nconst RATE_LIMIT_MAX_REQUESTS = 60; // 60 requests per minute\r\nconst RATE_LIMIT_BURST = 10; // Allow burst of 10 requests\r\n\r\n// Security headers configuration\r\nconst SECURITY_HEADERS = {\r\n  'X-Content-Type-Options': 'nosniff',\r\n  'X-Frame-Options': 'DENY',\r\n  'X-XSS-Protection': '1; mode=block',\r\n  'Referrer-Policy': 'strict-origin-when-cross-origin',\r\n  'Permissions-Policy': 'geolocation=(), microphone=(), camera=()',\r\n  'Content-Security-Policy': \"default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self'; frame-ancestors 'none';\",\r\n  'Strict-Transport-Security': 'max-age=31536000; includeSubDomains; preload'\r\n};\r\n\r\n// Helper to get client IP\r\nfunction getClientIP(request: Request): string {\r\n  return request.headers.get('CF-Connecting-IP') || \r\n         request.headers.get('X-Forwarded-For')?.split(',')[0] || \r\n         'unknown';\r\n}\r\n\r\n// Rate limiting middleware\r\nasync function rateLimitMiddleware(context: APIContext, next: () => Promise<Response>): Promise<Response> {\r\n  const { request, locals } = context;\r\n  const env = locals.runtime?.env;\r\n  \r\n  // Skip rate limiting for static assets\r\n  const url = new URL(request.url);\r\n  if (url.pathname.startsWith('/_astro') || \r\n      url.pathname.startsWith('/favicon') ||\r\n      url.pathname.endsWith('.css') ||\r\n      url.pathname.endsWith('.js') ||\r\n      url.pathname.endsWith('.png') ||\r\n      url.pathname.endsWith('.jpg') ||\r\n      url.pathname.endsWith('.svg') ||\r\n      url.pathname.endsWith('.ico')) {\r\n    return next();\r\n  }\r\n\r\n  // Check if KV namespace is available\r\n  if (!env?.CACHE_KV) {\r\n    console.warn('Rate limiting disabled: CACHE_KV namespace not available');\r\n    return next();\r\n  }\r\n\r\n  const clientIP = getClientIP(request);\r\n  const rateLimitKey = `rate_limit:${clientIP}`;\r\n  \r\n  try {\r\n    // Get current rate limit data\r\n    const rateLimitData = await env.CACHE_KV.get(rateLimitKey, { type: 'json' }) as {\r\n      count: number;\r\n      resetAt: number;\r\n      tokens: number;\r\n    } | null;\r\n\r\n    const now = Date.now();\r\n    let count = 0;\r\n    let resetAt = now + RATE_LIMIT_WINDOW;\r\n    let tokens = RATE_LIMIT_BURST;\r\n\r\n    if (rateLimitData) {\r\n      // Check if window has expired\r\n      if (rateLimitData.resetAt <= now) {\r\n        // Reset the window\r\n        count = 0;\r\n        resetAt = now + RATE_LIMIT_WINDOW;\r\n        tokens = RATE_LIMIT_BURST;\r\n      } else {\r\n        count = rateLimitData.count;\r\n        resetAt = rateLimitData.resetAt;\r\n        tokens = rateLimitData.tokens;\r\n        \r\n        // Regenerate tokens over time\r\n        const elapsed = now - (resetAt - RATE_LIMIT_WINDOW);\r\n        const tokensToAdd = Math.floor(elapsed / (RATE_LIMIT_WINDOW / RATE_LIMIT_BURST));\r\n        tokens = Math.min(RATE_LIMIT_BURST, tokens + tokensToAdd);\r\n      }\r\n    }\r\n\r\n    // Check rate limit\r\n    if (count >= RATE_LIMIT_MAX_REQUESTS && tokens <= 0) {\r\n      const retryAfter = Math.ceil((resetAt - now) / 1000);\r\n      return new Response(JSON.stringify({ \r\n        error: 'Too many requests', \r\n        retryAfter \r\n      }), {\r\n        status: 429,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Retry-After': retryAfter.toString(),\r\n          'X-RateLimit-Limit': RATE_LIMIT_MAX_REQUESTS.toString(),\r\n          'X-RateLimit-Remaining': '0',\r\n          'X-RateLimit-Reset': new Date(resetAt).toISOString()\r\n        }\r\n      });\r\n    }\r\n\r\n    // Use a token if available, otherwise increment count\r\n    if (tokens > 0) {\r\n      tokens--;\r\n    } else {\r\n      count++;\r\n    }\r\n\r\n    // Update rate limit data\r\n    await env.CACHE_KV.put(rateLimitKey, JSON.stringify({\r\n      count,\r\n      resetAt,\r\n      tokens\r\n    }), {\r\n      expirationTtl: Math.ceil(RATE_LIMIT_WINDOW / 1000) + 60 // Add buffer\r\n    });\r\n\r\n    // Add rate limit headers to response\r\n    const response = await next();\r\n    const remaining = Math.max(0, RATE_LIMIT_MAX_REQUESTS - count);\r\n    \r\n    response.headers.set('X-RateLimit-Limit', RATE_LIMIT_MAX_REQUESTS.toString());\r\n    response.headers.set('X-RateLimit-Remaining', remaining.toString());\r\n    response.headers.set('X-RateLimit-Reset', new Date(resetAt).toISOString());\r\n    response.headers.set('X-RateLimit-Burst', tokens.toString());\r\n\r\n    return response;\r\n  } catch (error) {\r\n    console.error('Rate limiting error:', error);\r\n    // Continue without rate limiting on error\r\n    return next();\r\n  }\r\n}\r\n\r\n// Security headers middleware\r\nasync function securityHeadersMiddleware(context: APIContext, next: () => Promise<Response>): Promise<Response> {\r\n  const response = await next();\r\n  \r\n  // Apply security headers\r\n  Object.entries(SECURITY_HEADERS).forEach(([header, value]) => {\r\n    response.headers.set(header, value);\r\n  });\r\n\r\n  return response;\r\n}\r\n\r\n// Combine all middleware\r\nexport const onRequest: MiddlewareHandler = async (context, next) => {\r\n  // Apply CORS first\r\n  return corsMiddleware(context, () =>\r\n    // Then rate limiting\r\n    rateLimitMiddleware(context, () =>\r\n      // Then apply security headers\r\n      securityHeadersMiddleware(context, next)\r\n    )\r\n  );\r\n};"],"names":["onRequest"],"mappings":"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"}