{"version":3,"mappings":";mLAiBA,SAAwBA,EAAaC,EAAwC,CAC3E,KAAM,CAACC,EAAQC,CAAS,EAAIC,WAAc,IAAI,EACxC,CAACC,EAAWC,CAAY,EAAIF,WAAS,EAAI,EACzC,CAACG,EAAOC,CAAQ,EAAIJ,WAAwB,IAAI,EAEtDK,YAAU,IAAM,EAEK,SAAY,CAC7B,GAAI,CAEF,MAAMC,EAAgB,MAAAC,EAAA,IAAM,OAAO,+BAAiB,gCACpDR,EAAU,IAAMO,EAAc,MAAM,EACpCJ,EAAa,EAAK,CACpB,OAASM,EAAK,CACZ,QAAQ,MAAM,2BAA4BA,CAAG,EAC7CJ,EAAS,iCAAiC,EAC1CF,EAAa,EAAK,CACpB,CACF,GAEA,CACF,EAAG,EAAE,EAGL,MAAMO,EAAkBC,GAAgB,CACtC,MAAMC,EAAUD,EAAO,KACvB,QAAQ,IAAI,oBAAqBC,CAAO,EAEpCd,EAAM,UACRA,EAAM,SAASc,CAAO,CAE1B,EAGMC,EAAiB,IAAM,CAE3B,GAAIf,EAAM,WACR,OAAOA,EAAM,WAIf,GAAIA,EAAM,SACR,GAAI,CAGF,GAAI,OAAO,OAAW,IAAa,CAEjC,KAAM,CAAE,aAAAgB,CAAA,EAAiB,QAAQ,+BAA+B,EAChE,OAAOA,EAAahB,EAAM,QAAQ,CACpC,CAEA,MAAM,IAAI,MAAM,kBAAkB,CACpC,MAAQ,CAEN,MAAO,CACL,MAAOA,EAAM,SAAS,OAAS,SAC/B,MAAO,CAAC,CACN,KAAM,QACN,SAAU,EAAC,CACZ,EAEL,CAIF,MAAO,CACL,MAAO,cACP,MAAO,CAAC,CACN,KAAM,QACN,SAAU,CACR,CACE,KAAM,OACN,KAAM,OACN,MAAO,qBACP,WAAY,IAEd,CACE,KAAM,aACN,KAAM,aACN,MAAO,sCACP,QAAS,CAAC,YAAa,OAAQ,OAAQ,MAAM,EAC7C,WAAY,IAEd,CACE,KAAM,UACN,KAAM,WACN,MAAO,2BACP,KAAM,EACR,CACF,CACD,EAEL,EAGA,GAAII,EACF,OACEa,MAAC,OAAI,cAAY,gBAAgB,aAAW,SAAS,UAAU,MAC7D,SAAAA,MAAC,OAAI,UAAU,cAAc,6BAAiB,EAChD,EAKJ,GAAIX,GAAS,CAACL,EACZ,OACEgB,MAAC,OAAI,cAAY,gBAAgB,aAAW,SAAS,UAAU,MAC7D,SAAAC,OAAC,OAAI,UAAU,eAAe,oBAAQZ,GAAS,kCAAiC,EAClF,EAKJ,MAAMa,EAAaJ,EAAA,EAGb,CAACK,EAAOC,CAAQ,EAAIlB,WAAc,IAAI,EAC5CK,mBAAU,IAAM,CACd,IAAIc,EAAU,GACd,OAAC,SAAY,CACX,GAAI,CACF,KAAM,CAAE,MAAAC,CAAA,EAAU,MAAAb,EAAA,sBAAAa,GAAA,KAAM,QAAO,2BAAa,eAAAA,CAAA,OAC5C,GAAI,CAACD,EAAS,OACdD,EAAS,IAAIE,EAAMJ,CAAU,CAAC,CAChC,MAAQ,CACN,GAAI,CAACG,EAAS,OAEdD,EAASF,CAAU,CACrB,CACF,KACO,IAAM,CACXG,EAAU,EACZ,CAEF,EAAG,CAAC,KAAK,UAAUH,CAAU,CAAC,CAAC,EAG7BF,MAAC,OAAI,cAAY,gBAAgB,aAAW,SAAS,UAAU,mBAC5D,SAAAG,EACCH,MAAChB,GAAO,MAAAmB,EAAc,WAAYR,EAAgB,EAElDK,MAAC,OAAI,UAAU,cAAc,6BAAiB,EAElD,CAEJ","names":["SurveyIsland","props","Survey","setSurvey","useState","isLoading","setIsLoading","error","setError","useEffect","surveyReactUI","__vitePreload","err","handleComplete","sender","results","getSurveyModel","toSurveyJSON","jsx","jsxs","surveyJson","model","setModel","mounted","Model"],"ignoreList":[],"sources":["../../src/components/islands/survey/SurveyIsland.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport type { ReactElement } from 'react';\r\n// Static CSS import so Vite bundles SurveyJS theme\r\n// Kept at top-level (client-only component) to avoid SSR issues\r\n// Use a locally-bundled minimal CSS to avoid Vite deep-import resolution issues.\r\n// The file simply re-exports the SurveyJS CDN CSS.\r\nimport './survey-theme.css';\r\n\r\n// Keep loose typing to avoid heavy imports\r\ninterface SurveyIslandProps {\r\n  template?: any;\r\n  surveyJson?: any; // Direct SurveyJS JSON model\r\n  onSubmit?: (data: Record<string, unknown>) => void;\r\n}\r\n\r\nexport default function SurveyIsland(props: SurveyIslandProps): ReactElement {\r\n  const [Survey, setSurvey] = useState<any>(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    // Dynamic import to avoid SSR issues\r\n    const loadSurvey = async () => {\r\n      try {\r\n        // Import SurveyJS components dynamically (JS only)\r\n        const surveyReactUI = await import('survey-react-ui');\r\n        setSurvey(() => surveyReactUI.Survey);\r\n        setIsLoading(false);\r\n      } catch (err) {\r\n        console.error('Failed to load SurveyJS:', err);\r\n        setError('Failed to load survey component');\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    loadSurvey();\r\n  }, []);\r\n\r\n  // Handle survey completion\r\n  const handleComplete = (sender: any) => {\r\n    const results = sender.data;\r\n    console.log('Survey completed:', results);\r\n    \r\n    if (props.onSubmit) {\r\n      props.onSubmit(results);\r\n    }\r\n  };\r\n\r\n  // Prepare survey model\r\n  const getSurveyModel = () => {\r\n    // If direct SurveyJS JSON is provided, use it\r\n    if (props.surveyJson) {\r\n      return props.surveyJson;\r\n    }\r\n    \r\n    // If template is provided, convert it (fallback to adapter if needed)\r\n    if (props.template) {\r\n      try {\r\n        // Try to use the adapter if available, but avoid ESM/CJS import issues during type-check\r\n        // We access via dynamic import at runtime only; for type-check, fall back below.\r\n        if (typeof window !== 'undefined') {\r\n          // eslint-disable-next-line @typescript-eslint/no-var-requires\r\n          const { toSurveyJSON } = require('../../../lib/surveyjs/adapter');\r\n          return toSurveyJSON(props.template);\r\n        }\r\n        // When SSR/type-checking, avoid importing adapter\r\n        throw new Error('SSR adapter skip');\r\n      } catch {\r\n        // Fallback to a simple conversion\r\n        return {\r\n          title: props.template.title || 'Survey',\r\n          pages: [{\r\n            name: 'page1',\r\n            elements: []\r\n          }]\r\n        };\r\n      }\r\n    }\r\n\r\n    // Default demo survey if nothing provided\r\n    return {\r\n      title: 'Demo Survey',\r\n      pages: [{\r\n        name: 'page1',\r\n        elements: [\r\n          {\r\n            type: 'text',\r\n            name: 'name',\r\n            title: 'What is your name?',\r\n            isRequired: true\r\n          },\r\n          {\r\n            type: 'radiogroup',\r\n            name: 'experience',\r\n            title: 'How would you rate your experience?',\r\n            choices: ['Excellent', 'Good', 'Fair', 'Poor'],\r\n            isRequired: true\r\n          },\r\n          {\r\n            type: 'comment',\r\n            name: 'feedback',\r\n            title: 'Any additional feedback?',\r\n            rows: 4\r\n          }\r\n        ]\r\n      }]\r\n    };\r\n  };\r\n\r\n  // Loading state\r\n  if (isLoading) {\r\n    return (\r\n      <div data-testid=\"survey-island\" aria-label=\"Survey\" className=\"p-4\">\r\n        <div className=\"text-center\">Loading survey...</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Error state\r\n  if (error || !Survey) {\r\n    return (\r\n      <div data-testid=\"survey-island\" aria-label=\"Survey\" className=\"p-4\">\r\n        <div className=\"text-red-500\">Error: {error || 'Survey component not available'}</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Render survey\r\n  const surveyJson = getSurveyModel();\r\n\r\n  // Build a SurveyModel instance on the client to avoid mismatches\r\n  const [model, setModel] = useState<any>(null);\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    (async () => {\r\n      try {\r\n        const { Model } = await import('survey-core');\r\n        if (!mounted) return;\r\n        setModel(new Model(surveyJson));\r\n      } catch {\r\n        if (!mounted) return;\r\n        // As a fallback, pass plain JSON; Survey component can handle it\r\n        setModel(surveyJson);\r\n      }\r\n    })();\r\n    return () => {\r\n      mounted = false;\r\n    };\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [JSON.stringify(surveyJson)]);\r\n\r\n  return (\r\n    <div data-testid=\"survey-island\" aria-label=\"Survey\" className=\"survey-container\">\r\n      {model ? (\r\n        <Survey model={model} onComplete={handleComplete} />\r\n      ) : (\r\n        <div className=\"text-center\">Loading survey...</div>\r\n      )}\r\n    </div>\r\n  );\r\n}"],"file":"_astro/SurveyIsland.5C_oKiwy.js"}