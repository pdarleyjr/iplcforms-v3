{"version":3,"file":"api.BiPwSYRr.js","sources":["../../src/lib/api.ts"],"sourcesContent":["interface ApiResponse<T = any> {\r\n  success: boolean;\r\n  data?: T;\r\n  error?: string;\r\n}\r\n\r\nconst safeCompare = async (a: string, b: string): Promise<boolean> => {\r\n  if (typeof a !== \"string\" || typeof b !== \"string\") return false;\r\n  const encoder = new TextEncoder();\r\n  const aEncoded = encoder.encode(a);\r\n  const bEncoded = encoder.encode(b);\r\n  if (aEncoded.length !== bEncoded.length) return false;\r\n  // Note: timingSafeEqual is not available in Web Crypto API, using simple comparison\r\n  // In production, use a proper timing-safe comparison\r\n  return a === b;\r\n};\r\n\r\nexport const validateApiTokenResponse = async (request: Request, apiToken: string): Promise<Response | undefined> => {\r\n  const successful = await validateApiToken(request, apiToken);\r\n  if (!successful) {\r\n    return Response.json({ message: \"Invalid API token\" }, { status: 401 });\r\n  }\r\n};\r\n\r\nexport const validateApiToken = async (request: Request, apiToken: string): Promise<boolean> => {\r\n  try {\r\n    if (!request?.headers?.get) {\r\n      console.error(\"Invalid request object\");\r\n      return false;\r\n    }\r\n\r\n    if (!apiToken) {\r\n      console.error(\r\n        \"No API token provided. Set one as an environment variable.\",\r\n      );\r\n      return false;\r\n    }\r\n\r\n    const authHeader = request.headers.get(\"authorization\");\r\n    const customTokenHeader = request.headers.get(\"x-api-token\");\r\n\r\n    let tokenToValidate = customTokenHeader;\r\n\r\n    if (authHeader) {\r\n      if (authHeader.startsWith(\"Bearer \")) {\r\n        tokenToValidate = authHeader.substring(7);\r\n      } else if (authHeader.startsWith(\"Token \")) {\r\n        tokenToValidate = authHeader.substring(6);\r\n      } else {\r\n        tokenToValidate = authHeader;\r\n      }\r\n    }\r\n\r\n    if (!tokenToValidate || tokenToValidate.length === 0) return false;\r\n\r\n    return await safeCompare(apiToken.trim(), tokenToValidate.trim());\r\n  } catch (error) {\r\n    console.error(\"Error validating API token:\", error);\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const getCustomers = async (baseUrl: string, apiToken: string): Promise<ApiResponse<{ customers: any[] }>> => {\r\n  const url = `${baseUrl}/api/customers`;\r\n  const response = await fetch(url, {\r\n    headers: {\r\n      Authorization: `Bearer ${apiToken}`,\r\n    },\r\n  });\r\n  if (response.ok) {\r\n    const data = await response.json() as { customers: any[] };\r\n    return {\r\n      success: true,\r\n      data: { customers: data.customers },\r\n    };\r\n  } else {\r\n    console.error(\"Failed to fetch customers\");\r\n    return {\r\n      success: false,\r\n      data: { customers: [] },\r\n    };\r\n  }\r\n};\r\n\r\nexport const getCustomer = async (id: string | number, baseUrl: string, apiToken: string): Promise<ApiResponse<{ customer: any }>> => {\r\n  const response = await fetch(baseUrl + \"/api/customers/\" + id, {\r\n    headers: {\r\n      Authorization: `Bearer ${apiToken}`,\r\n    },\r\n  });\r\n  if (response.ok) {\r\n    const data = await response.json() as { customer: any };\r\n    return {\r\n      success: true,\r\n      data: { customer: data.customer },\r\n    };\r\n  } else {\r\n    console.error(\"Failed to fetch customers\");\r\n    return {\r\n      success: false,\r\n      data: { customer: null },\r\n    };\r\n  }\r\n};\r\n\r\nexport const createCustomer = async (baseUrl: string, apiToken: string, customer: any): Promise<ApiResponse<{ customer: any }>> => {\r\n  const response = await fetch(baseUrl + \"/api/customers\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      Authorization: `Bearer ${apiToken}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(customer),\r\n  });\r\n  if (response.ok) {\r\n    const data = await response.json() as { customer: any };\r\n    return {\r\n      success: true,\r\n      data: { customer: data.customer },\r\n    };\r\n  } else {\r\n    console.error(\"Failed to create customer\");\r\n    return {\r\n      success: false,\r\n      data: { customer: null },\r\n    };\r\n  }\r\n};\r\n\r\nexport const createSubscription = async (baseUrl: string, apiToken: string, subscription: any): Promise<ApiResponse<{ subscription: any }>> => {\r\n  const response = await fetch(baseUrl + \"/api/subscriptions\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      Authorization: `Bearer ${apiToken}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(subscription),\r\n  });\r\n  if (response.ok) {\r\n    const data = await response.json() as { subscription: any };\r\n    return {\r\n      success: true,\r\n      data: { subscription: data.subscription },\r\n    };\r\n  } else {\r\n    console.error(\"Failed to create subscription\");\r\n    return {\r\n      success: false,\r\n      data: { subscription: null },\r\n    };\r\n  }\r\n};\r\n\r\nexport const getSubscriptions = async (baseUrl: string, apiToken: string): Promise<ApiResponse<{ subscriptions: any[] }>> => {\r\n  const response = await fetch(baseUrl + \"/api/subscriptions\", {\r\n    headers: {\r\n      Authorization: `Bearer ${apiToken}`,\r\n    },\r\n  });\r\n  if (response.ok) {\r\n    const data = await response.json() as { subscriptions: any[] };\r\n    return {\r\n      success: true,\r\n      data: { subscriptions: data.subscriptions },\r\n    };\r\n  } else {\r\n    console.error(\"Failed to fetch subscriptions\");\r\n    return {\r\n      success: false,\r\n      data: { subscriptions: [] },\r\n    };\r\n  }\r\n};\r\n\r\nexport const getSubscription = async (id: string | number, baseUrl: string, apiToken: string): Promise<ApiResponse<{ subscription: any }>> => {\r\n  const response = await fetch(baseUrl + \"/api/subscriptions/\" + id, {\r\n    headers: {\r\n      Authorization: `Bearer ${apiToken}`,\r\n    },\r\n  });\r\n  if (response.ok) {\r\n    const data = await response.json() as { subscription: any };\r\n    return {\r\n      success: true,\r\n      data: { subscription: data.subscription },\r\n    };\r\n  } else {\r\n    console.error(\"Failed to fetch subscription\");\r\n    return {\r\n      success: false,\r\n      data: { subscription: null },\r\n    };\r\n  }\r\n};\r\n\r\nexport const getCustomerSubscriptions = async (baseUrl: string, apiToken: string): Promise<ApiResponse<{ customer_subscriptions: any[] }>> => {\r\n  const response = await fetch(baseUrl + \"/api/customer_subscriptions\", {\r\n    headers: {\r\n      Authorization: `Bearer ${apiToken}`,\r\n    },\r\n  });\r\n  if (response.ok) {\r\n    const data = await response.json() as { customer_subscriptions: any[] };\r\n    return {\r\n      success: true,\r\n      data: { customer_subscriptions: data.customer_subscriptions },\r\n    };\r\n  } else {\r\n    console.error(\"Failed to fetch customer subscriptions\");\r\n    return {\r\n      success: false,\r\n      data: { customer_subscriptions: [] },\r\n    };\r\n  }\r\n};\r\n\r\nexport const runCustomerWorkflow = async (id: string | number, baseUrl: string, apiToken: string): Promise<ApiResponse> => {\r\n  const response = await fetch(baseUrl + `/api/customers/${id}/workflow`, {\r\n    headers: {\r\n      Authorization: `Bearer ${apiToken}`,\r\n    },\r\n    method: \"POST\",\r\n  });\r\n  if (response.ok) {\r\n    const data = await response.json();\r\n    return {\r\n      success: true,\r\n    };\r\n  } else {\r\n    console.error(\"Failed to fetch customer subscriptions\");\r\n    return {\r\n      success: false,\r\n    };\r\n  }\r\n};\r\n"],"names":["createCustomer","baseUrl","apiToken","customer","response","createSubscription","subscription","runCustomerWorkflow","id"],"mappings":"AAyGO,MAAMA,EAAiB,MAAOC,EAAiBC,EAAkBC,IAA2D,CACjI,MAAMC,EAAW,MAAM,MAAMH,EAAU,iBAAkB,CACvD,OAAQ,OACR,QAAS,CACP,cAAe,UAAUC,CAAQ,GACjC,eAAgB,kBAAA,EAElB,KAAM,KAAK,UAAUC,CAAQ,CAAA,CAC9B,EACD,OAAIC,EAAS,GAEJ,CACL,QAAS,GACT,KAAM,CAAE,UAHG,MAAMA,EAAS,KAAA,GAGH,QAAA,CAAS,GAGlC,QAAQ,MAAM,2BAA2B,EAClC,CACL,QAAS,GACT,KAAM,CAAE,SAAU,IAAA,CAAK,EAG7B,EAEaC,EAAqB,MAAOJ,EAAiBC,EAAkBI,IAAmE,CAC7I,MAAMF,EAAW,MAAM,MAAMH,EAAU,qBAAsB,CAC3D,OAAQ,OACR,QAAS,CACP,cAAe,UAAUC,CAAQ,GACjC,eAAgB,kBAAA,EAElB,KAAM,KAAK,UAAUI,CAAY,CAAA,CAClC,EACD,OAAIF,EAAS,GAEJ,CACL,QAAS,GACT,KAAM,CAAE,cAHG,MAAMA,EAAS,KAAA,GAGC,YAAA,CAAa,GAG1C,QAAQ,MAAM,+BAA+B,EACtC,CACL,QAAS,GACT,KAAM,CAAE,aAAc,IAAA,CAAK,EAGjC,EAiEaG,EAAsB,MAAOC,EAAqBP,EAAiBC,IAA2C,CACzH,MAAME,EAAW,MAAM,MAAMH,EAAU,kBAAkBO,CAAE,YAAa,CACtE,QAAS,CACP,cAAe,UAAUN,CAAQ,EAAA,EAEnC,OAAQ,MAAA,CACT,EACD,OAAIE,EAAS,IACE,MAAMA,EAAS,KAAA,EACrB,CACL,QAAS,EAAA,IAGX,QAAQ,MAAM,wCAAwC,EAC/C,CACL,QAAS,EAAA,EAGf"}