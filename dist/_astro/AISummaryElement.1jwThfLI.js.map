{"version":3,"file":"AISummaryElement.1jwThfLI.js","sources":["../../node_modules/lucide-react/dist/esm/icons/info.js","../../node_modules/lucide-react/dist/esm/icons/refresh-cw.js","../../src/components/form-builder/components/FieldSelectorDialog.tsx","../../src/components/form-builder/components/AISummaryElement.tsx"],"sourcesContent":["/**\n * @license lucide-react v0.525.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst __iconNode = [\n  [\"circle\", { cx: \"12\", cy: \"12\", r: \"10\", key: \"1mglay\" }],\n  [\"path\", { d: \"M12 16v-4\", key: \"1dtifu\" }],\n  [\"path\", { d: \"M12 8h.01\", key: \"e9boi3\" }]\n];\nconst Info = createLucideIcon(\"info\", __iconNode);\n\nexport { __iconNode, Info as default };\n//# sourceMappingURL=info.js.map\n","/**\n * @license lucide-react v0.525.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst __iconNode = [\n  [\"path\", { d: \"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\", key: \"v9h5vc\" }],\n  [\"path\", { d: \"M21 3v5h-5\", key: \"1q7to0\" }],\n  [\"path\", { d: \"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\", key: \"3uifl3\" }],\n  [\"path\", { d: \"M8 16H3v5\", key: \"1cv678\" }]\n];\nconst RefreshCw = createLucideIcon(\"refresh-cw\", __iconNode);\n\nexport { __iconNode, RefreshCw as default };\n//# sourceMappingURL=refresh-cw.js.map\n","import React, { useState, useMemo } from 'react';\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogDescription,\r\n  DialogFooter,\r\n  DialogHeader,\r\n  DialogTitle,\r\n} from \"@/components/ui/dialog\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Checkbox } from \"@/components/ui/checkbox\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\r\nimport { Info } from \"lucide-react\";\r\nimport type { FormComponent } from \"@/lib/api-form-builder\";\r\n\r\ninterface FieldSelectorDialogProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  allComponents: FormComponent[];\r\n  formData: Record<string, any>;\r\n  preselectedFields?: string[];\r\n  onConfirm: (selectedFields: string[], fieldData: Record<string, any>) => void;\r\n}\r\n\r\nexport const FieldSelectorDialog: React.FC<FieldSelectorDialogProps> = ({\r\n  isOpen,\r\n  onClose,\r\n  allComponents,\r\n  formData,\r\n  preselectedFields = [],\r\n  onConfirm,\r\n}) => {\r\n  const [selectedFields, setSelectedFields] = useState<Set<string>>(\r\n    new Set(preselectedFields)\r\n  );\r\n\r\n  // Filter out AI summary components and empty fields\r\n  const selectableFields = useMemo(() => {\r\n    return allComponents.filter(component => {\r\n      // Exclude AI summary components\r\n      if (component.type === 'ai_summary') return false;\r\n      \r\n      // Exclude fields with no data\r\n      const fieldValue = formData[component.id];\r\n      if (fieldValue === undefined || fieldValue === null || fieldValue === '') return false;\r\n      \r\n      // For arrays, check if empty\r\n      if (Array.isArray(fieldValue) && fieldValue.length === 0) return false;\r\n      \r\n      return true;\r\n    });\r\n  }, [allComponents, formData]);\r\n\r\n  const handleFieldToggle = (fieldId: string) => {\r\n    setSelectedFields(prev => {\r\n      const newSet = new Set(prev);\r\n      if (newSet.has(fieldId)) {\r\n        newSet.delete(fieldId);\r\n      } else {\r\n        newSet.add(fieldId);\r\n      }\r\n      return newSet;\r\n    });\r\n  };\r\n\r\n  const handleSelectAll = () => {\r\n    setSelectedFields(new Set(selectableFields.map(f => f.id)));\r\n  };\r\n\r\n  const handleDeselectAll = () => {\r\n    setSelectedFields(new Set());\r\n  };\r\n\r\n  const handleConfirm = () => {\r\n    const selectedFieldIds = Array.from(selectedFields);\r\n    const selectedFieldData: Record<string, any> = {};\r\n    \r\n    selectedFieldIds.forEach(fieldId => {\r\n      selectedFieldData[fieldId] = formData[fieldId];\r\n    });\r\n    \r\n    onConfirm(selectedFieldIds, selectedFieldData);\r\n  };\r\n\r\n  const getFieldPreview = (component: FormComponent) => {\r\n    const value = formData[component.id];\r\n    \r\n    if (value === null || value === undefined) return '';\r\n    \r\n    // Handle different field types\r\n    switch (component.type) {\r\n      case 'checkbox':\r\n        return Array.isArray(value) ? value.join(', ') : value.toString();\r\n      case 'select':\r\n      case 'radio':\r\n        return value.toString();\r\n      case 'date':\r\n        return new Date(value).toLocaleDateString();\r\n      case 'number':\r\n      case 'scale':\r\n        return value.toString();\r\n      case 'text_input':\r\n      case 'textarea':\r\n        return value.length > 50 ? `${value.substring(0, 50)}...` : value;\r\n      default:\r\n        // For complex clinical components, show a summary\r\n        if (typeof value === 'object') {\r\n          return 'Complex data';\r\n        }\r\n        return value.toString();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Dialog open={isOpen} onOpenChange={onClose}>\r\n      <DialogContent className=\"max-w-2xl\">\r\n        <DialogHeader>\r\n          <DialogTitle>Select Fields for AI Summary</DialogTitle>\r\n          <DialogDescription>\r\n            Choose which form fields should be included in the AI-generated summary.\r\n            Only fields with data are shown.\r\n          </DialogDescription>\r\n        </DialogHeader>\r\n\r\n        <div className=\"space-y-4\">\r\n          <div className=\"flex justify-between items-center\">\r\n            <div className=\"text-sm text-muted-foreground\">\r\n              {selectedFields.size} of {selectableFields.length} fields selected\r\n            </div>\r\n            <div className=\"space-x-2\">\r\n              <Button\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n                onClick={handleSelectAll}\r\n                disabled={selectedFields.size === selectableFields.length}\r\n              >\r\n                Select All\r\n              </Button>\r\n              <Button\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n                onClick={handleDeselectAll}\r\n                disabled={selectedFields.size === 0}\r\n              >\r\n                Deselect All\r\n              </Button>\r\n            </div>\r\n          </div>\r\n\r\n          {selectableFields.length === 0 ? (\r\n            <Alert>\r\n              <Info className=\"h-4 w-4\" />\r\n              <AlertDescription>\r\n                No fields with data available. Please fill out some form fields before generating a summary.\r\n              </AlertDescription>\r\n            </Alert>\r\n          ) : (\r\n            <div className=\"h-[400px] rounded-md border p-4 overflow-y-auto\">\r\n              <div className=\"space-y-4\">\r\n                {selectableFields.map((component) => {\r\n                  const isSelected = selectedFields.has(component.id);\r\n                  const preview = getFieldPreview(component);\r\n                  \r\n                  return (\r\n                    <div\r\n                      key={component.id}\r\n                      className=\"flex items-start space-x-3 p-3 rounded-lg hover:bg-muted/50 transition-colors\"\r\n                    >\r\n                      <Checkbox\r\n                        id={component.id}\r\n                        checked={isSelected}\r\n                        onCheckedChange={() => handleFieldToggle(component.id)}\r\n                      />\r\n                      <div className=\"flex-1 space-y-1\">\r\n                        <Label\r\n                          htmlFor={component.id}\r\n                          className=\"text-sm font-medium cursor-pointer\"\r\n                        >\r\n                          {component.label}\r\n                        </Label>\r\n                        <p className=\"text-sm text-muted-foreground\">\r\n                          Type: {component.type.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase())}\r\n                        </p>\r\n                        {preview && (\r\n                          <p className=\"text-sm text-muted-foreground mt-1\">\r\n                            Preview: {preview}\r\n                          </p>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        <DialogFooter>\r\n          <Button variant=\"outline\" onClick={onClose}>\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            onClick={handleConfirm}\r\n            disabled={selectedFields.size === 0}\r\n          >\r\n            Generate Summary ({selectedFields.size} field{selectedFields.size !== 1 ? 's' : ''})\r\n          </Button>\r\n        </DialogFooter>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default FieldSelectorDialog;","import React, { useState, useEffect } from 'react';\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { Sparkles, Loader2, RefreshCw, AlertCircle } from \"lucide-react\";\r\nimport type { FormComponent } from \"@/lib/api-form-builder\";\r\nimport { FieldSelectorDialog } from \"./FieldSelectorDialog\";\r\n\r\ninterface LiveSummaryResponse {\r\n  success: boolean;\r\n  summary?: string;\r\n  generatedAt?: string;\r\n  error?: string;\r\n  metadata?: {\r\n    tokensUsed?: number;\r\n    processingTime?: number;\r\n  };\r\n}\r\n\r\ninterface AISummaryElementProps {\r\n  component: FormComponent;\r\n  formData?: Record<string, any>;\r\n  allComponents: FormComponent[];\r\n  onUpdate?: (updates: Partial<FormComponent>) => void;\r\n  isLiveForm?: boolean;\r\n  isEditing?: boolean;\r\n}\r\n\r\ninterface AISummaryState {\r\n  summary: string | null;\r\n  generatedAt: Date | null;\r\n  sourceFields: string[];\r\n  isGenerating: boolean;\r\n  showFieldSelector: boolean;\r\n  error: string | null;\r\n  isStale: boolean;\r\n}\r\n\r\nexport const AISummaryElement: React.FC<AISummaryElementProps> = ({\r\n  component,\r\n  formData = {},\r\n  allComponents,\r\n  onUpdate,\r\n  isLiveForm = false,\r\n  isEditing = false,\r\n}) => {\r\n  const [state, setState] = useState<AISummaryState>({\r\n    summary: component.props?.aiSummaryData?.content || null,\r\n    generatedAt: component.props?.aiSummaryData?.generatedAt \r\n      ? new Date(component.props.aiSummaryData.generatedAt) \r\n      : null,\r\n    sourceFields: component.props?.aiSummaryData?.sourceFields || [],\r\n    isGenerating: false,\r\n    showFieldSelector: false,\r\n    error: null,\r\n    isStale: false,\r\n  });\r\n\r\n  // Mark summary as stale when source field data changes\r\n  useEffect(() => {\r\n    if (state.sourceFields.length > 0 && state.summary) {\r\n      const hasChanges = state.sourceFields.some(fieldId => {\r\n        const oldValue = component.props?.aiSummaryData?.sourceData?.[fieldId];\r\n        const newValue = formData[fieldId];\r\n        return JSON.stringify(oldValue) !== JSON.stringify(newValue);\r\n      });\r\n      \r\n      if (hasChanges && !state.isStale) {\r\n        setState(prev => ({ ...prev, isStale: true }));\r\n      }\r\n    }\r\n  }, [formData, state.sourceFields, state.summary, component.props?.aiSummaryData?.sourceData]);\r\n\r\n  const handleGenerateSummary = async () => {\r\n    setState(prev => ({ ...prev, showFieldSelector: true }));\r\n  };\r\n\r\n  const handleFieldSelection = async (selectedFields: string[], fieldData: Record<string, any>) => {\r\n    setState(prev => ({ \r\n      ...prev, \r\n      isGenerating: true, \r\n      showFieldSelector: false,\r\n      error: null \r\n    }));\r\n\r\n    try {\r\n      // Get base URL and API token\r\n      const baseUrl = window.location.origin;\r\n      const apiToken = localStorage.getItem('apiToken') || '';\r\n\r\n      const response = await fetch(`${baseUrl}/api/form-summary-live`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${apiToken}`,\r\n        },\r\n        body: JSON.stringify({\r\n          templateId: component.id,\r\n          elementId: component.id,\r\n          selectedFields,\r\n          fieldData,\r\n          summaryConfig: component.props?.aiSummaryConfig || {},\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to generate summary');\r\n      }\r\n\r\n      const data: LiveSummaryResponse = await response.json();\r\n      \r\n      if (data.success && data.summary) {\r\n        const newSummaryData = {\r\n          content: data.summary,\r\n          generatedAt: data.generatedAt || new Date().toISOString(),\r\n          sourceFields: selectedFields,\r\n          sourceData: fieldData,\r\n        };\r\n\r\n        setState(prev => ({\r\n          ...prev,\r\n          summary: data.summary || null,\r\n          generatedAt: new Date(newSummaryData.generatedAt),\r\n          sourceFields: selectedFields,\r\n          isGenerating: false,\r\n          isStale: false,\r\n        }));\r\n\r\n        // Update the component data\r\n        if (onUpdate) {\r\n          onUpdate({\r\n            props: {\r\n              ...component.props,\r\n              aiSummaryData: newSummaryData,\r\n            },\r\n          });\r\n        }\r\n      } else {\r\n        throw new Error(data.error || 'Failed to generate summary');\r\n      }\r\n    } catch (error) {\r\n      setState(prev => ({\r\n        ...prev,\r\n        isGenerating: false,\r\n        error: error instanceof Error ? error.message : 'An error occurred',\r\n      }));\r\n    }\r\n  };\r\n\r\n  const renderBuilderView = () => (\r\n    <Card className=\"w-full\">\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center gap-2\">\r\n          <Sparkles className=\"h-4 w-4\" />\r\n          {component.label || 'AI Summary'}\r\n        </CardTitle>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <div className=\"space-y-4\">\r\n          <Alert>\r\n            <AlertCircle className=\"h-4 w-4\" />\r\n            <AlertDescription>\r\n              This AI Summary element will allow users to generate summaries from selected form fields.\r\n              Configure the settings below to customize the summary generation.\r\n            </AlertDescription>\r\n          </Alert>\r\n          \r\n          <div className=\"text-sm text-muted-foreground\">\r\n            <p className=\"mb-2\">Configuration options:</p>\r\n            <ul className=\"list-disc list-inside space-y-1\">\r\n              <li>Auto-select fields: {component.props?.aiSummaryConfig?.autoSelectFields ? 'Yes' : 'No'}</li>\r\n              <li>Include medical context: {component.props?.aiSummaryConfig?.includeMedicalContext ? 'Yes' : 'No'}</li>\r\n              <li>Max length: {component.props?.aiSummaryConfig?.maxLength || 'Unlimited'}</li>\r\n              <li>Show source field labels: {component.props?.aiSummaryConfig?.sourceFieldLabels ? 'Yes' : 'No'}</li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n\r\n  const renderLiveFormView = () => (\r\n    <Card className=\"w-full\">\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center justify-between\">\r\n          <span className=\"flex items-center gap-2\">\r\n            <Sparkles className=\"h-4 w-4\" />\r\n            {component.label || 'AI Summary'}\r\n          </span>\r\n          {state.isStale && (\r\n            <Badge variant=\"outline\" className=\"ml-2\">\r\n              Data Changed\r\n            </Badge>\r\n          )}\r\n        </CardTitle>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <div className=\"space-y-4\">\r\n          {state.error && (\r\n            <Alert variant=\"destructive\">\r\n              <AlertCircle className=\"h-4 w-4\" />\r\n              <AlertDescription>{state.error}</AlertDescription>\r\n            </Alert>\r\n          )}\r\n\r\n          {state.summary ? (\r\n            <>\r\n              <Textarea\r\n                value={state.summary}\r\n                readOnly\r\n                className=\"min-h-[150px] resize-none\"\r\n                placeholder=\"AI-generated summary will appear here...\"\r\n              />\r\n              \r\n              <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\r\n                <div>\r\n                  Generated {state.generatedAt?.toLocaleString()}\r\n                </div>\r\n                <Button\r\n                  variant=\"outline\"\r\n                  size=\"sm\"\r\n                  onClick={handleGenerateSummary}\r\n                  disabled={state.isGenerating}\r\n                >\r\n                  {state.isGenerating ? (\r\n                    <>\r\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\r\n                      Regenerating...\r\n                    </>\r\n                  ) : (\r\n                    <>\r\n                      <RefreshCw className=\"mr-2 h-4 w-4\" />\r\n                      Regenerate\r\n                    </>\r\n                  )}\r\n                </Button>\r\n              </div>\r\n\r\n              {state.sourceFields.length > 0 && (\r\n                <div className=\"text-xs text-muted-foreground\">\r\n                  Based on {state.sourceFields.length} field{state.sourceFields.length > 1 ? 's' : ''}\r\n                </div>\r\n              )}\r\n            </>\r\n          ) : (\r\n            <div className=\"text-center py-8\">\r\n              <p className=\"text-muted-foreground mb-4\">\r\n                Click the button below to generate an AI summary from your form responses.\r\n              </p>\r\n              <Button\r\n                onClick={handleGenerateSummary}\r\n                disabled={state.isGenerating}\r\n              >\r\n                {state.isGenerating ? (\r\n                  <>\r\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\r\n                    Generating...\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <Sparkles className=\"mr-2 h-4 w-4\" />\r\n                    Generate Summary\r\n                  </>\r\n                )}\r\n              </Button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </CardContent>\r\n\r\n      {/* Field Selector Dialog will be rendered conditionally */}\r\n      {state.showFieldSelector && (\r\n        <FieldSelectorDialog\r\n          isOpen={state.showFieldSelector}\r\n          onClose={() => setState(prev => ({ ...prev, showFieldSelector: false }))}\r\n          allComponents={allComponents}\r\n          formData={formData}\r\n          preselectedFields={component.props?.aiSummaryConfig?.autoSelectFields \r\n            ? allComponents\r\n                .filter(c => c.type !== 'ai_summary' && formData[c.id])\r\n                .map(c => c.id)\r\n            : state.sourceFields\r\n          }\r\n          onConfirm={handleFieldSelection}\r\n        />\r\n      )}\r\n    </Card>\r\n  );\r\n\r\n  if (isEditing || !isLiveForm) {\r\n    return renderBuilderView();\r\n  }\r\n\r\n  return renderLiveFormView();\r\n};\r\n\r\nexport default AISummaryElement;"],"names":["__iconNode","Info","createLucideIcon","RefreshCw","FieldSelectorDialog","isOpen","onClose","allComponents","formData","preselectedFields","onConfirm","selectedFields","setSelectedFields","useState","selectableFields","useMemo","component","fieldValue","handleFieldToggle","fieldId","prev","newSet","handleSelectAll","f","handleDeselectAll","handleConfirm","selectedFieldIds","selectedFieldData","getFieldPreview","value","jsx","Dialog","jsxs","DialogContent","DialogHeader","DialogTitle","DialogDescription","Button","Alert","AlertDescription","isSelected","preview","Checkbox","Label","l","DialogFooter","AISummaryElement","onUpdate","isLiveForm","isEditing","state","setState","useEffect","oldValue","newValue","handleGenerateSummary","handleFieldSelection","fieldData","baseUrl","apiToken","response","data","newSummaryData","error","renderBuilderView","Card","CardHeader","CardTitle","Sparkles","CardContent","AlertCircle","renderLiveFormView","Badge","Fragment","Textarea","Loader2","c"],"mappings":"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","x_google_ignoreList":[0,1]}