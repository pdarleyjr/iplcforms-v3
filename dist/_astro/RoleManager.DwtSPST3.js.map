{"version":3,"file":"RoleManager.DwtSPST3.js","sources":["../../node_modules/lucide-react/dist/esm/icons/user-check.js","../../src/components/admin/RoleManager.tsx"],"sourcesContent":["/**\n * @license lucide-react v0.525.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst __iconNode = [\n  [\"path\", { d: \"m16 11 2 2 4-4\", key: \"9rsbq5\" }],\n  [\"path\", { d: \"M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2\", key: \"1yyitq\" }],\n  [\"circle\", { cx: \"9\", cy: \"7\", r: \"4\", key: \"nufk8\" }]\n];\nconst UserCheck = createLucideIcon(\"user-check\", __iconNode);\n\nexport { __iconNode, UserCheck as default };\n//# sourceMappingURL=user-check.js.map\n","import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../ui/card';\r\nimport { Button } from '../ui/button';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '../ui/table';\r\nimport { Input } from '../ui/input';\r\nimport { Badge } from '../ui/badge';\r\nimport { Alert, AlertDescription } from '../ui/alert';\r\nimport { Loader2, Shield, UserCheck, AlertCircle } from 'lucide-react';\r\nimport { ROLES } from '../../lib/utils/rbac';\r\n\r\ninterface User {\r\n  id: string;\r\n  email: string;\r\n  name: string;\r\n  role: string;\r\n  license_number?: string;\r\n  organization?: string;\r\n  status: string;\r\n  last_login_at?: string;\r\n}\r\n\r\nexport function RoleManager() {\r\n  const [users, setUsers] = useState<User[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [selectedUser, setSelectedUser] = useState<string | null>(null);\r\n  const [updating, setUpdating] = useState(false);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n\r\n  useEffect(() => {\r\n    fetchUsers();\r\n  }, []);\r\n\r\n  const fetchUsers = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      const response = await fetch('/api/admin/users', {\r\n        headers: {\r\n          'X-Customer-ID': localStorage.getItem('customerId') || ''\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch users');\r\n      }\r\n\r\n      const data = await response.json() as { users: User[] };\r\n      setUsers(data.users);\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'An error occurred');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const updateUserRole = async (userId: string, newRole: string) => {\r\n    try {\r\n      setUpdating(true);\r\n      setError(null);\r\n\r\n      const response = await fetch(`/api/admin/users/${userId}/role`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'X-Customer-ID': localStorage.getItem('customerId') || ''\r\n        },\r\n        body: JSON.stringify({ role: newRole })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to update user role');\r\n      }\r\n\r\n      // Update local state\r\n      setUsers(users.map(user => \r\n        user.id === userId ? { ...user, role: newRole } : user\r\n      ));\r\n      \r\n      setSelectedUser(null);\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'An error occurred');\r\n    } finally {\r\n      setUpdating(false);\r\n    }\r\n  };\r\n\r\n  const filteredUsers = users.filter(user => {\r\n    const searchLower = searchTerm.toLowerCase();\r\n    return (\r\n      user.email.toLowerCase().includes(searchLower) ||\r\n      user.name.toLowerCase().includes(searchLower) ||\r\n      user.role.toLowerCase().includes(searchLower) ||\r\n      (user.organization && user.organization.toLowerCase().includes(searchLower))\r\n    );\r\n  });\r\n\r\n  const getRoleBadgeColor = (role: string) => {\r\n    switch (role) {\r\n      case 'admin':\r\n        return 'destructive';\r\n      case 'clinician':\r\n        return 'default';\r\n      case 'researcher':\r\n        return 'secondary';\r\n      case 'patient':\r\n        return 'outline';\r\n      default:\r\n        return 'default';\r\n    }\r\n  };\r\n\r\n  const getStatusBadgeColor = (status: string) => {\r\n    switch (status) {\r\n      case 'active':\r\n        return 'secondary';\r\n      case 'suspended':\r\n        return 'destructive';\r\n      case 'pending':\r\n        return 'outline';\r\n      default:\r\n        return 'default';\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center p-8\">\r\n        <Loader2 className=\"h-8 w-8 animate-spin\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center gap-2\">\r\n          <Shield className=\"h-5 w-5\" />\r\n          Role Management\r\n        </CardTitle>\r\n        <CardDescription>\r\n          Manage user roles and permissions across the system\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent>\r\n        {error && (\r\n          <Alert variant=\"destructive\" className=\"mb-4\">\r\n            <AlertCircle className=\"h-4 w-4\" />\r\n            <AlertDescription>{error}</AlertDescription>\r\n          </Alert>\r\n        )}\r\n\r\n        <div className=\"mb-4\">\r\n          <Input\r\n            placeholder=\"Search users by email, name, role, or organization...\"\r\n            value={searchTerm}\r\n            onChange={(e) => setSearchTerm(e.target.value)}\r\n            className=\"max-w-md\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"border rounded-lg\">\r\n          <Table>\r\n            <TableHeader>\r\n              <TableRow>\r\n                <TableHead>User</TableHead>\r\n                <TableHead>Role</TableHead>\r\n                <TableHead>Organization</TableHead>\r\n                <TableHead>Status</TableHead>\r\n                <TableHead>Last Login</TableHead>\r\n                <TableHead>Actions</TableHead>\r\n              </TableRow>\r\n            </TableHeader>\r\n            <TableBody>\r\n              {filteredUsers.length === 0 ? (\r\n                <TableRow>\r\n                  <TableCell colSpan={6} className=\"text-center text-muted-foreground\">\r\n                    No users found\r\n                  </TableCell>\r\n                </TableRow>\r\n              ) : (\r\n                filteredUsers.map((user) => (\r\n                  <TableRow key={user.id}>\r\n                    <TableCell>\r\n                      <div>\r\n                        <div className=\"font-medium\">{user.name}</div>\r\n                        <div className=\"text-sm text-muted-foreground\">{user.email}</div>\r\n                        {user.license_number && (\r\n                          <div className=\"text-xs text-muted-foreground\">\r\n                            License: {user.license_number}\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Badge variant={getRoleBadgeColor(user.role)}>\r\n                        {user.role}\r\n                      </Badge>\r\n                    </TableCell>\r\n                    <TableCell>{user.organization || '-'}</TableCell>\r\n                    <TableCell>\r\n                      <Badge variant={getStatusBadgeColor(user.status)}>\r\n                        {user.status}\r\n                      </Badge>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      {user.last_login_at\r\n                        ? new Date(user.last_login_at).toLocaleString()\r\n                        : 'Never'\r\n                      }\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      {selectedUser === user.id ? (\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <Select\r\n                            defaultValue={user.role}\r\n                            onValueChange={(value) => updateUserRole(user.id, value)}\r\n                            disabled={updating}\r\n                          >\r\n                            <SelectTrigger className=\"w-32\">\r\n                              <SelectValue />\r\n                            </SelectTrigger>\r\n                            <SelectContent>\r\n                              {Object.keys(ROLES).map((role) => (\r\n                                <SelectItem key={role} value={role}>\r\n                                  {role}\r\n                                </SelectItem>\r\n                              ))}\r\n                            </SelectContent>\r\n                          </Select>\r\n                          <Button\r\n                            variant=\"ghost\"\r\n                            size=\"sm\"\r\n                            onClick={() => setSelectedUser(null)}\r\n                            disabled={updating}\r\n                          >\r\n                            Cancel\r\n                          </Button>\r\n                        </div>\r\n                      ) : (\r\n                        <Button\r\n                          variant=\"ghost\"\r\n                          size=\"sm\"\r\n                          onClick={() => setSelectedUser(user.id)}\r\n                          className=\"flex items-center gap-1\"\r\n                        >\r\n                          <UserCheck className=\"h-4 w-4\" />\r\n                          Change Role\r\n                        </Button>\r\n                      )}\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}"],"names":["__iconNode","UserCheck","createLucideIcon","RoleManager","users","setUsers","useState","loading","setLoading","error","setError","selectedUser","setSelectedUser","updating","setUpdating","searchTerm","setSearchTerm","useEffect","fetchUsers","response","data","err","updateUserRole","userId","newRole","user","filteredUsers","searchLower","getRoleBadgeColor","role","getStatusBadgeColor","status","jsx","Loader2","Card","jsxs","CardHeader","CardTitle","Shield","CardDescription","CardContent","Alert","AlertCircle","AlertDescription","Input","e","Table","TableHeader","TableRow","TableHead","TableBody","TableCell","Badge","Select","value","SelectTrigger","SelectValue","SelectContent","ROLES","SelectItem","Button"],"mappings":"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","x_google_ignoreList":[0]}