{"version":3,"mappings":"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","names":["convertToSurveyJS","formSchema","surveyJson","page","surveyPage","component","element","convertComponentToSurveyElement","baseElement","condition","operator","opt","field","SurveyRuntime","formData","onComplete","onValueChanged","theme","readOnly","showProgressBar","Survey","setSurvey","useState","surveyModel","setSurveyModel","isLoading","setIsLoading","error","setError","useEffect","surveyModule","__vitePreload","Model","model","sender","options","err","jsxs","jsx"],"ignoreList":[],"sources":["../../src/components/form-builder/SurveyRuntime.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport { useEffect, useState } from 'react';\r\nimport type { FormComponent } from '../../lib/api-form-builder';\r\n\r\n// Type definitions for SurveyJS\r\ninterface SurveyModel {\r\n  data: any;\r\n  onComplete: {\r\n    add: (callback: (sender: any, options: any) => void) => void;\r\n  };\r\n  onValueChanged: {\r\n    add: (callback: (sender: any, options: any) => void) => void;\r\n  };\r\n  render: (elementId?: string) => void;\r\n  dispose: () => void;\r\n}\r\n\r\ninterface SurveyReactUI {\r\n  Model: new (json: any) => SurveyModel;\r\n  Survey: React.ComponentType<{\r\n    model: SurveyModel;\r\n    onComplete?: (sender: any, options: any) => void;\r\n    onValueChanged?: (sender: any, options: any) => void;\r\n  }>;\r\n  StylesManager: {\r\n    applyTheme: (theme: string) => void;\r\n  };\r\n}\r\n\r\ninterface SurveyRuntimeProps {\r\n  formSchema?: {\r\n    components?: FormComponent[];\r\n    pages?: any[];\r\n    isMultiPage?: boolean;\r\n  };\r\n  formData?: Record<string, any>;\r\n  onComplete?: (data: Record<string, any>) => void;\r\n  onValueChanged?: (name: string, value: any) => void;\r\n  theme?: 'default' | 'modern' | 'bootstrap';\r\n  readOnly?: boolean;\r\n  showProgressBar?: 'top' | 'bottom' | 'both' | 'none';\r\n}\r\n\r\n// Convert our form schema to SurveyJS format\r\nfunction convertToSurveyJS(formSchema: SurveyRuntimeProps['formSchema']): any {\r\n  if (!formSchema) {\r\n    return { pages: [], showProgressBar: 'top' };\r\n  }\r\n\r\n  const surveyJson: any = {\r\n    showProgressBar: 'top',\r\n    showQuestionNumbers: 'off',\r\n    pages: []\r\n  };\r\n\r\n  // Handle multi-page forms\r\n  if (formSchema.isMultiPage && formSchema.pages) {\r\n    formSchema.pages.forEach((page) => {\r\n      const surveyPage: any = {\r\n        name: page.id,\r\n        title: page.title,\r\n        description: page.description,\r\n        elements: []\r\n      };\r\n\r\n      if (page.components) {\r\n        page.components.forEach((component: FormComponent) => {\r\n          const element = convertComponentToSurveyElement(component);\r\n          if (element) {\r\n            surveyPage.elements.push(element);\r\n          }\r\n        });\r\n      }\r\n\r\n      surveyJson.pages.push(surveyPage);\r\n    });\r\n  } else if (formSchema.components) {\r\n    // Single page form\r\n    const page: any = {\r\n      name: 'page1',\r\n      elements: []\r\n    };\r\n\r\n    formSchema.components.forEach((component) => {\r\n      const element = convertComponentToSurveyElement(component);\r\n      if (element) {\r\n        page.elements.push(element);\r\n      }\r\n    });\r\n\r\n    surveyJson.pages.push(page);\r\n  }\r\n\r\n  return surveyJson;\r\n}\r\n\r\nfunction convertComponentToSurveyElement(component: FormComponent): any {\r\n  const baseElement: any = {\r\n    name: component.id,\r\n    title: component.label,\r\n    isRequired: component.props?.required || false\r\n  };\r\n\r\n  // Add description if present\r\n  if (component.props?.description) {\r\n    baseElement.description = component.props.description;\r\n  }\r\n\r\n  // Add placeholder if present\r\n  if (component.props?.placeholder) {\r\n    baseElement.placeholder = component.props.placeholder;\r\n  }\r\n\r\n  // Handle conditional logic (visibility condition)\r\n  if (component.props?.visibilityCondition) {\r\n    const condition = component.props.visibilityCondition;\r\n    if (condition.field && condition.value !== undefined) {\r\n      // SurveyJS visibility expression\r\n      const operator = condition.operator === 'equals' ? '=' :\r\n                       condition.operator === 'not_equals' ? '!=' :\r\n                       condition.operator === 'contains' ? 'contains' : '=';\r\n      \r\n      baseElement.visibleIf = `{${condition.field}} ${operator} '${condition.value}'`;\r\n    }\r\n  }\r\n\r\n  // Convert based on component type\r\n  switch (component.type) {\r\n    case 'text_input':\r\n      return {\r\n        ...baseElement,\r\n        type: 'text',\r\n        maxLength: component.props?.validation?.maxLength\r\n      };\r\n\r\n    case 'textarea':\r\n      return {\r\n        ...baseElement,\r\n        type: 'comment',\r\n        rows: 4,\r\n        maxLength: component.props?.validation?.maxLength\r\n      };\r\n\r\n    case 'number':\r\n      return {\r\n        ...baseElement,\r\n        type: 'text',\r\n        inputType: 'number',\r\n        min: component.props?.min || component.props?.validation?.min,\r\n        max: component.props?.max || component.props?.validation?.max\r\n      };\r\n\r\n    case 'date':\r\n      return {\r\n        ...baseElement,\r\n        type: 'text',\r\n        inputType: 'date'\r\n      };\r\n\r\n    case 'select':\r\n      return {\r\n        ...baseElement,\r\n        type: 'dropdown',\r\n        choices: component.props?.options?.map((opt: string) => ({\r\n          value: opt,\r\n          text: opt\r\n        })) || []\r\n      };\r\n\r\n    case 'radio':\r\n      return {\r\n        ...baseElement,\r\n        type: 'radiogroup',\r\n        choices: component.props?.options?.map((opt: string) => ({\r\n          value: opt,\r\n          text: opt\r\n        })) || []\r\n      };\r\n\r\n    case 'checkbox':\r\n      return {\r\n        ...baseElement,\r\n        type: 'checkbox',\r\n        choices: component.props?.options?.map((opt: string) => ({\r\n          value: opt,\r\n          text: opt\r\n        })) || []\r\n      };\r\n\r\n    case 'scale':\r\n    case 'clinical_scale':\r\n      return {\r\n        ...baseElement,\r\n        type: 'rating',\r\n        rateMin: component.props?.min || 1,\r\n        rateMax: component.props?.max || 5,\r\n        minRateDescription: component.props?.labels?.[0],\r\n        maxRateDescription: component.props?.labels?.[component.props?.labels?.length - 1]\r\n      };\r\n\r\n    case 'clinical_signature':\r\n      return {\r\n        ...baseElement,\r\n        type: 'signaturepad',\r\n        width: 300,\r\n        height: 200\r\n      };\r\n\r\n    case 'title_subtitle':\r\n      return {\r\n        type: 'html',\r\n        name: component.id,\r\n        html: `<h2>${component.props?.text || component.label || ''}</h2>`\r\n      };\r\n\r\n    case 'subtitle':\r\n      return {\r\n        type: 'html',\r\n        name: component.id,\r\n        html: `<h3>${component.props?.text || component.label || ''}</h3>`\r\n      };\r\n\r\n    case 'line_separator':\r\n      return {\r\n        type: 'html',\r\n        name: component.id,\r\n        html: '<hr style=\"margin: 20px 0; border: none; border-top: 1px solid #e5e7eb;\" />'\r\n      };\r\n\r\n    case 'ai_summary':\r\n      // AI summary would be handled separately, return null for now\r\n      return null;\r\n\r\n    case 'evaluation_section':\r\n      // Evaluation sections are containers, handle their fields\r\n      return {\r\n        type: 'panel',\r\n        name: component.id,\r\n        title: component.label,\r\n        elements: component.fields?.map((field: any) => ({\r\n          type: 'text',\r\n          name: field.id || field.name,\r\n          title: field.label || field.name\r\n        })) || []\r\n      };\r\n\r\n    case 'demographics':\r\n    case 'standardized_test':\r\n    case 'oral_motor':\r\n    case 'language_sample':\r\n    case 'sensory_processing':\r\n    case 'goals_planning':\r\n    case 'cpt_code':\r\n    case 'assistance_level':\r\n    case 'clinical_component':\r\n      // For clinical components, create a panel with structured fields\r\n      return {\r\n        type: 'panel',\r\n        name: component.id,\r\n        title: component.label,\r\n        elements: component.fields?.map((field: any) => ({\r\n          type: field.type === 'select' ? 'dropdown' :\r\n                field.type === 'checkbox' ? 'checkbox' :\r\n                field.type === 'radio' ? 'radiogroup' : 'text',\r\n          name: field.id || field.name,\r\n          title: field.label || field.name,\r\n          choices: field.options?.map((opt: any) => ({\r\n            value: typeof opt === 'string' ? opt : opt.value,\r\n            text: typeof opt === 'string' ? opt : opt.label\r\n          }))\r\n        })) || [{\r\n          type: 'html',\r\n          html: `<div class=\"clinical-component\">${component.label || component.type}</div>`\r\n        }]\r\n      };\r\n\r\n    default:\r\n      // For unknown components, create a panel with HTML\r\n      return {\r\n        type: 'panel',\r\n        name: component.id,\r\n        title: component.label,\r\n        elements: [{\r\n          type: 'html',\r\n          html: `<div class=\"custom-component\">${component.label || component.type}</div>`\r\n        }]\r\n      };\r\n  }\r\n}\r\n\r\nconst SurveyRuntime: React.FC<SurveyRuntimeProps> = ({\r\n  formSchema,\r\n  formData = {},\r\n  onComplete,\r\n  onValueChanged,\r\n  theme = 'modern',\r\n  readOnly = false,\r\n  showProgressBar = 'top'\r\n}) => {\r\n  const [Survey, setSurvey] = useState<any>(null);\r\n  const [surveyModel, setSurveyModel] = useState<SurveyModel | null>(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    // Dynamically import SurveyJS only on client side\r\n    const loadSurvey = async () => {\r\n      try {\r\n        const surveyModule = await import('survey-react-ui');\r\n        const Survey = surveyModule.Survey;\r\n        const Model = surveyModule.Model;\r\n        \r\n        // Try to apply theme if StylesManager is available\r\n        if ('StylesManager' in surveyModule) {\r\n          const StylesManager = (surveyModule as any).StylesManager;\r\n          StylesManager.applyTheme(theme);\r\n        }\r\n\r\n        // Convert our schema to SurveyJS format\r\n        const surveyJson = convertToSurveyJS(formSchema);\r\n        surveyJson.showProgressBar = showProgressBar;\r\n\r\n        // Create survey model\r\n        const model = new Model(surveyJson);\r\n\r\n        // Set initial data if provided\r\n        if (formData && Object.keys(formData).length > 0) {\r\n          model.data = formData;\r\n        }\r\n\r\n        // Set read-only mode\r\n        if (readOnly) {\r\n          (model as any).mode = 'display';\r\n        }\r\n\r\n        // Add event handlers\r\n        if (onComplete) {\r\n          model.onComplete.add((sender: any, options: any) => {\r\n            onComplete(sender.data);\r\n          });\r\n        }\r\n\r\n        if (onValueChanged) {\r\n          model.onValueChanged.add((sender: any, options: any) => {\r\n            onValueChanged(options.name, options.value);\r\n          });\r\n        }\r\n\r\n        setSurvey(Survey);\r\n        setSurveyModel(model);\r\n        setIsLoading(false);\r\n      } catch (err) {\r\n        console.error('Failed to load SurveyJS:', err);\r\n        setError('Failed to load survey component');\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    // Only load on client side\r\n    if (typeof window !== 'undefined') {\r\n      loadSurvey();\r\n    }\r\n\r\n    // Cleanup\r\n    return () => {\r\n      if (surveyModel) {\r\n        surveyModel.dispose();\r\n      }\r\n    };\r\n  }, [formSchema, theme, readOnly, showProgressBar]);\r\n\r\n  // Update data when formData prop changes\r\n  useEffect(() => {\r\n    if (surveyModel && formData) {\r\n      surveyModel.data = formData;\r\n    }\r\n  }, [formData, surveyModel]);\r\n\r\n  if (typeof window === 'undefined') {\r\n    // SSR - return loading placeholder\r\n    return (\r\n      <div className=\"flex items-center justify-center min-h-[400px] bg-gray-50 rounded-lg\">\r\n        <div className=\"text-center\">\r\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\r\n          <p className=\"text-gray-600\">Loading form...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center min-h-[400px] bg-gray-50 rounded-lg\">\r\n        <div className=\"text-center\">\r\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\r\n          <p className=\"text-gray-600\">Loading form...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"flex items-center justify-center min-h-[400px] bg-red-50 rounded-lg\">\r\n        <div className=\"text-center\">\r\n          <p className=\"text-red-600 mb-2\">Error loading form</p>\r\n          <p className=\"text-sm text-gray-600\">{error}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!Survey || !surveyModel) {\r\n    return (\r\n      <div className=\"flex items-center justify-center min-h-[400px] bg-gray-50 rounded-lg\">\r\n        <p className=\"text-gray-600\">No form data available</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"survey-runtime-container\">\r\n      <Survey model={surveyModel} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SurveyRuntime;"],"file":"_astro/SurveyRuntime.CPIz1D5l.js"}