{"version":3,"file":"rbac.BFDT_RO-.js","sources":["../../src/components/ui/table.tsx","../../src/lib/utils/rbac.ts"],"sourcesContent":["import * as React from \"react\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nconst Table = React.forwardRef<\r\n  HTMLTableElement,\r\n  React.HTMLAttributes<HTMLTableElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div className=\"relative w-full overflow-auto\">\r\n    <table\r\n      ref={ref}\r\n      className={cn(\"w-full caption-bottom text-sm\", className)}\r\n      {...props}\r\n    />\r\n  </div>\r\n));\r\nTable.displayName = \"Table\";\r\n\r\nconst TableHeader = React.forwardRef<\r\n  HTMLTableSectionElement,\r\n  React.HTMLAttributes<HTMLTableSectionElement>\r\n>(({ className, ...props }, ref) => (\r\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\r\n));\r\nTableHeader.displayName = \"TableHeader\";\r\n\r\nconst TableBody = React.forwardRef<\r\n  HTMLTableSectionElement,\r\n  React.HTMLAttributes<HTMLTableSectionElement>\r\n>(({ className, ...props }, ref) => (\r\n  <tbody\r\n    ref={ref}\r\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\r\n    {...props}\r\n  />\r\n));\r\nTableBody.displayName = \"TableBody\";\r\n\r\nconst TableFooter = React.forwardRef<\r\n  HTMLTableSectionElement,\r\n  React.HTMLAttributes<HTMLTableSectionElement>\r\n>(({ className, ...props }, ref) => (\r\n  <tfoot\r\n    ref={ref}\r\n    className={cn(\r\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\r\n      className,\r\n    )}\r\n    {...props}\r\n  />\r\n));\r\nTableFooter.displayName = \"TableFooter\";\r\n\r\nconst TableRow = React.forwardRef<\r\n  HTMLTableRowElement,\r\n  React.HTMLAttributes<HTMLTableRowElement>\r\n>(({ className, ...props }, ref) => (\r\n  <tr\r\n    ref={ref}\r\n    className={cn(\r\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\r\n      className,\r\n    )}\r\n    {...props}\r\n  />\r\n));\r\nTableRow.displayName = \"TableRow\";\r\n\r\nconst TableHead = React.forwardRef<\r\n  HTMLTableCellElement,\r\n  React.ThHTMLAttributes<HTMLTableCellElement>\r\n>(({ className, ...props }, ref) => (\r\n  <th\r\n    ref={ref}\r\n    className={cn(\r\n      \"h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\r\n      className,\r\n    )}\r\n    {...props}\r\n  />\r\n));\r\nTableHead.displayName = \"TableHead\";\r\n\r\nconst TableCell = React.forwardRef<\r\n  HTMLTableCellElement,\r\n  React.TdHTMLAttributes<HTMLTableCellElement>\r\n>(({ className, ...props }, ref) => (\r\n  <td\r\n    ref={ref}\r\n    className={cn(\r\n      \"p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\r\n      className,\r\n    )}\r\n    {...props}\r\n  />\r\n));\r\nTableCell.displayName = \"TableCell\";\r\n\r\nconst TableCaption = React.forwardRef<\r\n  HTMLTableCaptionElement,\r\n  React.HTMLAttributes<HTMLTableCaptionElement>\r\n>(({ className, ...props }, ref) => (\r\n  <caption\r\n    ref={ref}\r\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\r\n    {...props}\r\n  />\r\n));\r\nTableCaption.displayName = \"TableCaption\";\r\n\r\nexport {\r\n  Table,\r\n  TableHeader,\r\n  TableBody,\r\n  TableFooter,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableCaption,\r\n};\r\n","import type { D1Database } from '@cloudflare/workers-types';\r\n\r\nexport interface Permission {\r\n  id: number;\r\n  role: string;\r\n  permission: string;\r\n  resource: string;\r\n  created_at: string;\r\n}\r\n\r\nexport interface RolePermissions {\r\n  role: string;\r\n  permissions: Array<{\r\n    permission: string;\r\n    resource: string;\r\n  }>;\r\n}\r\n\r\nexport class RBACManager {\r\n  private db: D1Database;\r\n  private cache: Map<string, Permission[]> = new Map();\r\n\r\n  constructor(db: D1Database) {\r\n    this.db = db;\r\n  }\r\n\r\n  /**\r\n   * Check if a user has permission to perform an action on a resource\r\n   */\r\n  async hasPermission(\r\n    role: string,\r\n    permission: string,\r\n    resource: string\r\n  ): Promise<boolean> {\r\n    const cacheKey = `${role}:${permission}:${resource}`;\r\n    const cached = this.cache.get(cacheKey);\r\n    \r\n    if (cached !== undefined) {\r\n      return cached.length > 0;\r\n    }\r\n\r\n    try {\r\n      const result = await this.db\r\n        .prepare(\r\n          'SELECT 1 FROM clinical_permissions WHERE role = ? AND permission = ? AND resource = ?'\r\n        )\r\n        .bind(role, permission, resource)\r\n        .first();\r\n\r\n      const hasAccess = result !== null;\r\n      this.cache.set(cacheKey, hasAccess ? [result as any] : []);\r\n      \r\n      return hasAccess;\r\n    } catch (error) {\r\n      console.error('Error checking permission:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all permissions for a role\r\n   */\r\n  async getRolePermissions(role: string): Promise<Permission[]> {\r\n    const cacheKey = `role:${role}`;\r\n    const cached = this.cache.get(cacheKey);\r\n    \r\n    if (cached) {\r\n      return cached;\r\n    }\r\n\r\n    try {\r\n      const { results } = await this.db\r\n        .prepare('SELECT * FROM clinical_permissions WHERE role = ?')\r\n        .bind(role)\r\n        .all();\r\n\r\n      const permissions = results as unknown as Permission[];\r\n      this.cache.set(cacheKey, permissions);\r\n      \r\n      return permissions;\r\n    } catch (error) {\r\n      console.error('Error fetching role permissions:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all available roles\r\n   */\r\n  async getAllRoles(): Promise<string[]> {\r\n    try {\r\n      const { results } = await this.db\r\n        .prepare('SELECT DISTINCT role FROM clinical_permissions')\r\n        .all();\r\n\r\n      return results.map((r: any) => r.role);\r\n    } catch (error) {\r\n      console.error('Error fetching roles:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add a new permission\r\n   */\r\n  async addPermission(\r\n    role: string,\r\n    permission: string,\r\n    resource: string\r\n  ): Promise<boolean> {\r\n    try {\r\n      await this.db\r\n        .prepare(\r\n          'INSERT OR IGNORE INTO clinical_permissions (role, permission, resource) VALUES (?, ?, ?)'\r\n        )\r\n        .bind(role, permission, resource)\r\n        .run();\r\n\r\n      // Clear cache for this role\r\n      this.clearRoleCache(role);\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error adding permission:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove a permission\r\n   */\r\n  async removePermission(\r\n    role: string,\r\n    permission: string,\r\n    resource: string\r\n  ): Promise<boolean> {\r\n    try {\r\n      await this.db\r\n        .prepare(\r\n          'DELETE FROM clinical_permissions WHERE role = ? AND permission = ? AND resource = ?'\r\n        )\r\n        .bind(role, permission, resource)\r\n        .run();\r\n\r\n      // Clear cache for this role\r\n      this.clearRoleCache(role);\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error removing permission:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update user role\r\n   */\r\n  async updateUserRole(customerId: string, newRole: string): Promise<boolean> {\r\n    try {\r\n      await this.db\r\n        .prepare('UPDATE customers SET role = ? WHERE id = ?')\r\n        .bind(newRole, customerId)\r\n        .run();\r\n\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error updating user role:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get user role\r\n   */\r\n  async getUserRole(customerId: string): Promise<string | null> {\r\n    try {\r\n      const result = await this.db\r\n        .prepare('SELECT role FROM customers WHERE id = ?')\r\n        .bind(customerId)\r\n        .first();\r\n\r\n      return result ? (result as any).role : null;\r\n    } catch (error) {\r\n      console.error('Error fetching user role:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear cache for a specific role\r\n   */\r\n  private clearRoleCache(role: string): void {\r\n    // Clear all cache entries related to this role\r\n    const keysToDelete: string[] = [];\r\n    \r\n    for (const key of this.cache.keys()) {\r\n      if (key.startsWith(`${role}:`) || key === `role:${role}`) {\r\n        keysToDelete.push(key);\r\n      }\r\n    }\r\n    \r\n    keysToDelete.forEach(key => this.cache.delete(key));\r\n  }\r\n\r\n  /**\r\n   * Clear entire cache\r\n   */\r\n  clearCache(): void {\r\n    this.cache.clear();\r\n  }\r\n\r\n  /**\r\n   * Batch check multiple permissions\r\n   */\r\n  async hasPermissions(\r\n    role: string,\r\n    permissions: Array<{ permission: string; resource: string }>\r\n  ): Promise<boolean> {\r\n    const checks = await Promise.all(\r\n      permissions.map(({ permission, resource }) =>\r\n        this.hasPermission(role, permission, resource)\r\n      )\r\n    );\r\n\r\n    return checks.every(check => check === true);\r\n  }\r\n\r\n  /**\r\n   * Get all permissions grouped by role\r\n   */\r\n  async getAllPermissionsGrouped(): Promise<RolePermissions[]> {\r\n    try {\r\n      const { results } = await this.db\r\n        .prepare(\r\n          'SELECT role, permission, resource FROM clinical_permissions ORDER BY role, resource, permission'\r\n        )\r\n        .all();\r\n\r\n      const grouped = new Map<string, RolePermissions>();\r\n\r\n      for (const row of results as any[]) {\r\n        if (!grouped.has(row.role)) {\r\n          grouped.set(row.role, {\r\n            role: row.role,\r\n            permissions: []\r\n          });\r\n        }\r\n\r\n        grouped.get(row.role)!.permissions.push({\r\n          permission: row.permission,\r\n          resource: row.resource\r\n        });\r\n      }\r\n\r\n      return Array.from(grouped.values());\r\n    } catch (error) {\r\n      console.error('Error fetching grouped permissions:', error);\r\n      return [];\r\n    }\r\n  }\r\n}\r\n\r\n// Helper function to create RBAC middleware\r\nexport function requirePermission(\r\n  permission: string,\r\n  resource: string\r\n) {\r\n  return async function checkPermission(\r\n    request: Request,\r\n    env: any,\r\n    ctx: any,\r\n    next: () => Promise<Response>\r\n  ): Promise<Response> {\r\n    const customerId = request.headers.get('X-Customer-ID');\r\n    \r\n    if (!customerId) {\r\n      return new Response('Unauthorized', { status: 401 });\r\n    }\r\n\r\n    const rbac = new RBACManager(env.DB);\r\n    const role = await rbac.getUserRole(customerId);\r\n    \r\n    if (!role) {\r\n      return new Response('User role not found', { status: 403 });\r\n    }\r\n\r\n    const hasAccess = await rbac.hasPermission(role, permission, resource);\r\n    \r\n    if (!hasAccess) {\r\n      return new Response('Insufficient permissions', { status: 403 });\r\n    }\r\n\r\n    return next();\r\n  };\r\n}\r\n\r\n// Permission constants for consistency\r\nexport const PERMISSIONS = {\r\n  CREATE: 'create',\r\n  READ: 'read',\r\n  UPDATE: 'update',\r\n  DELETE: 'delete',\r\n  MANAGE: 'manage',\r\n  EXPORT: 'export',\r\n  CONFIGURE: 'configure'\r\n} as const;\r\n\r\nexport const RESOURCES = {\r\n  FORM_TEMPLATES: 'form_templates',\r\n  FORM_SUBMISSIONS: 'form_submissions',\r\n  PATIENT_DATA: 'patient_data',\r\n  ASSESSMENTS: 'assessments',\r\n  USERS: 'users',\r\n  ANALYTICS: 'analytics',\r\n  PERMISSIONS: 'permissions',\r\n  ORGANIZATIONS: 'organizations',\r\n  ALL_DATA: 'all_data',\r\n  SYSTEM: 'system',\r\n  OWN_TEMPLATES: 'own_templates',\r\n  OWN_SUBMISSIONS: 'own_submissions',\r\n  OWN_PROFILE: 'own_profile',\r\n  AGGREGATED_DATA: 'aggregated_data',\r\n  RESEARCH_QUERIES: 'research_queries'\r\n} as const;\r\n\r\nexport const ROLES = {\r\n  PATIENT: 'patient',\r\n  CLINICIAN: 'clinician',\r\n  ADMIN: 'admin',\r\n  RESEARCHER: 'researcher'\r\n} as const;"],"names":["Table","React.forwardRef","className","props","ref","jsx","cn","TableHeader","TableBody","TableFooter","TableRow","TableHead","TableCell","TableCaption","PERMISSIONS","RESOURCES","ROLES"],"mappings":"8HAIA,MAAMA,EAAQC,EAAAA,WAGZ,CAAC,CAAE,UAAAC,EAAW,GAAGC,CAAA,EAASC,IAC1BC,EAAAA,IAAC,MAAA,CAAI,UAAU,gCACb,SAAAA,EAAAA,IAAC,QAAA,CACC,IAAAD,EACA,UAAWE,EAAG,gCAAiCJ,CAAS,EACvD,GAAGC,CAAA,CACN,EACF,CACD,EACDH,EAAM,YAAc,QAEpB,MAAMO,EAAcN,EAAAA,WAGlB,CAAC,CAAE,UAAAC,EAAW,GAAGC,GAASC,UACzB,QAAA,CAAM,IAAAA,EAAU,UAAWE,EAAG,kBAAmBJ,CAAS,EAAI,GAAGC,EAAO,CAC1E,EACDI,EAAY,YAAc,cAE1B,MAAMC,EAAYP,EAAAA,WAGhB,CAAC,CAAE,UAAAC,EAAW,GAAGC,CAAA,EAASC,IAC1BC,EAAAA,IAAC,QAAA,CACC,IAAAD,EACA,UAAWE,EAAG,6BAA8BJ,CAAS,EACpD,GAAGC,CAAA,CACN,CACD,EACDK,EAAU,YAAc,YAExB,MAAMC,EAAcR,EAAAA,WAGlB,CAAC,CAAE,UAAAC,EAAW,GAAGC,CAAA,EAASC,IAC1BC,EAAAA,IAAC,QAAA,CACC,IAAAD,EACA,UAAWE,EACT,0DACAJ,CAAA,EAED,GAAGC,CAAA,CACN,CACD,EACDM,EAAY,YAAc,cAE1B,MAAMC,EAAWT,EAAAA,WAGf,CAAC,CAAE,UAAAC,EAAW,GAAGC,CAAA,EAASC,IAC1BC,EAAAA,IAAC,KAAA,CACC,IAAAD,EACA,UAAWE,EACT,8EACAJ,CAAA,EAED,GAAGC,CAAA,CACN,CACD,EACDO,EAAS,YAAc,WAEvB,MAAMC,EAAYV,EAAAA,WAGhB,CAAC,CAAE,UAAAC,EAAW,GAAGC,CAAA,EAASC,IAC1BC,EAAAA,IAAC,KAAA,CACC,IAAAD,EACA,UAAWE,EACT,yIACAJ,CAAA,EAED,GAAGC,CAAA,CACN,CACD,EACDQ,EAAU,YAAc,YAExB,MAAMC,EAAYX,EAAAA,WAGhB,CAAC,CAAE,UAAAC,EAAW,GAAGC,CAAA,EAASC,IAC1BC,EAAAA,IAAC,KAAA,CACC,IAAAD,EACA,UAAWE,EACT,uFACAJ,CAAA,EAED,GAAGC,CAAA,CACN,CACD,EACDS,EAAU,YAAc,YAExB,MAAMC,EAAeZ,EAAAA,WAGnB,CAAC,CAAE,UAAAC,EAAW,GAAGC,CAAA,EAASC,IAC1BC,EAAAA,IAAC,UAAA,CACC,IAAAD,EACA,UAAWE,EAAG,qCAAsCJ,CAAS,EAC5D,GAAGC,CAAA,CACN,CACD,EACDU,EAAa,YAAc,eC6LpB,MAAMC,EAAc,CACzB,OAAQ,SACR,KAAM,OACN,OAAQ,SACR,OAAQ,SACR,OAAQ,SACR,OAAQ,SACR,UAAW,WACb,EAEaC,EAAY,CACvB,eAAgB,iBAChB,iBAAkB,mBAClB,aAAc,eACd,YAAa,cACb,MAAO,QACP,UAAW,YACX,YAAa,cACb,cAAe,gBACf,SAAU,WACV,OAAQ,SACR,cAAe,gBACf,gBAAiB,kBACjB,YAAa,cACb,gBAAiB,kBACjB,iBAAkB,kBACpB,EAEaC,EAAQ,CACnB,QAAS,UACT,UAAW,YACX,MAAO,QACP,WAAY,YACd"}