{"version":3,"file":"LiveFormRenderer.0LYq6_AY.js","sources":["../../src/components/form-builder/LiveFormRenderer.tsx"],"sourcesContent":["// Live Form Renderer Component for IPLC Forms v3\r\n// Handles actual form data collection and submission with AI Summary support\r\n\r\nimport React, { useState, useMemo } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Alert, AlertDescription } from '@/components/ui/alert';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport type { FormComponent, FormTemplate } from '@/lib/api-form-builder';\r\nimport type { FormPage } from '@/lib/schemas/api-validation';\r\nimport { Calendar, CheckCircle, AlertCircle, ChevronLeft, ChevronRight } from 'lucide-react';\r\nimport { AISummaryElement } from './components/AISummaryElement';\r\nimport TitleElement from './components/TitleElement';\r\nimport SubtitleElement from './components/SubtitleElement';\r\nimport SeparatorElement from './components/SeparatorElement';\r\nimport evaluationSectionsConfig from './evaluation-sections-config.json';\r\n\r\ninterface LiveFormRendererProps {\r\n  template: FormTemplate;\r\n  onSubmit?: (formData: FormSubmissionData) => void;\r\n  className?: string;\r\n}\r\n\r\ninterface FormSubmissionData {\r\n  template_id: number;\r\n  responses: Record<string, any>;\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\nexport const LiveFormRenderer: React.FC<LiveFormRendererProps> = ({\r\n  template,\r\n  onSubmit,\r\n  className = ''\r\n}) => {\r\n  const [formData, setFormData] = useState<Record<string, any>>({});\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [submitStatus, setSubmitStatus] = useState<'idle' | 'success' | 'error'>('idle');\r\n  const [errors, setErrors] = useState<Record<string, string>>({});\r\n\r\n  // Check if this is a multi-page form\r\n  const isMultiPage = template.schema?.isMultiPage || false;\r\n  const pages = useMemo(() => {\r\n    if (isMultiPage && template.schema?.pages) {\r\n      const parsedPages = typeof template.schema.pages === 'string'\r\n        ? JSON.parse(template.schema.pages)\r\n        : template.schema.pages;\r\n      return [...parsedPages].sort((a: FormPage, b: FormPage) => a.order - b.order);\r\n    }\r\n    return [];\r\n  }, [isMultiPage, template.schema]);\r\n\r\n  // State for multi-page navigation\r\n  const [currentPageIndex, setCurrentPageIndex] = useState(0);\r\n\r\n  // Get components based on whether it's multi-page or single-page\r\n  const sortedComponents = useMemo(() => {\r\n    let components: FormComponent[] = [];\r\n    \r\n    if (isMultiPage && pages.length > 0) {\r\n      // Get components from current page\r\n      const currentPage = pages[currentPageIndex];\r\n      if (currentPage && currentPage.components) {\r\n        components = typeof currentPage.components === 'string'\r\n          ? JSON.parse(currentPage.components)\r\n          : currentPage.components;\r\n      }\r\n    } else {\r\n      // Single-page form\r\n      components = Array.isArray(template.schema?.components) ? template.schema.components :\r\n                  typeof template.schema?.components === 'string' ? JSON.parse(template.schema.components) : [];\r\n    }\r\n    \r\n    // Sort components by order\r\n    return [...components].sort((a, b) => a.order - b.order);\r\n  }, [isMultiPage, pages, currentPageIndex, template.schema]);\r\n\r\n  // Function to evaluate visibility conditions\r\n  const evaluateVisibilityCondition = (component: FormComponent): boolean => {\r\n    const condition = component.props?.visibilityCondition;\r\n    if (!condition) return true;\r\n\r\n    const triggerValue = formData[condition.field];\r\n    const conditionValue = condition.value;\r\n\r\n    switch (condition.operator) {\r\n      case 'equals':\r\n        return triggerValue == conditionValue;\r\n      case 'not_equals':\r\n        return triggerValue != conditionValue;\r\n      case 'contains':\r\n        return String(triggerValue || '').includes(String(conditionValue));\r\n      case 'greater_than':\r\n        return Number(triggerValue) > Number(conditionValue);\r\n      case 'less_than':\r\n        return Number(triggerValue) < Number(conditionValue);\r\n      default:\r\n        return true;\r\n    }\r\n  };\r\n\r\n  // Filter components based on visibility conditions\r\n  const visibleComponents = sortedComponents.filter(evaluateVisibilityCondition);\r\n\r\n  const updateFormData = (componentId: string, value: any) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      [componentId]: value\r\n    }));\r\n\r\n    // Clear error for this field if it exists\r\n    if (errors[componentId]) {\r\n      setErrors(prev => {\r\n        const newErrors = { ...prev };\r\n        delete newErrors[componentId];\r\n        return newErrors;\r\n      });\r\n    }\r\n  };\r\n\r\n  const updateComponentData = (componentId: string, updates: any) => {\r\n    // Find the component and update its props\r\n    const componentIndex = sortedComponents.findIndex(c => c.id === componentId);\r\n    if (componentIndex !== -1) {\r\n      sortedComponents[componentIndex] = {\r\n        ...sortedComponents[componentIndex],\r\n        props: {\r\n          ...sortedComponents[componentIndex].props,\r\n          ...updates\r\n        }\r\n      };\r\n    }\r\n  };\r\n\r\n  const validateForm = (componentsToValidate?: FormComponent[]): boolean => {\r\n    const newErrors: Record<string, string> = {};\r\n    const components = componentsToValidate || visibleComponents;\r\n\r\n    // Only validate visible components\r\n    components.forEach(component => {\r\n      const { id, props = {}, label } = component;\r\n      const isRequired = props.required || false;\r\n      const value = formData[id];\r\n\r\n      if (isRequired && (!value || value === '')) {\r\n        newErrors[id] = `${label} is required`;\r\n      }\r\n\r\n      // Validate number fields\r\n      if (component.type === 'number' && value !== undefined && value !== '') {\r\n        const numValue = Number(value);\r\n        if (isNaN(numValue)) {\r\n          newErrors[id] = `${label} must be a valid number`;\r\n        } else {\r\n          if (props.min !== undefined && numValue < props.min) {\r\n            newErrors[id] = `${label} must be at least ${props.min}`;\r\n          }\r\n          if (props.max !== undefined && numValue > props.max) {\r\n            newErrors[id] = `${label} must be at most ${props.max}`;\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n  // Navigation handlers for multi-page forms\r\n  const handlePreviousPage = () => {\r\n    if (currentPageIndex > 0) {\r\n      setCurrentPageIndex(currentPageIndex - 1);\r\n      // Clear errors when navigating\r\n      setErrors({});\r\n    }\r\n  };\r\n\r\n  const handleNextPage = () => {\r\n    // Validate current page before moving to next\r\n    if (validateForm(visibleComponents)) {\r\n      if (currentPageIndex < pages.length - 1) {\r\n        setCurrentPageIndex(currentPageIndex + 1);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    \r\n    if (!validateForm()) {\r\n      return;\r\n    }\r\n\r\n    setIsSubmitting(true);\r\n    setSubmitStatus('idle');\r\n\r\n    try {\r\n      // Collect AI summary data from visible components\r\n      const aiSummaryData: Record<string, any> = {};\r\n      visibleComponents.forEach(component => {\r\n        if (component.type === 'ai_summary' && component.props?.aiSummaryData) {\r\n          aiSummaryData[component.id] = component.props.aiSummaryData;\r\n        }\r\n      });\r\n\r\n      // For multi-page forms, we need to include data from all pages\r\n      const allFormData: Record<string, any> = {};\r\n      \r\n      if (isMultiPage) {\r\n        // Collect data from all pages\r\n        pages.forEach((page: FormPage) => {\r\n          const pageComponents = typeof page.components === 'string'\r\n            ? JSON.parse(page.components)\r\n            : page.components;\r\n          \r\n          pageComponents.forEach((component: FormComponent) => {\r\n            if (evaluateVisibilityCondition(component) && formData[component.id] !== undefined) {\r\n              allFormData[component.id] = formData[component.id];\r\n            }\r\n          });\r\n        });\r\n      } else {\r\n        // Single-page form - only include visible fields\r\n        visibleComponents.forEach(component => {\r\n          if (formData[component.id] !== undefined) {\r\n            allFormData[component.id] = formData[component.id];\r\n          }\r\n        });\r\n      }\r\n\r\n      const submissionData: FormSubmissionData = {\r\n        template_id: template.id!,\r\n        responses: {\r\n          ...allFormData,\r\n          ...aiSummaryData\r\n        },\r\n        metadata: {\r\n          submitted_at: new Date().toISOString(),\r\n          form_version: template.version,\r\n          ai_summaries: Object.keys(aiSummaryData),\r\n          is_multi_page: isMultiPage,\r\n          total_pages: isMultiPage ? pages.length : 1\r\n        }\r\n      };\r\n\r\n      if (onSubmit) {\r\n        await onSubmit(submissionData);\r\n      } else {\r\n        // Default submission to API\r\n        const response = await fetch('/api/form-submissions', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n            template_id: submissionData.template_id,\r\n            form_data: submissionData.responses,\r\n            metadata: submissionData.metadata,\r\n            status: 'submitted'\r\n          })\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error('Failed to submit form');\r\n        }\r\n      }\r\n\r\n      setSubmitStatus('success');\r\n      setFormData({});\r\n    } catch (error) {\r\n      console.error('Form submission error:', error);\r\n      setSubmitStatus('error');\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const renderFormComponent = (component: FormComponent) => {\r\n    const { id, type, label, props = {} } = component;\r\n    const isRequired = props.required || false;\r\n    const placeholder = props.placeholder || '';\r\n    const componentDescription = props.description || '';\r\n    const options = props.options || [];\r\n    const value = formData[id] || '';\r\n    const hasError = !!errors[id];\r\n\r\n    const labelElement = (\r\n      <Label className={`text-sm font-medium ${hasError ? 'text-red-700' : 'text-gray-700'}`}>\r\n        {label}\r\n        {isRequired && <span className=\"text-red-500 ml-1\">*</span>}\r\n        {componentDescription && (\r\n          <span className=\"text-xs text-gray-500 font-normal block mt-1\">\r\n            {componentDescription}\r\n          </span>\r\n        )}\r\n      </Label>\r\n    );\r\n\r\n    const errorElement = hasError && (\r\n      <span className=\"text-xs text-red-600 flex items-center gap-1\">\r\n        <AlertCircle className=\"h-3 w-3\" />\r\n        {errors[id]}\r\n      </span>\r\n    );\r\n\r\n    switch (type) {\r\n      case 'text_input':\r\n        return (\r\n          <div key={id} className=\"space-y-2\">\r\n            {labelElement}\r\n            <Input \r\n              value={value}\r\n              onChange={(e) => updateFormData(id, e.target.value)}\r\n              placeholder={placeholder}\r\n              className={hasError ? 'border-red-500 focus:border-red-500' : ''}\r\n            />\r\n            {errorElement}\r\n          </div>\r\n        );\r\n\r\n      case 'textarea':\r\n        return (\r\n          <div key={id} className=\"space-y-2\">\r\n            {labelElement}\r\n            <Textarea \r\n              value={value}\r\n              onChange={(e) => updateFormData(id, e.target.value)}\r\n              placeholder={placeholder}\r\n              className={`min-h-[100px] ${hasError ? 'border-red-500 focus:border-red-500' : ''}`}\r\n            />\r\n            {errorElement}\r\n          </div>\r\n        );\r\n\r\n      case 'select':\r\n        return (\r\n          <div key={id} className=\"space-y-2\">\r\n            {labelElement}\r\n            <select\r\n              value={value}\r\n              onChange={(e) => updateFormData(id, e.target.value)}\r\n              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${\r\n                hasError ? 'border-red-500 focus:ring-red-500' : 'border-gray-300'\r\n              }`}\r\n            >\r\n              <option value=\"\">{placeholder || \"Select an option...\"}</option>\r\n              {options.map((option: string, index: number) => (\r\n                <option key={index} value={option}>\r\n                  {option}\r\n                </option>\r\n              ))}\r\n            </select>\r\n            {errorElement}\r\n          </div>\r\n        );\r\n\r\n      case 'radio':\r\n        return (\r\n          <div key={id} className=\"space-y-3\">\r\n            {labelElement}\r\n            <div className=\"space-y-2\">\r\n              {options.map((option: string, index: number) => (\r\n                <div key={index} className=\"flex items-center space-x-2\">\r\n                  <input\r\n                    type=\"radio\"\r\n                    value={option}\r\n                    checked={value === option}\r\n                    onChange={(e) => updateFormData(id, e.target.value)}\r\n                    className=\"h-4 w-4 text-blue-600 border-gray-300 focus:ring-blue-500\"\r\n                  />\r\n                  <Label className=\"text-sm text-gray-700\">{option}</Label>\r\n                </div>\r\n              ))}\r\n            </div>\r\n            {errorElement}\r\n          </div>\r\n        );\r\n\r\n      case 'checkbox':\r\n        const checkboxValues = Array.isArray(value) ? value : [];\r\n        return (\r\n          <div key={id} className=\"space-y-3\">\r\n            {labelElement}\r\n            <div className=\"space-y-2\">\r\n              {options.map((option: string, index: number) => (\r\n                <div key={index} className=\"flex items-center space-x-2\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={checkboxValues.includes(option)}\r\n                    onChange={(e) => {\r\n                      const newValues = e.target.checked\r\n                        ? [...checkboxValues, option]\r\n                        : checkboxValues.filter((v: string) => v !== option);\r\n                      updateFormData(id, newValues);\r\n                    }}\r\n                    className=\"h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500\"\r\n                  />\r\n                  <Label className=\"text-sm text-gray-700\">{option}</Label>\r\n                </div>\r\n              ))}\r\n            </div>\r\n            {errorElement}\r\n          </div>\r\n        );\r\n\r\n      case 'date':\r\n        return (\r\n          <div key={id} className=\"space-y-2\">\r\n            {labelElement}\r\n            <div className=\"relative\">\r\n              <Input \r\n                type=\"date\"\r\n                value={value}\r\n                onChange={(e) => updateFormData(id, e.target.value)}\r\n                className={hasError ? 'border-red-500 focus:border-red-500' : ''}\r\n              />\r\n              <Calendar className=\"absolute right-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\r\n            </div>\r\n            {errorElement}\r\n          </div>\r\n        );\r\n\r\n      case 'number':\r\n        return (\r\n          <div key={id} className=\"space-y-2\">\r\n            {labelElement}\r\n            <Input \r\n              type=\"number\"\r\n              value={value}\r\n              onChange={(e) => updateFormData(id, e.target.value)}\r\n              placeholder={placeholder}\r\n              min={props.min}\r\n              max={props.max}\r\n              className={hasError ? 'border-red-500 focus:border-red-500' : ''}\r\n            />\r\n            {(props.min !== undefined || props.max !== undefined) && (\r\n              <div className=\"text-xs text-gray-500\">\r\n                Range: {props.min || 0} - {props.max || '∞'}\r\n              </div>\r\n            )}\r\n            {errorElement}\r\n          </div>\r\n        );\r\n\r\n      case 'scale':\r\n        return (\r\n          <div key={id} className=\"space-y-3\">\r\n            {labelElement}\r\n            <div className=\"space-y-2\">\r\n              <div className=\"flex justify-between items-center\">\r\n                <span className=\"text-sm text-gray-500\">{props.min || 1}</span>\r\n                <span className=\"text-sm text-gray-500\">{props.max || 10}</span>\r\n              </div>\r\n              <div className=\"flex space-x-2\">\r\n                {Array.from({ length: (props.max || 10) - (props.min || 1) + 1 }, (_, i) => {\r\n                  const scaleValue = (props.min || 1) + i;\r\n                  return (\r\n                    <button\r\n                      key={scaleValue}\r\n                      type=\"button\"\r\n                      onClick={() => updateFormData(id, scaleValue)}\r\n                      className={`w-8 h-8 rounded-full border-2 text-sm flex items-center justify-center transition-colors ${\r\n                        value === scaleValue\r\n                          ? 'border-blue-500 bg-blue-500 text-white'\r\n                          : 'border-gray-300 bg-white text-gray-600 hover:border-blue-300'\r\n                      }`}\r\n                    >\r\n                      {scaleValue}\r\n                    </button>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n            {errorElement}\r\n          </div>\r\n        );\r\n\r\n      case 'title_subtitle':\r\n        return (\r\n          <div key={id}>\r\n            <TitleElement\r\n              component={component}\r\n              isEditing={false}\r\n            />\r\n          </div>\r\n        );\r\n      case 'subtitle':\r\n        return (\r\n          <div key={id}>\r\n            <SubtitleElement\r\n              props={{\r\n                text: (props as any).text || label || 'Subtitle',\r\n                level: (props as any).level || 'h3',\r\n                fontFamily: (props as any).fontFamily || 'system',\r\n                fontSize: (props as any).fontSize || 'lg',\r\n                fontWeight: (props as any).fontWeight || 'medium',\r\n                color: (props as any).color || '#6B7280',\r\n                alignment: (props as any).alignment || 'left',\r\n                marginTop: (props as any).marginTop || 8,\r\n                marginBottom: (props as any).marginBottom || 12,\r\n                enableMarkdown: (props as any).enableMarkdown || false\r\n              }}\r\n              isSelected={false}\r\n            />\r\n          </div>\r\n        );\r\n\r\n      case 'line_separator':\r\n        return (\r\n          <div key={id}>\r\n            <SeparatorElement\r\n              props={{\r\n                style: (props as any).style || 'solid',\r\n                thickness: (props as any).thickness || 1,\r\n                color: (props as any).color || '#E5E7EB',\r\n                width: (props as any).width || 100,\r\n                marginTop: (props as any).marginTop || 16,\r\n                marginBottom: (props as any).marginBottom || 16\r\n              }}\r\n              isSelected={false}\r\n            />\r\n          </div>\r\n        );\r\n\r\n      case 'ai_summary':\r\n        return (\r\n          <div key={id}>\r\n            <AISummaryElement\r\n              component={component}\r\n              isEditing={false}\r\n              allComponents={visibleComponents}\r\n              onUpdate={(updates) => updateComponentData(id, updates)}\r\n            />\r\n          </div>\r\n        );\r\n\r\n      case 'evaluation_section': {\r\n        const evaluationSections = evaluationSectionsConfig.evaluationSections;\r\n        const section = evaluationSections.find((s: any) => s.id === (component as any).sectionId);\r\n        \r\n        if (!section) {\r\n          return (\r\n            <div key={id} className=\"p-4 border border-red-300 rounded bg-red-50\">\r\n              <p className=\"text-sm text-red-600\">\r\n                Evaluation section not found: {(component as any).sectionId}\r\n              </p>\r\n            </div>\r\n          );\r\n        }\r\n\r\n        return (\r\n          <div key={id} className=\"space-y-4 p-4 border-2 border-blue-200 rounded-lg bg-blue-50/50\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <h3 className=\"text-lg font-semibold text-blue-900\">{label}</h3>\r\n              <Badge variant=\"outline\" className=\"text-xs\">{section.discipline}</Badge>\r\n            </div>\r\n            \r\n            {section.description && (\r\n              <p className=\"text-sm text-gray-600\">{section.description}</p>\r\n            )}\r\n            \r\n            <div className=\"space-y-3 mt-4\">\r\n              {section.fields.map((field: any, fieldIndex: number) => {\r\n                const fieldId = `${id}_${field.id}`;\r\n                const fieldValue = formData[fieldId] || '';\r\n                \r\n                // Render each field based on its type\r\n                switch (field.type) {\r\n                  case 'section_header':\r\n                    return (\r\n                      <div key={fieldIndex} className={`mt-${field.level === 1 ? '4' : '3'} mb-2`}>\r\n                        <h4 className={`text-${field.level === 1 ? 'lg' : 'md'} font-semibold text-gray-800`}>{field.label}</h4>\r\n                      </div>\r\n                    );\r\n                    \r\n                  case 'text':\r\n                    return (\r\n                      <div key={fieldIndex} className=\"space-y-1\">\r\n                        <label className=\"text-sm font-medium text-gray-700\">\r\n                          {field.label}\r\n                          {field.required && <span className=\"text-red-500 ml-1\">*</span>}\r\n                        </label>\r\n                        <Input\r\n                          value={fieldValue}\r\n                          onChange={(e) => updateFormData(fieldId, e.target.value)}\r\n                          placeholder={`Enter ${field.label.toLowerCase()}`}\r\n                          className=\"text-sm\"\r\n                        />\r\n                      </div>\r\n                    );\r\n                    \r\n                  case 'textarea':\r\n                    return (\r\n                      <div key={fieldIndex} className=\"space-y-1\">\r\n                        <label className=\"text-sm font-medium text-gray-700\">\r\n                          {field.label}\r\n                          {field.required && <span className=\"text-red-500 ml-1\">*</span>}\r\n                        </label>\r\n                        <Textarea\r\n                          value={fieldValue}\r\n                          onChange={(e) => updateFormData(fieldId, e.target.value)}\r\n                          placeholder={`Enter ${field.label.toLowerCase()}`}\r\n                          rows={field.rows || 3}\r\n                          className=\"text-sm\"\r\n                        />\r\n                      </div>\r\n                    );\r\n                    \r\n                  default:\r\n                    return (\r\n                      <div key={fieldIndex} className=\"text-sm text-gray-500\">\r\n                        {field.label} ({field.type})\r\n                      </div>\r\n                    );\r\n                }\r\n              })}\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n\r\n      default:\r\n        return (\r\n          <div key={id} className=\"space-y-2\">\r\n            <Label className=\"text-sm text-gray-500\">Unknown Component Type: {type}</Label>\r\n          </div>\r\n        );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={`bg-white border border-gray-200 rounded-lg ${className}`}>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"p-6\">\r\n          <div className=\"max-w-2xl mx-auto\">\r\n            {/* Form Header */}\r\n            <div className=\"mb-8\">\r\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">\r\n                {template.name || 'Untitled Form'}\r\n              </h2>\r\n              {template.description && (\r\n                <p className=\"text-gray-600\">\r\n                  {template.description}\r\n                </p>\r\n              )}\r\n              \r\n              {/* Progress bar for multi-page forms */}\r\n              {isMultiPage && pages.length > 0 && (\r\n                <div className=\"mt-6\">\r\n                  <div className=\"flex justify-between items-center mb-2\">\r\n                    <span className=\"text-sm font-medium text-gray-700\">\r\n                      Page {currentPageIndex + 1} of {pages.length}: {pages[currentPageIndex]?.title || 'Untitled Page'}\r\n                    </span>\r\n                    <span className=\"text-sm text-gray-500\">\r\n                      {Math.round(((currentPageIndex + 1) / pages.length) * 100)}% Complete\r\n                    </span>\r\n                  </div>\r\n                  <Progress\r\n                    value={((currentPageIndex + 1) / pages.length) * 100}\r\n                    className=\"h-2\"\r\n                  />\r\n                  {pages[currentPageIndex]?.description && (\r\n                    <p className=\"text-sm text-gray-600 mt-2\">\r\n                      {pages[currentPageIndex].description}\r\n                    </p>\r\n                  )}\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            {/* Status Messages */}\r\n            {submitStatus === 'success' && (\r\n              <Alert className=\"mb-6 border-green-200 bg-green-50\">\r\n                <CheckCircle className=\"h-4 w-4 text-green-600\" />\r\n                <AlertDescription className=\"text-green-800\">\r\n                  Form submitted successfully!\r\n                </AlertDescription>\r\n              </Alert>\r\n            )}\r\n\r\n            {submitStatus === 'error' && (\r\n              <Alert className=\"mb-6 border-red-200 bg-red-50\">\r\n                <AlertCircle className=\"h-4 w-4 text-red-600\" />\r\n                <AlertDescription className=\"text-red-800\">\r\n                  There was an error submitting the form. Please try again.\r\n                </AlertDescription>\r\n              </Alert>\r\n            )}\r\n\r\n            {/* Form Fields */}\r\n            {visibleComponents.length > 0 ? (\r\n              <div className=\"space-y-6\">\r\n                {visibleComponents.map(renderFormComponent)}\r\n                \r\n                {/* Navigation and Submit Buttons */}\r\n                <div className=\"pt-6 border-t border-gray-200\">\r\n                  <div className=\"flex justify-between items-center\">\r\n                    {isMultiPage ? (\r\n                      <>\r\n                        <Button\r\n                          type=\"button\"\r\n                          onClick={handlePreviousPage}\r\n                          disabled={currentPageIndex === 0}\r\n                          variant=\"outline\"\r\n                          className=\"flex items-center gap-2\"\r\n                        >\r\n                          <ChevronLeft className=\"h-4 w-4\" />\r\n                          Previous\r\n                        </Button>\r\n                        \r\n                        <div className=\"flex items-center gap-2\">\r\n                          {Array.from({ length: pages.length }, (_, i) => (\r\n                            <div\r\n                              key={i}\r\n                              className={`h-2 w-2 rounded-full transition-colors ${\r\n                                i === currentPageIndex\r\n                                  ? 'bg-blue-600'\r\n                                  : i < currentPageIndex\r\n                                  ? 'bg-blue-300'\r\n                                  : 'bg-gray-300'\r\n                              }`}\r\n                            />\r\n                          ))}\r\n                        </div>\r\n                        \r\n                        {currentPageIndex === pages.length - 1 ? (\r\n                          <Button\r\n                            type=\"submit\"\r\n                            disabled={isSubmitting}\r\n                            className=\"bg-blue-600 hover:bg-blue-700 disabled:opacity-50 flex items-center gap-2\"\r\n                          >\r\n                            {isSubmitting ? 'Submitting...' : 'Submit Form'}\r\n                          </Button>\r\n                        ) : (\r\n                          <Button\r\n                            type=\"button\"\r\n                            onClick={handleNextPage}\r\n                            className=\"bg-blue-600 hover:bg-blue-700 flex items-center gap-2\"\r\n                          >\r\n                            Next\r\n                            <ChevronRight className=\"h-4 w-4\" />\r\n                          </Button>\r\n                        )}\r\n                      </>\r\n                    ) : (\r\n                      <Button\r\n                        type=\"submit\"\r\n                        disabled={isSubmitting}\r\n                        className=\"bg-blue-600 hover:bg-blue-700 disabled:opacity-50\"\r\n                      >\r\n                        {isSubmitting ? 'Submitting...' : 'Submit Form'}\r\n                      </Button>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ) : (\r\n              <div className=\"text-center py-12\">\r\n                <div className=\"text-gray-400 mb-4\">\r\n                  <AlertCircle className=\"h-12 w-12 mx-auto\" />\r\n                </div>\r\n                <h3 className=\"text-lg font-medium text-gray-500 mb-2\">\r\n                  No form fields\r\n                </h3>\r\n                <p className=\"text-gray-400\">\r\n                  This form doesn't have any fields configured yet.\r\n                </p>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};"],"names":["LiveFormRenderer","template","onSubmit","className","formData","setFormData","useState","isSubmitting","setIsSubmitting","submitStatus","setSubmitStatus","errors","setErrors","isMultiPage","pages","useMemo","a","b","currentPageIndex","setCurrentPageIndex","sortedComponents","components","currentPage","evaluateVisibilityCondition","component","condition","triggerValue","conditionValue","visibleComponents","updateFormData","componentId","value","prev","newErrors","updateComponentData","updates","componentIndex","c","validateForm","componentsToValidate","id","props","label","isRequired","numValue","handlePreviousPage","handleNextPage","handleSubmit","e","aiSummaryData","allFormData","page","submissionData","error","renderFormComponent","type","placeholder","componentDescription","options","hasError","labelElement","Label","jsx","errorElement","jsxs","AlertCircle","Input","Textarea","option","index","checkboxValues","newValues","v","Calendar","_","i","scaleValue","TitleElement","SubtitleElement","SeparatorElement","AISummaryElement","section","evaluationSectionsConfig","s","Badge","field","fieldIndex","fieldId","fieldValue","Progress","Alert","CheckCircle","AlertDescription","Fragment","Button","ChevronLeft","ChevronRight"],"mappings":"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"}