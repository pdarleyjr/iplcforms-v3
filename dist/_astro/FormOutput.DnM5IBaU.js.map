{"version":3,"file":"FormOutput.DnM5IBaU.js","sources":["../../src/components/form-builder/FormOutput.tsx"],"sourcesContent":["// Form Output Component for IPLC Forms v3\r\n// Final form rendering for submissions, previews, and PDF generation\r\n\r\nimport React from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport type { FormComponent, FormTemplate } from '@/lib/api-form-builder';\r\nimport { Calendar, CheckCircle, FileText } from 'lucide-react';\r\nimport { AISummaryElement } from './components/AISummaryElement';\r\n\r\nexport interface FormOutputProps {\r\n  template: FormTemplate;\r\n  submissionData?: any;\r\n  mode: 'preview' | 'submission' | 'pdf';\r\n  className?: string;\r\n}\r\n\r\n// LogoHeader component for conditional IPLC logo rendering in outputs\r\nconst OutputLogoHeader: React.FC<{ show: boolean; mode: string }> = ({ show, mode }) => {\r\n  if (!show) return null;\r\n  \r\n  return (\r\n    <header className=\"flex justify-between items-center p-6 border-b border-gray-200 bg-white\">\r\n      <div className=\"text-2xl font-bold\">\r\n        FormPro\r\n      </div>\r\n      <div className=\"text-xs text-gray-500 flex items-center gap-2\">\r\n        {mode === 'submission' && (\r\n          <div className=\"flex items-center gap-1\">\r\n            <CheckCircle className=\"h-3 w-3\" />\r\n            <span>Submitted</span>\r\n          </div>\r\n        )}\r\n        {mode === 'pdf' && (\r\n          <div className=\"flex items-center gap-1\">\r\n            <FileText className=\"h-3 w-3\" />\r\n            <span>PDF Export</span>\r\n          </div>\r\n        )}\r\n        <span>{new Date().toLocaleDateString()}</span>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport const FormOutput: React.FC<FormOutputProps> = ({ \r\n  template, \r\n  submissionData = {}, \r\n  mode,\r\n  className = ''\r\n}) => {\r\n  // Get logo setting from template metadata, default to true\r\n  const showLogo = template.metadata?.showIplcLogo ?? true;\r\n  \r\n  // Extract components from template\r\n  const components = Array.isArray(template.schema?.components) ? template.schema.components :\r\n                    typeof template.schema?.components === 'string' ? JSON.parse(template.schema.components) : [];\r\n  \r\n  // Sort components by order\r\n  const sortedComponents = [...components].sort((a, b) => a.order - b.order);\r\n\r\n  const renderOutputComponent = (component: FormComponent) => {\r\n    const { id, type, label, props = {} } = component;\r\n    const isRequired = props.required || false;\r\n    const placeholder = props.placeholder || '';\r\n    const componentDescription = props.description || '';\r\n    const options = props.options || [];\r\n    const value = submissionData[id] || '';\r\n\r\n    const labelElement = (\r\n      <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">\r\n        {label}\r\n        {isRequired && <span className=\"text-red-500 ml-1\">*</span>}\r\n        {componentDescription && (\r\n          <span className=\"text-xs text-gray-500 font-normal block mt-1\">\r\n            {componentDescription}\r\n          </span>\r\n        )}\r\n      </Label>\r\n    );\r\n\r\n    const displayValue = (val: any) => {\r\n      if (val === null || val === undefined || val === '') {\r\n        return <span className=\"text-gray-400 italic\">No response</span>;\r\n      }\r\n      return <span className=\"text-gray-900\">{val}</span>;\r\n    };\r\n\r\n    switch (type) {\r\n      case 'text_input':\r\n        return (\r\n          <div key={id} className=\"space-y-2 mb-6\">\r\n            {labelElement}\r\n            <div className=\"p-3 bg-gray-50 border border-gray-200 rounded-md min-h-[40px]\">\r\n              {displayValue(value)}\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      case 'textarea':\r\n        return (\r\n          <div key={id} className=\"space-y-2 mb-6\">\r\n            {labelElement}\r\n            <div className=\"p-3 bg-gray-50 border border-gray-200 rounded-md min-h-[100px] whitespace-pre-wrap\">\r\n              {displayValue(value)}\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      case 'select':\r\n        return (\r\n          <div key={id} className=\"space-y-2 mb-6\">\r\n            {labelElement}\r\n            <div className=\"p-3 bg-gray-50 border border-gray-200 rounded-md\">\r\n              {displayValue(value)}\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      case 'radio':\r\n        return (\r\n          <div key={id} className=\"space-y-3 mb-6\">\r\n            {labelElement}\r\n            <div className=\"space-y-2\">\r\n              {options.map((option: string, index: number) => (\r\n                <div key={index} className=\"flex items-center space-x-3\">\r\n                  <div className={`w-4 h-4 rounded-full border-2 flex items-center justify-center ${\r\n                    value === option \r\n                      ? 'border-blue-500 bg-blue-500' \r\n                      : 'border-gray-300 bg-white'\r\n                  }`}>\r\n                    {value === option && (\r\n                      <div className=\"w-2 h-2 rounded-full bg-white\"></div>\r\n                    )}\r\n                  </div>\r\n                  <Label className={`text-sm ${value === option ? 'text-gray-900 font-medium' : 'text-gray-600'}`}>\r\n                    {option}\r\n                  </Label>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      case 'checkbox':\r\n        const checkboxValues = Array.isArray(value) ? value : [];\r\n        return (\r\n          <div key={id} className=\"space-y-3 mb-6\">\r\n            {labelElement}\r\n            <div className=\"space-y-2\">\r\n              {options.map((option: string, index: number) => (\r\n                <div key={index} className=\"flex items-center space-x-3\">\r\n                  <div className={`w-4 h-4 border-2 rounded flex items-center justify-center ${\r\n                    checkboxValues.includes(option) \r\n                      ? 'border-blue-500 bg-blue-500' \r\n                      : 'border-gray-300 bg-white'\r\n                  }`}>\r\n                    {checkboxValues.includes(option) && (\r\n                      <CheckCircle className=\"w-3 h-3 text-white\" />\r\n                    )}\r\n                  </div>\r\n                  <Label className={`text-sm ${checkboxValues.includes(option) ? 'text-gray-900 font-medium' : 'text-gray-600'}`}>\r\n                    {option}\r\n                  </Label>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      case 'date':\r\n        const displayDate = value ? new Date(value).toLocaleDateString() : '';\r\n        return (\r\n          <div key={id} className=\"space-y-2 mb-6\">\r\n            {labelElement}\r\n            <div className=\"p-3 bg-gray-50 border border-gray-200 rounded-md flex items-center gap-2\">\r\n              <Calendar className=\"h-4 w-4 text-gray-400\" />\r\n              {displayValue(displayDate)}\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      case 'number':\r\n        return (\r\n          <div key={id} className=\"space-y-2 mb-6\">\r\n            {labelElement}\r\n            <div className=\"p-3 bg-gray-50 border border-gray-200 rounded-md\">\r\n              {displayValue(value)}\r\n            </div>\r\n            {(props.min !== undefined || props.max !== undefined) && (\r\n              <div className=\"text-xs text-gray-500\">\r\n                Range: {props.min || 0} - {props.max || 'âˆž'}\r\n              </div>\r\n            )}\r\n          </div>\r\n        );\r\n\r\n      case 'scale':\r\n        return (\r\n          <div key={id} className=\"space-y-3 mb-6\">\r\n            {labelElement}\r\n            <div className=\"space-y-3\">\r\n              <div className=\"flex justify-between items-center\">\r\n                <span className=\"text-sm text-gray-500\">{props.min || 1}</span>\r\n                <span className=\"text-sm text-gray-500\">{props.max || 10}</span>\r\n              </div>\r\n              <div className=\"flex space-x-2\">\r\n                {Array.from({ length: (props.max || 10) - (props.min || 1) + 1 }, (_, i) => {\r\n                  const scaleValue = (props.min || 1) + i;\r\n                  return (\r\n                    <div\r\n                      key={scaleValue}\r\n                      className={`w-8 h-8 rounded-full border-2 text-sm flex items-center justify-center ${\r\n                        value === scaleValue\r\n                          ? 'border-blue-500 bg-blue-500 text-white font-medium'\r\n                          : 'border-gray-300 bg-white text-gray-400'\r\n                      }`}\r\n                    >\r\n                      {scaleValue}\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n              {value && (\r\n                <div className=\"text-sm text-gray-600\">\r\n                  Selected: <span className=\"font-medium\">{value}</span>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      case 'ai_summary':\r\n        return (\r\n          <div key={id} className=\"mb-6\">\r\n            <AISummaryElement\r\n              component={component}\r\n              formData={submissionData}\r\n              allComponents={sortedComponents}\r\n              isLiveForm={false}\r\n              isEditing={false}\r\n            />\r\n          </div>\r\n        );\r\n\r\n      default:\r\n        return (\r\n          <div key={id} className=\"space-y-2 mb-6\">\r\n            <Label className=\"text-sm text-gray-500\">Unknown Component Type: {type}</Label>\r\n            <div className=\"p-3 bg-gray-100 border border-gray-200 rounded-md\">\r\n              {displayValue(value)}\r\n            </div>\r\n          </div>\r\n        );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={`bg-white min-h-screen ${className}`}>\r\n      {/* Conditional Logo Header */}\r\n      <OutputLogoHeader show={showLogo} mode={mode} />\r\n      \r\n      {/* Form Content */}\r\n      <main className={showLogo ? \"p-6\" : \"p-6 pt-8\"}>\r\n        <div className=\"max-w-4xl mx-auto\">\r\n          {/* Form Header */}\r\n          <div className=\"mb-8\">\r\n            <div className=\"flex items-center gap-3 mb-4\">\r\n              <h2 className=\"text-3xl font-bold text-gray-900\">\r\n                {template.name || 'Untitled Form'}\r\n              </h2>\r\n              {mode === 'submission' && (\r\n                <Badge variant=\"default\" className=\"bg-green-100 text-green-800 border-green-200\">\r\n                  <CheckCircle className=\"w-3 h-3 mr-1\" />\r\n                  Submitted\r\n                </Badge>\r\n              )}\r\n              {mode === 'pdf' && (\r\n                <Badge variant=\"secondary\" className=\"bg-blue-100 text-blue-800 border-blue-200\">\r\n                  <FileText className=\"w-3 h-3 mr-1\" />\r\n                  PDF Export\r\n                </Badge>\r\n              )}\r\n            </div>\r\n            \r\n            {template.description && (\r\n              <p className=\"text-gray-600 text-lg\">\r\n                {template.description}\r\n              </p>\r\n            )}\r\n            \r\n            {mode === 'submission' && submissionData && (\r\n              <div className=\"mt-4 p-4 bg-green-50 border border-green-200 rounded-lg\">\r\n                <h3 className=\"text-sm font-medium text-green-800 mb-1\">Submission Details</h3>\r\n                <p className=\"text-xs text-green-700\">\r\n                  Submitted on: {new Date().toLocaleDateString()} at {new Date().toLocaleTimeString()}\r\n                </p>\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {/* Form Content */}\r\n          {sortedComponents.length > 0 ? (\r\n            <div className=\"space-y-1\">\r\n              {sortedComponents.map(renderOutputComponent)}\r\n              \r\n              {/* Footer for mode-specific information */}\r\n              {mode !== 'preview' && (\r\n                <div className=\"pt-8 border-t border-gray-200 mt-8\">\r\n                  <div className=\"text-center\">\r\n                    <p className=\"text-xs text-gray-500\">\r\n                      {mode === 'submission' && 'Form submission completed successfully'}\r\n                      {mode === 'pdf' && 'Generated for PDF export'}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </div>\r\n          ) : (\r\n            <div className=\"text-center py-12\">\r\n              <div className=\"text-gray-400 mb-4\">\r\n                <FileText className=\"h-12 w-12 mx-auto\" />\r\n              </div>\r\n              <h3 className=\"text-lg font-medium text-gray-500 mb-2\">\r\n                No form content\r\n              </h3>\r\n              <p className=\"text-gray-400\">\r\n                This form doesn't have any fields configured.\r\n              </p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n};"],"names":["OutputLogoHeader","show","mode","jsxs","jsx","CheckCircle","FileText","FormOutput","template","submissionData","className","showLogo","sortedComponents","a","b","renderOutputComponent","component","id","type","label","props","isRequired","componentDescription","options","value","labelElement","Label","displayValue","val","option","index","checkboxValues","displayDate","Calendar","_","i","scaleValue","AISummaryElement","Badge"],"mappings":"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"}