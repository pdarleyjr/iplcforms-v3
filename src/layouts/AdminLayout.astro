---
import '@/styles/globals.css'
import { Header } from '@/components/Header';
import Sidebar from '@/components/admin/Sidebar';
import ApiTokenMissingCard from '@/components/admin/api-token-missing-card';

const currentPath = Astro.url.pathname;
const title = Astro.props.title || 'IPLC Forms Admin';
// Handle undefined env gracefully for development
const env = Astro.locals.env || {};
const API_TOKEN = env.API_TOKEN || process.env.API_TOKEN || 'dev_fallback_token';
const apiTokenSet = API_TOKEN && API_TOKEN !== '' && API_TOKEN !== 'dev_fallback_token';
---

<script is:inline>
  const getThemePreference = () => {
    if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
      return localStorage.getItem('theme');
    }
    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
  };
  const isDark = getThemePreference() === 'dark';
  document.documentElement.classList[isDark ? 'add' : 'remove']('dark');
 
  if (typeof localStorage !== 'undefined') {
    const observer = new MutationObserver(() => {
      const isDark = document.documentElement.classList.contains('dark');
      localStorage.setItem('theme', isDark ? 'dark' : 'light');
    });
    observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
  }
</script>

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no, viewport-fit=cover" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title ? `${title} - IPLC Forms` : 'IPLC Forms Admin'}</title>
  </head>
  <body class="min-h-screen bg-gray-50">
    <Header currentPath={currentPath} />
    
    <div class="flex h-[calc(100vh-4rem)]">
      <!-- Sidebar -->
      <Sidebar currentPath={currentPath} client:load />
      
      <!-- Main content area -->
      <main class="flex-1 overflow-y-auto">
        <div class="p-8">
          <div class="mb-4">
            {!apiTokenSet && <ApiTokenMissingCard />}
          </div>
          <div class="flex items-center justify-between mb-6">
            <slot name="actions" />
          </div>
          <slot />
        </div>
      </main>
    </div>
    
    <!-- Subtle noise texture overlay -->
    <div class="fixed inset-0 pointer-events-none opacity-[0.015] mix-blend-multiply"
         style="background-image: url('data:image/svg+xml,%3Csvg viewBox="0 0 256 256" xmlns="http://www.w3.org/2000/svg"%3E%3Cfilter id="noiseFilter"%3E%3CfeTurbulence type="fractalNoise" baseFrequency="0.85" numOctaves="4" stitchTiles="stitch"/%3E%3C/filter%3E%3Crect width="100%25" height="100%25" filter="url(%23noiseFilter)"/%3E%3C/svg%3E');">
    </div>

    <!-- Analytics SPA pageview wiring -->
    <script type="module">
      import { initPlausibleScript, createAnalytics } from '/src/lib/analytics/plausibleClient.ts';
      try {
        initPlausibleScript();
        const analytics = createAnalytics({ enabled: import.meta.env?.ANALYTICS_ENABLED === 'true' });

        // Initial pageview
        analytics.pageview();

        // Patch history methods to detect SPA navigations
        const origPush = history.pushState;
        const origReplace = history.replaceState;
        const emit = () => analytics.pageview();
        history.pushState = new Proxy(origPush, {
          apply(target, thisArg, args) {
            const ret = Reflect.apply(target, thisArg, args);
            emit();
            return ret;
          }
        });
        history.replaceState = new Proxy(origReplace, {
          apply(target, thisArg, args) {
            const ret = Reflect.apply(target, thisArg, args);
            emit();
            return ret;
          }
        });
        window.addEventListener('popstate', emit);
        // Astro onPageLoad hook (if available) for client navigation
        // @ts-ignore
        if (typeof Astro !== 'undefined' && Astro.onPageLoad) {
          // @ts-ignore
          Astro.onPageLoad(() => analytics.pageview());
        }
      } catch (e) {
        console.debug('analytics init failed', e);
      }
    </script>
  </body>
</html>