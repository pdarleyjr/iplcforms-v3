---
export const prerender = false;

import Layout from '@/layouts/Layout.astro';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { FormOutput } from '@/components/form-builder/FormOutput';
import { FormTemplateService } from '@/lib/services/form_template';
import { FormSubmissionService } from '@/lib/services/form_submission';

const { id, submissionId } = Astro.params;

if (!id || !submissionId) {
  return Astro.redirect('/forms');
}

const { DB } = Astro.locals.env;
const formTemplateService = new FormTemplateService(DB);
const formSubmissionService = new FormSubmissionService(DB);

let template;
let submission;
try {
  template = await formTemplateService.getById(parseInt(id));
  if (!template) {
    return Astro.redirect('/forms');
  }
  
  submission = await formSubmissionService.getById(parseInt(submissionId));
  if (!submission || submission.template_id !== parseInt(id)) {
    return Astro.redirect(`/forms/${id}/analytics`);
  }
} catch (error) {
  console.error('Error loading form submission:', error);
  return Astro.redirect('/forms');
}

// Format dates
const formatDate = (dateString: string) => {
  return new Date(dateString).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });
};
---

<Layout title={`Submission #${submission.id} - ${template.name}`}>
  <div class="space-y-8">
    <!-- Header -->
    <div class="flex items-center justify-between">
      <div>
        <h1 class="text-3xl font-bold tracking-tight">Form Submission</h1>
        <p class="text-muted-foreground">
          Viewing submission #{submission.id} for: <span class="font-medium">{template.name}</span>
        </p>
      </div>
      <div class="flex gap-2">
        <Button variant="outline">
          Export PDF
        </Button>
        <Button variant="outline">
          Print
        </Button>
        <Button variant="outline">
          <a href={`/forms/${id}/analytics`}>‚Üê Back to Analytics</a>
        </Button>
      </div>
    </div>

    <!-- Submission Information -->
    <Card>
      <CardHeader>
        <div class="flex items-center justify-between">
          <div>
            <CardTitle>Submission Details</CardTitle>
            <CardDescription>Information about this form submission</CardDescription>
          </div>
          <div class="flex items-center gap-2">
            <Badge variant={submission.status === 'completed' ? 'default' : 'secondary'}>
              {submission.status}
            </Badge>
            {submission.calculated_score && (
              <Badge variant="outline">Score: {submission.calculated_score}</Badge>
            )}
          </div>
        </div>
      </CardHeader>
      <CardContent>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
          <div>
            <strong>Submitted:</strong> {formatDate(submission.submitted_at)}
          </div>
          <div>
            <strong>Submission ID:</strong> #{submission.id}
          </div>
          <div>
            <strong>Form Version:</strong> {template.version}
          </div>
        </div>
        {submission.submitted_by && (
          <div class="mt-4 text-sm">
            <strong>Submitted by:</strong> {submission.submitted_by.name} ({submission.submitted_by.email})
          </div>
        )}
      </CardContent>
    </Card>

    <!-- Form Submission Content -->
    <Card>
      <CardHeader>
        <CardTitle>Submitted Form</CardTitle>
        <CardDescription>
          Complete form submission as submitted by the user
        </CardDescription>
      </CardHeader>
      <CardContent class="p-0">
        <FormOutput
          client:only="react"
          template={template}
          submissionData={submission.form_data}
          mode="submission"
          className="border-0"
        />
      </CardContent>
    </Card>

    <!-- Form Actions -->
    <Card>
      <CardHeader>
        <CardTitle>Actions</CardTitle>
        <CardDescription>
          Available actions for this submission
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div class="flex flex-wrap gap-4">
          <Button variant="outline">
            Download PDF
          </Button>
          <Button variant="outline">
            Email Copy
          </Button>
          <Button variant="outline">
            Mark as Reviewed
          </Button>
          <Button variant="outline">
            Add Note
          </Button>
          {submission.status === 'draft' && (
            <Button>
              Mark as Complete
            </Button>
          )}
        </div>
      </CardContent>
    </Card>
  </div>

  <script define:vars={{ submission, template }}>
    // Make submission data available for PDF generation or other client-side operations
    window.__FORM_SUBMISSION__ = submission;
    window.__FORM_TEMPLATE__ = template;
    
    // Handle submission actions
    document.addEventListener('DOMContentLoaded', () => {
      // Add event handlers for various actions
      const exportPdfBtn = document.querySelector('[data-action="export-pdf"]');
      const printBtn = document.querySelector('[data-action="print"]');
      
      if (printBtn) {
        printBtn.addEventListener('click', () => {
          window.print();
        });
      }
      
      // Future: Add PDF export functionality
      if (exportPdfBtn) {
        exportPdfBtn.addEventListener('click', async () => {
          // PDF export logic would go here
          console.log('PDF export requested for submission:', submission.id);
        });
      }
    });
  </script>
</Layout>