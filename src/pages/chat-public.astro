---
import '@/styles/globals.css'
import { NotebookLMInterface } from '@/components/chat/NotebookLMInterface';

const title = 'AI Assistant Chat - Public';
const description = 'Chat with AI assistant and analyze documents';
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no, viewport-fit=cover" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <meta name="description" content={description} />
  </head>
  <body class="min-h-screen bg-gray-50">
    <div class="h-screen flex flex-col">
      <!-- Simple header -->
      <header class="bg-white border-b border-gray-200 px-4 py-3">
        <div class="flex items-center justify-between">
          <h1 class="text-xl font-semibold text-gray-900">IPLC AI Assistant (Public Test)</h1>
          <a href="/" class="text-sm text-blue-600 hover:text-blue-800">Back to Home</a>
        </div>
      </header>
      
      <!-- Chat interface takes up the rest of the screen -->
      <div class="flex-1 overflow-hidden">
        <NotebookLMInterface client:load />
      </div>
    </div>
    
    <!-- Subtle noise texture overlay -->
    <div class="fixed inset-0 pointer-events-none opacity-[0.015] mix-blend-multiply"
         style="background-image: url('data:image/svg+xml,%3Csvg viewBox="0 0 256 256" xmlns="http://www.w3.org/2000/svg"%3E%3Cfilter id="noiseFilter"%3E%3CfeTurbulence type="fractalNoise" baseFrequency="0.85" numOctaves="4" stitchTiles="stitch"/%3E%3C/filter%3E%3Crect width="100%25" height="100%25" filter="url(%23noiseFilter)"/%3E%3C/svg%3E');">
    </div>
  </body>
</html>

<script is:inline>
  const getThemePreference = () => {
    if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
      return localStorage.getItem('theme');
    }
    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
  };
  const isDark = getThemePreference() === 'dark';
  document.documentElement.classList[isDark ? 'add' : 'remove']('dark');
 
  if (typeof localStorage !== 'undefined') {
    const observer = new MutationObserver(() => {
      const isDark = document.documentElement.classList.contains('dark');
      localStorage.setItem('theme', isDark ? 'dark' : 'light');
    });
    observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
  }
</script>