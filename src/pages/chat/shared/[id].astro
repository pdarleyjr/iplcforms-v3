---
import Layout from '../../../layouts/Layout.astro';
import { Card } from '../../../components/ui/card';
import { Bot, User, FileText, Share2 } from 'lucide-react';

const { id } = Astro.params;

// This will be fetched client-side to avoid auth issues
---

<Layout title="Shared Chat Snippet - IPLC Forms">
  <div class="min-h-screen bg-gradient-to-br from-background via-background to-muted/20 p-4">
    <div class="max-w-4xl mx-auto">
      <!-- Header -->
      <div class="mb-8 text-center">
        <div class="inline-flex items-center justify-center w-16 h-16 rounded-full bg-gradient-to-r from-gradient-metal-start to-gradient-metal-end mb-4">
          <Share2 class="w-8 h-8 text-white" />
        </div>
        <h1 class="text-3xl font-bold mb-2">Shared Chat Snippet</h1>
        <p class="text-muted-foreground">This conversation was shared from IPLC Forms AI Assistant</p>
      </div>
      
      <!-- Loading State -->
      <div id="loading" class="text-center py-12">
        <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
        <p class="text-muted-foreground mt-4">Loading conversation...</p>
      </div>
      
      <!-- Error State -->
      <div id="error" class="hidden">
        <Card class="p-8 text-center">
          <div class="text-destructive mb-4">
            <svg class="w-12 h-12 mx-auto" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
            </svg>
          </div>
          <h2 class="text-xl font-semibold mb-2">Snippet Not Found</h2>
          <p class="text-muted-foreground">This snippet may have expired or the link may be invalid.</p>
        </Card>
      </div>
      
      <!-- Content -->
      <div id="content" class="hidden space-y-6">
        <!-- Question -->
        <Card class="p-6">
          <div class="flex gap-4">
            <div class="w-8 h-8 rounded-full bg-muted flex items-center justify-center flex-shrink-0">
              <User class="w-5 h-5" />
            </div>
            <div class="flex-1">
              <p class="font-medium text-sm text-muted-foreground mb-1">Question</p>
              <p id="question" class="text-base"></p>
            </div>
          </div>
        </Card>
        
        <!-- Answer -->
        <Card class="p-6">
          <div class="flex gap-4">
            <div class="w-8 h-8 rounded-full bg-gradient-to-r from-gradient-metal-start to-gradient-metal-end flex items-center justify-center flex-shrink-0">
              <Bot class="w-5 h-5 text-white" />
            </div>
            <div class="flex-1">
              <p class="font-medium text-sm text-muted-foreground mb-1">AI Assistant</p>
              <div id="answer" class="text-base prose prose-sm max-w-none"></div>
              
              <!-- Citations -->
              <div id="citations" class="mt-4 space-y-2 hidden">
                <p class="font-medium text-sm text-muted-foreground">Sources:</p>
                <div id="citations-list" class="space-y-2"></div>
              </div>
            </div>
          </div>
        </Card>
        
        <!-- Metadata -->
        <div class="text-center text-sm text-muted-foreground">
          <p>Shared on <span id="created-date"></span></p>
          <p>Expires on <span id="expires-date"></span></p>
        </div>
      </div>
    </div>
  </div>
  
  <script>
    const snippetId = '<%= id %>';
    
    async function loadSnippet() {
      try {
        const response = await fetch(`/api/chat/share?id=${snippetId}`);
        const data = await response.json();
        
        if (!response.ok || !data.success) {
          showError();
          return;
        }
        
        const snippet = data.snippet;
        
        // Hide loading, show content
        document.getElementById('loading')?.classList.add('hidden');
        document.getElementById('content')?.classList.remove('hidden');
        
        // Populate content
        const questionEl = document.getElementById('question');
        if (questionEl) questionEl.textContent = snippet.question;
        
        const answerEl = document.getElementById('answer');
        if (answerEl) {
          // Parse and render citations in the answer
          answerEl.innerHTML = renderAnswerWithCitations(snippet.answer, snippet.citations);
        }
        
        // Show citations if available
        if (snippet.citations && snippet.citations.length > 0) {
          const citationsEl = document.getElementById('citations');
          const citationsListEl = document.getElementById('citations-list');
          
          if (citationsEl && citationsListEl) {
            citationsEl.classList.remove('hidden');
            
            citationsListEl.innerHTML = snippet.citations.map((citation: any, index: number) => `
              <div class="p-3 bg-muted rounded-lg">
                <div class="flex items-start gap-2">
                  <span class="inline-flex items-center justify-center w-6 h-6 text-xs rounded-full bg-primary/20 text-primary flex-shrink-0">
                    ${index + 1}
                  </span>
                  <div class="flex-1">
                    <p class="font-medium text-sm mb-1">${citation.documentName}</p>
                    <p class="text-sm text-muted-foreground">${citation.text}</p>
                  </div>
                </div>
              </div>
            `).join('');
          }
        }
        
        // Format dates
        const createdEl = document.getElementById('created-date');
        const expiresEl = document.getElementById('expires-date');
        
        if (createdEl) createdEl.textContent = new Date(snippet.createdAt).toLocaleDateString();
        if (expiresEl) expiresEl.textContent = new Date(snippet.expiresAt).toLocaleDateString();
        
      } catch (error) {
        console.error('Error loading snippet:', error);
        showError();
      }
    }
    
    function showError() {
      document.getElementById('loading')?.classList.add('hidden');
      document.getElementById('error')?.classList.remove('hidden');
    }
    
    function renderAnswerWithCitations(content: string, citations: any[]) {
      if (!citations || citations.length === 0) {
        return content.replace(/\n/g, '<br>');
      }
      
      // Replace citation markers with styled buttons
      let html = content.replace(/\^\[(\d+)\]/g, (match, num) => {
        return `<sup><button onclick="scrollToCitation(${num})" class="inline-flex items-center justify-center w-5 h-5 text-xs rounded-full bg-primary/20 text-primary hover:bg-primary/30 transition-colors ml-0.5">${num}</button></sup>`;
      });
      
      return html.replace(/\n/g, '<br>');
    }
    
    window.scrollToCitation = function(num: number) {
      const citationsEl = document.getElementById('citations');
      if (citationsEl) {
        citationsEl.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
      }
    };
    
    // Load snippet on page load
    loadSnippet();
  </script>
</Layout>