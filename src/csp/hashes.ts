/**
 * CSP Script Hashes
 * 
 * This file contains SHA-256 hashes for inline scripts that cannot be easily
 * moved to external files. Each hash is documented with its purpose and location.
 * 
 * To generate a hash for a new inline script:
 * 1. Get the exact script content (including whitespace)
 * 2. Generate SHA-256 hash: echo -n "script content" | openssl dgst -sha256 -binary | openssl base64
 * 3. Add the hash to the appropriate array below with documentation
 */

/**
 * Critical inline scripts that must run before page load
 * These are typically for theme detection, critical CSS, etc.
 */
export const CRITICAL_SCRIPT_HASHES = [
  // Theme detection script used in Layout.astro, AdminLayout.astro, and chat-public.astro
  // This script must run inline to prevent flash of unstyled content (FOUC)
  'sha256-X2Y7nBp9NTsO1LGDz33QfPF3Wy1+0/ESh118Ypphav4=',
] as const;

/**
 * Astro define:vars scripts
 * These are generated by Astro for passing server-side data to client-side
 * Note: These may vary based on the actual data being passed
 */
export const ASTRO_DEFINE_VARS_HASHES = [
  // Used in form pages to pass template and submission data
  // These are dynamic and may need to be handled differently
  // Keeping empty as these need 'unsafe-inline' due to dynamic nature
] as const;

/**
 * Analytics and tracking scripts
 * Scripts for Plausible Analytics and other tracking services
 */
export const ANALYTICS_SCRIPT_HASHES = [
  // NOTE: These scripts will be moved to external files
] as const;

/**
 * Integration configuration scripts
 * Scripts for handling third-party integrations
 */
export const INTEGRATION_SCRIPT_HASHES = [
  // NOTE: These scripts will be moved to external files
] as const;

/**
 * All script hashes combined for CSP header
 */
export const ALL_SCRIPT_HASHES = [
  ...CRITICAL_SCRIPT_HASHES,
  ...ASTRO_DEFINE_VARS_HASHES,
  ...ANALYTICS_SCRIPT_HASHES,
  ...INTEGRATION_SCRIPT_HASHES,
] as const;

/**
 * Format hashes for CSP header
 */
export function formatScriptSrcCSP(additionalSources: string[] = []): string {
  const hashes = ALL_SCRIPT_HASHES.map(hash => `'${hash}'`);
  const sources = [
    "'self'",
    ...hashes,
    ...additionalSources
  ];
  return sources.join(' ');
}

/**
 * Documentation of remaining unsafe-inline usage:
 * 
 * 1. Astro define:vars - These scripts are dynamically generated by Astro to pass
 *    server-side data to client-side. The content varies based on the actual data,
 *    making it impractical to pre-calculate hashes. Consider alternatives:
 *    - Use data attributes and read them in external scripts
 *    - Use a JSON script tag with type="application/json"
 *    - Make an API call to fetch the data
 * 
 * 2. Theme detection script - This MUST run inline before page render to prevent
 *    FOUC (Flash of Unstyled Content). The script is identical across all pages,
 *    so we can use a hash for this.
 * 
 * 3. Plausible Analytics - The initialization and event scripts could potentially
 *    be moved to external files, but would require refactoring the analytics setup.
 * 
 * 4. Form action handlers - These could be moved to external modules with proper
 *    event delegation.
 */